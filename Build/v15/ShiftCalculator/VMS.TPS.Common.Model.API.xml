<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VMS.TPS.Common.Model.API</name>
    </assembly>
    <members>
        <member name="T:VMS.TPS.Common.Model.API.AddOn">
            <summary>
            Represents an add-on, which is a beam modifying device that is inserted into a beam
            in an accessory slot of the external beam machine.
            An add-on is used to shape the beam or modulate its intensity or both.
            Add-ons are blocks, MLCs, wedges, compensators, applicators, a tray, and other devices
            or materials that can be fixed to a tray to be mounted into an accessory slot.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ApiDataObject">
            <summary>
            The base class of objects in the Eclipse Scripting API.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.SerializableObject">
            <summary>
            Base class for objects that can be serialized.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.GetSchema">
            <summary>
            This member is internal to the Eclipse Scripting API.
            </summary>
            <returns>XmlSchema</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.ReadXml(System.Xml.XmlReader)">
            <summary>
            This member is internal to the Eclipse Scripting API.
            </summary>
            <param name="reader">XmlReader</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes this object to the given XmlWriter.
            </summary>
            <param name="writer">XmlWriter where this object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.WriteXml(System.Xml.XmlWriter,System.String,System.Object)">
            <summary>
            Serializes everything except IEnumerable.
            </summary>
            <param name="writer">XmlWriter</param>
            <param name="name">Name.</param>
            <param name="obj">Object.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.WriteXml(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Serializes a string.
            </summary>
            <param name="writer">XmlWriter.</param>
            <param name="name">Name.</param>
            <param name="obj">String.</param>
            <remarks>Special case, because string is IEnumerable also.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.WriteXml``1(System.Xml.XmlWriter,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Serializes IEnumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.WriteXml``2(System.Xml.XmlWriter,System.String,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Serializes IDictionary.
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.StartSerialization(System.String,System.String)">
            <summary>
            Must be called at the beginning of serialization
            </summary>
            <param name="typeName">Name of the type to serialize.</param>
            <param name="typeId">Id of the object.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.EndSerialization">
            <summary>
            Must be called at the end of serialization. Clear history records and type names.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.IsTypeSerialized">
            <summary>
            Check if history contains information about class
            </summary>
            <returns></returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.AddTypeToHistory">
            <summary>
            Add history record
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.ClearSerializationHistory">
            <summary>
            This member is internal to the Eclipse Scripting API.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.");
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object. 
            </summary>
            <param name="obj">Object to compare with the current object</param>
            <returns>True if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.op_Equality(VMS.TPS.Common.Model.API.ApiDataObject,VMS.TPS.Common.Model.API.ApiDataObject)">
            <summary>
            The equality operator.
            </summary>
            <param name="a">First operand.</param>
            <param name="b">Second operand.</param>
            <returns>True if the given ApiDataObjects are the same.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.op_Inequality(VMS.TPS.Common.Model.API.ApiDataObject,VMS.TPS.Common.Model.API.ApiDataObject)">
            <summary>
            The inequality operator.
            </summary>
            <param name="a">First operand.</param>
            <param name="b">Second operand.</param>
            <returns>True if the given ApiDataObjects are not the same.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.GetESAPIClinicalModifyingMethodGuard(System.String)">
            <summary>
            Throws an exception if the system is in the read-only state.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.EnforceObjectLimits(System.String)">
            <summary>
            Throws an exception if the caller tries to add more scripting objects of certain types than a preset maximum limit allows.
            </summary>
            <param name="callerMemberName"></param>
            <exception cref="T:System.ApplicationException">
            Thrown when the maximum number of scripting objects have already been created.
            </exception>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.GetESAPINonClinicalModifyingMethodGuard(System.String)">
            <summary>
            Throws an exception if the system is in the read-only state.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.GetESAPIClinicalModifyingMethodGuard(VMS.TPS.Common.Model.IDataObject,System.String,System.String)">
            <summary>
            Throws an exception if the system is in the read-only state.
            </summary>
            <param name="dataObj">The data object that is modified.</param>
            <param name="explicitCallerName">The API member that calls.</param>
            <param name="callerMemberName">The member that calls.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.GetESAPINonClinicalModifyingMethodGuard(VMS.TPS.Common.Model.IDataObject,System.String,System.String)">
            <summary>
            Throws an exception if the system is in the read-only state.
            </summary>
            <param name="dataObj">The data object that is modified.</param>
            <param name="explicitCallerName">The API member that calls.</param>
            <param name="callerMemberName">The member that calls.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApiDataObject.Id">
            <summary>
            The identifier of the object.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApiDataObject.Name">
            <summary>
            The name of the object.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApiDataObject.Comment">
            <summary>
            A comment about the object.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApiDataObject.HistoryUserName">
            <summary>
            The identifier of the last user who modified this object.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApiDataObject.HistoryUserDisplayName">
            <summary>
            The name of the last user who modified this object.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApiDataObject.HistoryDateTime">
            <summary>
            The date when this object was last modified.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.AddOn.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.AddOn.CreationDateTime">
            <summary>
            The date when this object was created.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.AddOnMaterial">
            <summary>
            Add-on material describes the dosimetric and physical properties of the metal alloy or other substance used to create the add-on.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.AddOnMaterial.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ApplicationScript">
            <summary>
            Presents the application script information in the system.
            
            The location of the script file is not stored in the system.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApplicationScript.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScript.ApprovalStatus">
            <summary>
            The status of the script.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScript.ApprovalStatusDisplayText">
            <summary>
            The display text of the approval status.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScript.AssemblyName">
            <summary>
            The full name of the script assembly.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScript.ExpirationDate">
            <summary>
            An optional expiration date of the script. The script cannot be executed after expiration date.
            The date is presented in UTC.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScript.IsReadOnlyScript">
            <summary>
            Returns true if the script is intended only to read patient data.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScript.IsWriteableScript">
            <summary>
            Returns true if the script is intended to modify persistent data.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScript.PublisherName">
            <summary>
            The name of the organization or author that created the script.
            This is a free text that can be set by the approver.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScript.ScriptType">
            <summary>
            The type of the application script.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScript.StatusDate">
            <summary>
            A timestamp of the last approval status modification.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScript.StatusUserIdentity">
            <summary>
            The identity of the user who last modified the approval status.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ApplicationScriptLog">
            <summary>
            The log entry of the application script execution.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApplicationScriptLog.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScriptLog.CourseId">
            <summary>
            The identifier of the course that was modified by the script.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScriptLog.PatientId">
            <summary>
            The identifier of the patient that was modified by the script.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScriptLog.PlanSetupId">
            <summary>
            The identifier of the plan that was modified by the script, or an empty string if the script did not modify the plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScriptLog.PlanUID">
            <summary>
            The DICOM UID of the plan that was modified by the script, or an empty string if the script did not modify the plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScriptLog.Script">
            <summary>
            The script that modified the plan or structure set.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScriptLog.ScriptFullName">
            <summary>
            The full name of the script assembly that modified the plan or structure set. A System.Reflection.AssemblyName object can be created from the string.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScriptLog.StructureSetId">
            <summary>
            The identifier of the structure set that was modified by the script, or an empty string if the script did not modify the structure set.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApplicationScriptLog.StructureSetUID">
            <summary>
            The DICOM UID of the structure set that was modified by the script, or an empty string if the script did not modify the structure set.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Applicator">
            <summary>
            An applicator add-on, either an electron applicator or cone applicator.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Applicator.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.BeamDose">
            <summary>
            Represents a dose that is connected to a Beam.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Dose">
            <summary>
            Represents a 3D dose grid.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Dose.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Dose.GetDoseProfile(VMS.TPS.Common.Model.Types.VVector,VMS.TPS.Common.Model.Types.VVector,System.Double[])">
            <summary>
            Gets the dose profile.
            </summary>
            <param name="start">Location of the first point of the profile.</param>
            <param name="stop">Location of the last point of the profile.</param>
            <param name="preallocatedBuffer">Preallocated buffer where the values are stored. The size of
            the buffer determines the number of values to return.</param>
            <returns>The DoseProfile object holding the dose values along the line segment defined by start and stop parameters.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Dose.GetDoseToPoint(VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            Gets the point dose at a specified location.
            </summary>
            <param name="at">Location</param>
            <returns>Dose value. A NaN is returned if dose value is not available.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Dose.GetVoxels(System.Int32,System.Int32[0:,0:])">
            <summary>
            Gets the voxels of the given dose plane.
            </summary>
            <param name="planeIndex">Zero based index of the plane.</param>
            <param name="preallocatedBuffer">Preallocated buffer where the voxel values are stored. The size of
            the buffer must conform with the X- and Y-size of this dose.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Dose.VoxelToDoseValue(System.Int32)">
            <summary>
            Converts the given raw voxel value to the corresponding
            dose value.
            </summary>
            <param name="voxelValue">Voxel value.</param>
            <returns>Value converted to dose.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.DoseMax3D">
            <summary>
            The maximum dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.DoseMax3DLocation">
            <summary>
            The location of the maximum dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.Isodoses">
            <summary>
            A collection of isodoses.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.Origin">
            <summary>
            The origin of the dose matrix. In other words, the DICOM coordinates of the center point
            of the upper-left hand corner voxel of the first dose plane.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.Series">
            <summary>
            Returns the series that contains the dose, or null if the dose is not connected to a series.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.SeriesUID">
            <summary>
            Returns the DICOM UID of the series that contains the dose, or an empty string if the dose is not connected to a series.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.UID">
            <summary>
            The DICOM UID of the dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.XDirection">
            <summary>
            The direction of the x-axis in the dose matrix.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.XRes">
            <summary>
            The dose matrix resolution in X-direction in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.XSize">
            <summary>
            The dose matrix size in X-direction in voxels.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.YDirection">
            <summary>
            The direction of the y-axis in the dose matrix.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.YRes">
            <summary>
            The dose matrix resolution in Y-direction in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.YSize">
            <summary>
            The dose matrix size in Y-direction in voxels.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.ZDirection">
            <summary>
            The direction of the z-axis in the dose matrix.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.ZRes">
            <summary>
            The dose matrix resolution in Z-direction in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.ZSize">
            <summary>
            The dose matrix size in Z-direction in voxels.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BeamDose.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BeamDose.GetAbsoluteBeamDoseValue(VMS.TPS.Common.Model.Types.DoseValue)">
            <summary>
            Converts a relative beam dose value into absolute units. This method factors in the field weight, dose prescription, prescribed percentage and plan normalization.
            </summary>
            <param name="relative">The relative dose value from this beam dose matrix to be converted.</param>
            <returns>The absolute dose value per fraction. If the input value is undefined dose, returns undefined dose.</returns>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.BeamParameters">
            <summary>
            An editable copy of the parameters of a treatment beam.
            </summary>
            <remarks>
            To apply the parameters, call the <see cref="M:VMS.TPS.Common.Model.API.Beam.ApplyParameters(VMS.TPS.Common.Model.API.BeamParameters)">ApplyParameters</see> method of the
            Beam class. Because the parameters are simple copies, they do not
            reflect the current state of the data model.
            </remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BeamParameters.SetAllLeafPositions(System.Single[0:,0:])">
            <summary>
            Assigns the given leaf positions to each of the control point parameters.
            </summary>
            <param name="leafPositions">
            The positions of the MLC leaf pairs (in millimeters) in the IEC BEAMLIMITING DEVICE
            coordinate axis appropriate to the MLC device type: the X-axis for MLCX and the Y-axis for MLCY.
            The two-dimensional array is indexed [bank, leaf], where the bank is either 0 or 1.
            Bank 0 represents the leaf bank to the negative MLC X direction, and bank 1 to the positive MLC X direction.</param>
            <remarks>To apply the parameters, call the <see cref="M:VMS.TPS.Common.Model.API.Beam.ApplyParameters(VMS.TPS.Common.Model.API.BeamParameters)">ApplyParameters</see>
            method of the Beam class.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BeamParameters.SetJawPositions(VMS.TPS.Common.Model.Types.VRect{System.Double})">
            <summary>
            Assigns the given jaw positions to each of the control point parameters.
            </summary>
            <param name="positions">A rectangle describing the jaw positions in millimeters in IEC BEAM LIMITING DEVICE coordinates.</param>
            <remarks>To apply the parameters, call the <see cref="M:VMS.TPS.Common.Model.API.Beam.ApplyParameters(VMS.TPS.Common.Model.API.BeamParameters)">ApplyParameters</see>
            method of the Beam class.</remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BeamParameters.ControlPoints">
            <summary>
            Editable control point parameters copied from the
            treatment beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BeamParameters.GantryDirection">
            <summary>
            The direction of gantry rotation (clockwise or counterclockwise).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BeamParameters.Isocenter">
            <summary>
            A copy of the isocenter position, in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BeamParameters.WeightFactor">
            <summary>
            The weight factor of the beam.
            </summary>
            <remarks>
            The total dose distribution of a plan is calculated by adding the individual beam dose
            distributions. Before doing this, the dose distributions of each beam are multiplied
            with the respective beam weights, which indicate the relative weight of each beam in
            a plan. How the weight factors affect the dose distribution is determined by the
            selected beam normalization method.
            </remarks>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.BeamUncertainty">
            <summary>
            Access to beam uncertainty.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BeamUncertainty.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BeamUncertainty.Beam">
            <summary>
            The beam to which this uncertainty is linked.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BeamUncertainty.BeamNumber">
            <summary>
            Beam number of the related beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BeamUncertainty.Dose">
            <summary>
            Dose of this beam uncertainty.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.BrachyFieldReferencePoint">
            <summary>
            This object links a Brachy field to a reference point.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BrachyFieldReferencePoint.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyFieldReferencePoint.FieldDose">
            <summary>
            The field dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyFieldReferencePoint.IsFieldDoseNominal">
            <summary>
            Checks if the field dose is nominal (the real calculated field dose is not known).
            If the field doses at a reference point are nominal, they alone cannot be used to verify MU calculation.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyFieldReferencePoint.IsPrimaryReferencePoint">
            <summary>
            Checks if the reference point is primary.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyFieldReferencePoint.ReferencePoint">
            <summary>
            Used for navigating to an underlying reference point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyFieldReferencePoint.RefPointLocation">
            <summary>
            The location of the reference point.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.BrachyPlanSetup">
            <summary>
            Represents a brachytherapy treatment plan.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.PlanSetup">
            <summary>
            Represents a treatment plan. See the definition of a DICOM RT Plan for more information.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.PlanningItem">
            <summary>
            Common properties of a treatment plan and a plan sum.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanningItem.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanningItem.GetDVHCumulativeData(VMS.TPS.Common.Model.API.Structure,VMS.TPS.Common.Model.Types.DoseValuePresentation,VMS.TPS.Common.Model.Types.VolumePresentation,System.Double)">
            <summary>
            Returns cumulative Dose Volume Histogram (DVH) data.
            </summary>
            <param name="structure">Structure for which the DVH data is requested.</param>
            <param name="dosePresentation">Requested dose presentation mode (absolute or relative). Note, that only
            absolute dose is supported for PlanSums.</param>
            <param name="volumePresentation">Requested volume presentation mode.</param>
            <param name="binWidth">Requested width of the bin.</param>
            <returns>DVHData object that contains the requested DVH information or null if DVH calculation was not possible.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanningItem.GetDoseAtVolume(VMS.TPS.Common.Model.API.Structure,System.Double,VMS.TPS.Common.Model.Types.VolumePresentation,VMS.TPS.Common.Model.Types.DoseValuePresentation)">
            <summary>
            Gets the dose at a volume.
            </summary>
            <param name="structure">Structure for which the value is requested.</param>
            <param name="volume">Volume at which the dose is requested.</param>
            <param name="volumePresentation">Presentation mode of the volume parameter.</param>
            <param name="requestedDosePresentation">Requested dose presentation mode (absolute or relative).</param>
            <returns>The dose value at the given structure volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanningItem.GetVolumeAtDose(VMS.TPS.Common.Model.API.Structure,VMS.TPS.Common.Model.Types.DoseValue,VMS.TPS.Common.Model.Types.VolumePresentation)">
            <summary>
            Gets the volume at the dose.
            </summary>
            <param name="structure">Structure for which the value is requested.</param>
            <param name="dose">Dose at which the volume is requested.</param>
            <param name="requestedVolumePresentation">Requested volume presentation mode.</param>
            <returns>The volume at the given dose.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanningItem.CreationDateTime">
            <summary>
            The date when this object was created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanningItem.Dose">
            <summary>
            The total dose. The total dose is the dose of all planned fractions together.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanningItem.DoseValuePresentation">
            <summary>
            The presentation of the dose as absolute or relative.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanningItem.StructureSet">
            <summary>
            The structure set.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanningItem.StructuresSelectedForDvh">
            <summary>
            The collection of the structures that have been selected for DVH evaluation in Eclipse.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.GetProtocolPrescriptionsAndMeasures(System.Collections.Generic.List{VMS.TPS.Common.Model.API.ProtocolPhasePrescription}@,System.Collections.Generic.List{VMS.TPS.Common.Model.API.ProtocolPhaseMeasure}@)">
            <summary>
            Gets the prescriptions and measures in the protocol that is associated with this plan setup.
            </summary>
            <param name="prescriptions">Returned list of prescriptions (plan objectives).</param>
            <param name="measures">Returned list of plan measures (quality indices).</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.AddReferencePoint(VMS.TPS.Common.Model.API.Structure,System.Nullable{VMS.TPS.Common.Model.Types.VVector},System.String,System.String)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds a new reference point.
            </summary>
            <param name="structure">Structure that links to the patient volume to be associated with the created reference point.</param>
            <param name="location">Reference point location in mm.</param>
            <param name="id">Reference point ID.</param>
            <param name="name">Reference point name.</param>
            <returns>Newly created reference point.</returns>
        </member>
        <member name="F:VMS.TPS.Common.Model.API.PlanSetup.m_errorsOnCalculationCompleted">
            <summary>
            Flag that indicates whether there are errors upon calculation completion.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.AttachToCalcClient(VMS.TPS.Common.Calculation.ICalculationClient)">
            <summary>
            Attaches event handling.
            </summary>
            <param name="doseCalcClient"></param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.DetachFromCalcClient(VMS.TPS.Common.Calculation.ICalculationClient)">
            <summary>
            Detaches event handling for the calculation client.
            </summary>
            <param name="doseCalcClient"></param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.Report(System.String)">
            <summary>
            Reporting.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.ClearCalculationModel(VMS.TPS.Common.Model.Types.CalculationType)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Clears the calculation model for the given calculation type.
            </summary>
            <param name="calculationType">The type of calculation.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.GetCalculationModel(VMS.TPS.Common.Model.Types.CalculationType)">
            <summary>
            Returns the selected calculation model for the given calculation type.
            Returns null if no model has been selected.
            </summary>
            <param name="calculationType">The type of calculation.</param>
            <returns>Returns the selected calculation model for the given calculation type. Returns null if no model has been selected.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.GetCalculationOption(System.String,System.String,System.String@)">
            <summary>
            Gets the given calculation option value.
            </summary>
            <param name="calculationModel">The name of the calculation model.</param>
            <param name="optionName">The XPath or name of the option to set.</param>
            <param name="optionValue">The value of the given option.</param>
            <returns>Returns false if the method cannot find the given option.</returns>
            <remarks>Available options are stored in the schema files of the calculation model located on the Distributed Calculation Framework (DCF) server.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.GetCalculationOptions(System.String)">
            <summary>
            Gets all the calculation options and their values for the given calculation model.
            </summary>
            <param name="calculationModel">The name of the calculation model.</param>
            <returns>A list of key-value pairs where the key is the XPath of the option and the value is the option value.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationModel(VMS.TPS.Common.Model.Types.CalculationType,System.String)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Sets the calculation model for the given calculation type.
            </summary>
            <param name="calculationType">The type of calculation.</param>
            <param name="model">The name of the calculation model.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationOption(System.String,System.String,System.String)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Sets the given calculation option to the given value.
            Before setting the options for the model, set the calculation model.
            See <see cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationModel(VMS.TPS.Common.Model.Types.CalculationType,System.String)">SetCalculationModel</see>.
            </summary>
            <param name="calculationModel">The name of the calculation model.</param>
            <param name="optionName">The XPath or name of the option to set. If this is not an XPath,
            the method sets the first attribute that matches the name.
            Example 1:
            CalculationGridSizeInCM in the Anisotropic Analytical Algorithm (AAA) sets the option /AAACalculationOptions/@CalculationGridSizeInCM.
            Example 2:
            MaximalDrillDepthInCM in the Proton Convolution Superposition (PCS) algorithm sets the option /ProtonCalculationOptions/ScatteringUniformScanning/CompensatorConversion/Drilling1/@MaximalDrillDepthInCM.
            To set the values, for example, for the Drilling2 settings, you have to specify the entire XPath /ProtonCalculationOptions/ScatteringUniformScanning/CompensatorConversion/Drilling2/@MaximalDrillDepthInCM.
            </param>
            <param name="optionValue">The value to set.</param>
            <returns>Returns false if the method cannot find the given option.</returns>
            <remarks>Available options are stored in the schema files of the calculation model located on the Distributed Calculation Framework (DCF) server.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.SetPrescription(System.Int32,VMS.TPS.Common.Model.Types.DoseValue,System.Double)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Sets and validates the number of fractions and dose per fraction.
            </summary>
            <param name="numberOfFractions">The number of fractions.</param>
            <param name="dosePerFraction">The dose per fraction.</param>
            <param name="treatmentPercentage">
            The treatment percentage as a decimal number.
            For example, if the treatment percentage shown in the user interface is 80%, use 0.8.
            </param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.Id">
            <summary>
            [Availability of this property depends on your Eclipse Scripting API license] The identifier of the PlanSetup.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlanNormalizationValue">
            <summary>
            [Availability of this property depends on your Eclipse Scripting API license] The plan normalization value in percentage. The plan is normalized according to the plan 
            normalization value, for instance, 200%.
            The value is Double.NaN if it is not defined.
            <remarks>The property setter changes also the plan normalization method to Plan Normalization Value.</remarks>
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlanUncertainties">
            <summary>
            Plan uncertainties defined for the plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlanObjectiveStructures">
            <summary>
            The list of structure IDs that are present in the plan objectives (prescriptions and indices).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.ApprovalHistory">
            <summary>
            Returns the approval history of the plan setup.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.DosePerFractionInPrimaryRefPoint">
            <summary>
            The calculated fraction dose in the primary reference point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PrescribedDosePerFraction">
            <summary>
            The prescribed fraction dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PrescribedPercentage">
            <summary>
            The prescribed dose percentage as a decimal number. For example, if the prescribed dose percentage shown in the Eclipse user interface is 80 %, returns 0.8
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.TotalPrescribedDose">
            <summary>
            The total prescribed dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.ApplicationScriptLogs">
            <summary>
            The log entries of the script executions that have modified the plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.ApprovalStatus">
            <summary>
            The approval status.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.Beams">
            <summary>
            A collection of all the beams in the plan (including setup beams).
            Returns an empty collection if not applicable for the plan, for example, if the plan is a brachytherapy plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.Course">
            <summary>
            Used for navigating to parent course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.CreationUserName">
            <summary>
            The name of the user who saved the plan for the first time.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.DosePerFraction">
            <summary>
            The dose per fraction.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.DVHEstimates">
            <summary>
            Returns a list of DVH estimate objects for this plan
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.ElectronCalculationModel">
            <summary>
            The name of the electron calculation model. Not applicable to brachytherapy plans.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.ElectronCalculationOptions">
            <summary>
            The electron calculation options. Not applicable to brachytherapy plans.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.IsDoseValid">
            <summary>
            Returns the value true if the plan dose is valid. This implies that the dose object returned
            from the dose property is not null and can therefore be used to query dose values.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.IsTreated">
            <summary>
            Checks if the treatment plan has been delivered.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.NumberOfFractions">
            <summary>
            The number of fractions.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.OptimizationSetup">
            <summary>
            Provides access to optimization objectives and parameters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PhotonCalculationModel">
            <summary>
            The name of the photon calculation model. Not applicable to brachytherapy plans.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PhotonCalculationOptions">
            <summary>
            The photon calculation options. Not applicable to brachytherapy plans.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlanIntent">
            <summary>
            The plan intent as in DICOM, or an empty string.
            The defined terms are "CURATIVE", "PALLIATIVE", "PROPHYLACTIC", "VERIFICATION", "MACHINE_QA", "RESEARCH" and "SERVICE",
            but the value can be different for imported plans.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlannedDosePerFraction">
            <summary>
            The calculated fraction dose in the primary reference point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlanningApprovalDate">
            <summary>
            The date when the plan was approved for planning.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlanningApprover">
            <summary>
            The identifier of the user who approved the plan for planning.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlanningApproverDisplayName">
            <summary>
            The display name of the user who approved the plan for planning.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlanNormalizationMethod">
            <summary>
            The user interface name for the current normalization method.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlanNormalizationPoint">
            <summary>
            The plan normalization point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlanType">
            <summary>
            The plan type.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PredecessorPlan">
            <summary>
            The prior revision of the plan
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PrimaryReferencePoint">
            <summary>
            The primary reference point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.ProtocolID">
            <summary>
            The protocol identifier.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.ProtocolPhaseID">
            <summary>
            The protocol phase identifier.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.ProtonCalculationModel">
            <summary>
            The name of the proton calculation model. Not applicable to brachytherapy plans.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.ProtonCalculationOptions">
            <summary>
            The proton calculation options. Not applicable to brachytherapy plans.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.ReferencePoints">
            <summary>
            Collection of reference points in the plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.RTPrescription">
            <summary>
            Used for navigating to the linked prescription.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.Series">
            <summary>
            The series that contains this plan. Null if the plan is not connected to a series.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.SeriesUID">
            <summary>
            The DICOM UID of the series that contains this plan. Empty string if the plan is not connected to a series.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.TargetVolumeID">
            <summary>
            The target volume identifier.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.TotalDose">
            <summary>
            Planned total dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.TreatmentApprovalDate">
            <summary>
            The date when the plan was approved for treatment.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.TreatmentApprover">
            <summary>
            The identifier of the user who approved the plan for treatment.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.TreatmentApproverDisplayName">
            <summary>
            The display name of the user who approved the plan for treatment.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.TreatmentOrientation">
            <summary>
            The orientation of the treatment.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.TreatmentPercentage">
            <summary>
            The treatment percentage as a decimal number. For example, if the treatment percentage shown in the Eclipse user interface is 80%, returns 0.8.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.TreatmentSessions">
            <summary>
            Treatment sessions for the plan, either scheduled sessions or treated sessions.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.UID">
            <summary>
            The DICOM UID of the plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.UseGating">
            <summary>
            Boolean to mark if gating is used in the plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.VerifiedPlan">
            <summary>
            Returns the verified plan if this is a verification plan, otherwise returns null.
            The verified plan is the clinical plan that was used to create the verification plan.
            </summary>
            <remarks>Always returns null if the plan has multiple fractionations.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BrachyPlanSetup.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BrachyPlanSetup.CalculateAccurateTG43DoseProfile(VMS.TPS.Common.Model.Types.VVector,VMS.TPS.Common.Model.Types.VVector,System.Double[])">
            <summary>
            Calculates and returns the dose profile. Profile is calculated on the fly with TG-43 formalism.
            </summary>
            <param name="start">Location of the first point of the profile.</param>
            <param name="stop">Location of the last point of the profile.</param>
            <param name="preallocatedBuffer">Preallocated buffer where the values are stored. The size of
            the buffer determines the number of values to return.</param>
            <returns>Dose profile that holds the dose values along the line segment defined by the start and stop parameters.
            Values are NaN if the plan has imported dose or the dose has been calculated with the AcurosBV algorithm.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyPlanSetup.ApplicationSetupType">
            <summary>
            The application setup type of this brachytherapy plan. Possible types are: "FLETCHER_SUIT", "DELCLOS",
            "BLOEDORN", "JOSLIN_FLYNN", "CHANDIGARH", "MANCHESTER", "HENSCHKE", "NASOPHARYNGEAL", "OESOPHAGEAL",
            "ENDOBRONCHIAL", "SYED_NEBLETT", "ENDORECTAL", "PERINEAL",  "HAM_FLAB", "EYE_PLAQUE", and "OTHER".
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyPlanSetup.Catheters">
            <summary>
            The catheters or applicator channel centerlines of this brachytherapy plan, including any catheters associated with <see cref="T:VMS.TPS.Common.Model.API.BrachySolidApplicator">solid applicators</see>.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyPlanSetup.NumberOfPdrPulses">
            <summary>
            The number of pulses in a brachytherapy Pulse Dose Rate (PDR) treatment. Null if the plan is not for a PDR treatment.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyPlanSetup.PdrPulseInterval">
            <summary>
            The pulse interval in a brachytherapy Pulse Dose Rate (PDR) treatment in seconds. Null if the plan is not for a PDR treatment.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyPlanSetup.SeedCollections">
            <summary>
            The seed collections of this brachytherapy plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyPlanSetup.SolidApplicators">
            <summary>
            The solid applicator parts of this brachytherapy plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyPlanSetup.TreatmentDateTime">
            <summary>
            The treatment date of this brachytherapy plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyPlanSetup.TreatmentTechnique">
            <summary>
            The treatment technique of this brachytherapy plan. Possible techniques are "INTRALUMENARY", "INTRACAVITARY",
            "INTERSTITIAL", "CONTACT", "INTRAVASCULAR", and "PERMANENT".
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.BrachySolidApplicator">
            <summary>
            Represents a brachytherapy solid applicator part, such as a tandem or ovoid in a Fletcher Suit Delclos (FSD) applicator set.
            This class holds only the metadata related to the solid applicator part, and links
            to the <see cref="T:VMS.TPS.Common.Model.API.Catheter">catheters</see> that are part of the solid applicator.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BrachySolidApplicator.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.ApplicatorSetName">
            <summary>
            The name of the solid applicator set to which this part belongs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.ApplicatorSetType">
            <summary>
            The type of the solid applicator set to which this part belongs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.Category">
            <summary>
            The category of the solid applicator set to which this part belongs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.Catheters">
            <summary>
            The channel(s) of this solid applicator part.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.Note">
            <summary>
            A note or short description of the solid applicator part.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.PartName">
            <summary>
            The name of the solid applicator part.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.PartNumber">
            <summary>
            The part number of the solid applicator.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.Summary">
            <summary>
            A summary of the solid applicator set to which this part belongs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.UID">
            <summary>
            The unique identifier of the solid applicator part.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.Vendor">
            <summary>
            The vendor of the solid applicator set to which this part belongs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.Version">
            <summary>
            The version of the solid applicator part.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.BrachyTreatmentUnit">
            <summary>
            Represents a brachytherapy afterloader.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.GetActiveRadioactiveSource">
            <summary>
            Returns the active radioactive source of this treatment unit.
            </summary>
            <returns>A RadioactiveSource object if the treatment unit has a source installed. Otherwise null.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.DoseRateMode">
            <summary>
            The dose rate mode of this treatment unit. Supported modes are "HDR", "PDR", "MDR", and "LDR".
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.DwellTimeResolution">
            <summary>
            The dwell time resolution supported by this treatment unit in seconds.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MachineInterface">
            <summary>
            The interface type for communicating with this brachytherapy treatment unit. Possible types are "GammaMed12i", "GammaMedPlus", "VariSource", "Other", and "Omnitron" (obsolete type).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MachineModel">
            <summary>
            The model identifier for this treatment unit. Possible models are "VariSource_5", "VariSource_10",
            "Remote_Afterloading", "Manual_Loading", "GammaMed12i", and "GammaMedPlus".
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MaxDwellTimePerChannel">
            <summary>
            The maximum combined dwell time in a single channel in seconds.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MaxDwellTimePerPos">
            <summary>
            The maximum dwell time in a single dwell position in seconds.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MaxDwellTimePerTreatment">
            <summary>
            The maximum combined dwell time in all the channels during a single treatment session. The value is in seconds.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MaximumChannelLength">
            <summary>
            The maximum channel length supported by this treatment unit in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MaximumDwellPositionsPerChannel">
            <summary>
            The maximum number of dwell positions per channel supported by this treatment unit.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MaximumStepSize">
            <summary>
            The maximum distance between adjacent source positions in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MinimumChannelLength">
            <summary>
            The minimum channel length supported by this treatment unit in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MinimumStepSize">
            <summary>
            The minimum distance between adjacent source positions in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.NumberOfChannels">
            <summary>
            The number of channels in this treatment unit.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.SourceCenterOffsetFromTip">
            <summary>
            The offset distance (in millimeters) from the tip of the applicator to the center of the source at its first possible dwell position.
            In other words, the offset accounts for half of the active source length and encapsulation.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.SourceMovementType">
            <summary>
            The source movement type as defined in DICOM. Possible types are "STEPWISE", "FIXED", and "OSCILLATING".
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.StepSizeResolution">
            <summary>
            The default step size resolution for this treatment unit in millimeters.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Catheter">
            <summary>
            Represents a brachytherapy catheter or an applicator channel centerline. Catheters are associated with a <see cref="T:VMS.TPS.Common.Model.API.BrachyTreatmentUnit">brachytherapy treatment unit</see>,
            a <see cref="P:VMS.TPS.Common.Model.API.Catheter.ChannelNumber"> channel number</see>, and possibly a <see cref="P:VMS.TPS.Common.Model.API.Catheter.BrachySolidApplicatorPartID">unique identifier</see>
            of the <see cref="T:VMS.TPS.Common.Model.API.BrachySolidApplicator">solid applicator part</see> they belong to. Most notably, catheters encapsulate the <see cref="P:VMS.TPS.Common.Model.API.Catheter.Shape">shape</see>
            of the applicator channel centerline and its <see cref="P:VMS.TPS.Common.Model.API.Catheter.SourcePositions">source positions</see>.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Catheter.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Catheter.GetSourcePosCenterDistanceFromTip(VMS.TPS.Common.Model.API.SourcePosition)">
            <summary>
            The distance (in millimeters) from the tip of the catheter (in the first possible source position) to the center of the source position.
            This is an offset from the actual catheter inner lumen tip by half of the source length and encapsulation.
            </summary>
            <param name="sourcePosition">The source position for which the distance from the catheter tip is got.</param>
            <returns>The distance from the tip of the catheter to the source position center, in millimeters.</returns>
            <seealso cref="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.SourceCenterOffsetFromTip" />
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Catheter.GetTotalDwellTime">
            <summary>
            The total dwell time in this catheter in seconds.
            </summary>
            <returns>The total dwell time in this catheter in seconds.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.ApplicatorLength">
            <summary>
            The total length from the tip of the catheter to the treatment unit in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.BrachyFieldReferencePoints">
            <summary>
            A collection of brachy field reference points.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.BrachySolidApplicatorPartID">
            <summary>
            The unique identifier of the <see cref="T:VMS.TPS.Common.Model.API.BrachySolidApplicator">brachytherapy solid applicator</see> part associated with the channel.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.ChannelNumber">
            <summary>
            The channel number of this catheter.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.Color">
            <summary>
            The color of the catheter in 2D views.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.DeadSpaceLength">
            <summary>
            The total length from the tip of the catheter to the start of the inner lumen in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.Shape">
            <summary>
            The DICOM coordinates of the applicator shape starting from the tip.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.SourcePositions">
            <summary>
            The source positions in the catheter starting from the tip.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.StepSize">
            <summary>
            The step size of the catheter in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.TreatmentUnit">
            <summary>
            The brachytherapy treatment unit associated with this catheter.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ControlPointParameters">
            <summary>
            An editable copy of the parameters of a control point.
            </summary>
            <remarks>
            To apply the parameters, call the ApplyParameters method of the
            Beam class. Because the parameters are simple copies, they do not
            reflect the current state of the data model.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.CollimatorAngle">
            <summary>
            A copy of the collimator angle at this control point, in degrees, in the range [0, 360[.
            It is defined as the orientation of the IEC BEAM LIMITING DEVICE coordinate system with
            respect to the IEC GANTRY coordinate system (in degrees).
            </summary>
            <remarks>This property cannot be edited directly. Consider if removing and creating a
            new Beam works for your use case.</remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.GantryAngle">
            <summary>
            A copy of the gantry angle at this control point, in degrees, in the range [0, 360[. It is
            defined as the orientation of the IEC GANTRY coordinate system with respect to the IEC FIXED
            REFERENCE coordinate system (in degrees).
            </summary>
            <remarks>This property cannot be edited directly. Consider if removing and creating a
            new Beam works for your use case.</remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.Index">
            <summary>
            Control point index starting with zero. Even numbers represent start control points, and odd numbers represent stop control points.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.JawPositions">
            <summary>
            A copy of the jaw positions of the treatment beams at this control point in millimeters, and
            in IEC BEAM LIMITING DEVICE coordinates.
            </summary>
            <remarks>To set the same leaf positions for all control points (as is required if you
            use a static beam), use the
            <see cref="M:VMS.TPS.Common.Model.API.BeamParameters.SetJawPositions(VMS.TPS.Common.Model.Types.VRect{System.Double})">SetJawPositions</see>
            method in BeamParameters.</remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.LeafPositions">
            <summary>
            A copy of the positions of the MLC leaf pairs (in millimeters) in the IEC BEAMLIMITING
            DEVICE coordinate axis appropriate to the MLC device type: the X-axis
            for MLCX and the Y-axis for MLCY. The two-dimensional array is
            indexed [bank, leaf], where the bank is either 0 or 1. Bank 0 represents
            the leaf bank to the negative MLC X direction, and bank 1 to the
            positive MLC X direction. If no MLC exists, a (0,0)-length array is
            returned.
            </summary>
            <remarks>To set the same leaf positions for all control points (as is required if you
            use a static MLC), use the
            <see cref="M:VMS.TPS.Common.Model.API.BeamParameters.SetAllLeafPositions(System.Single[0:,0:])">SetAllLeafPositions</see>
            method in BeamParameters.</remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.MetersetWeight">
            <summary>
            A copy of the cumulative meterset weight to this control point.
            </summary>
            <remarks>This property cannot be edited directly. Consider if removing and creating a
            new Beam works for your use case.</remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.PatientSupportAngle">
            <summary>
            A copy of the patient support angle at this control point, in degrees, in the range [0, 360[.
            It is defined as the orientation of the IEC PATIENT SUPPORT (turntable) coordinate system
            with respect to the IEC FIXED REFERENCE coordinate system (in degrees).</summary>
            <remarks>This property cannot be edited directly. Consider if removing and creating a
            new Beam works for your use case.</remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.TableTopLateralPosition">
            <summary>
            Table top lateral position in millimeters, in the IEC TABLE TOP coordinate system.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.TableTopLongitudinalPosition">
            <summary>
            Table top longitudinal position in millimeters, in the IEC TABLE TOP coordinate system.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.TableTopVerticalPosition">
            <summary>
            Table top vertical position in millimeters, in the IEC TABLE TOP coordinate system.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.AsyncPump">
            <summary>Provides a pump that supports running asynchronous methods on the current thread.</summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.AsyncPump.RunAsyncOnCurrentThread``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Helper for executing an async (Task-returning) function on a single thread. 
            This can be used in cases where calling Wait() or Result on the Task would 
            cause a deadlock, i.e., when the async part of the Task-returning function 
            cannot be executed purely on a background thread.
            
            Exceptions thrown by the async function are re-thrown. If the exception is 
            an <see cref="T:System.AggregateException"/> containing a single InnerException, that
            InnerException is thrown instead of the <see cref="T:System.AggregateException"/>.
            </summary>
            <param name="asynchronousFunction">The async function to be executed</param>
            <returns>Return value of the async function</returns>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContext">
            <summary>Provides a SynchronizationContext object that is single-threaded.</summary>
        </member>
        <member name="F:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContext.m_queue">
            <summary>The queue of work items.</summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>Dispatches an asynchronous message to the synchronization context.</summary>
            <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>Not supported.</summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContext.RunOnCurrentThread">
            <summary>Runs an loop to process all queued work items.</summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContext.Complete">
            <summary>Notifies the context that no more work will arrive.</summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContextSetter">
            <summary>
            Provides a temporary single-threaded environment until the diposal of this object (<see cref="M:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContextSetter.Dispose"/>), using <see cref="T:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContext"/>.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContextSetter.#ctor">
            <summary>
            Sets SynchronizationContext to a <see cref="T:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContext"/> until the diposal of this object (<see cref="M:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContextSetter.Dispose"/>).
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContextSetter.Dispose">
            <summary>
            Resets the SynchronizationContext.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContextSetter.Complete">
            <summary>
            <see cref="M:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContext.Complete"/>
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContextSetter.Run">
            <summary>
            <see cref="M:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContext.RunOnCurrentThread"/>
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Beam">
            <summary>
            Represents one beam (also referred to as "field") of an external beam treatment plan. See the definition of DICOM RT Beam for more details.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.ApplyParameters(VMS.TPS.Common.Model.API.BeamParameters)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Modifies the beam by applying the given parameters. This is the only
            way to modify a beam using the Eclipse Scripting API. After a call to
            ApplyParameters, the getters of this beam instance will return the new values.
            An ApplicationException is thrown if the parameters form an invalid combination.
            </summary>
            <param name="beamParams">The parameters to apply to the beam.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.CanSetOptimalFluence(VMS.TPS.Common.Model.Types.Fluence,System.String@)">
            <summary>
            Checks if optimal fluence can be set for this beam.
            </summary>
            <param name="fluence">The optimal fluence for the beam.</param>
            <param name="message">If the optimal fluence cannot be set, contains information about the reason.</param>
            <returns>Return true if optimal fluence can be set for this beam. Otherwise false.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.CollimatorAngleToUser(System.Double)">
            <summary>
            Converts the given collimator angle value from the internal IEC scale to the user facing
            scale of the machine.
            </summary>
            <param name="val">Collimator angle value</param>
            <returns>The value in the user facing scale of the machine</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.CreateOrReplaceDRR(VMS.TPS.Common.Model.Types.DRRCalculationParameters)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Calculates the DRR.
            </summary>
            <param name="parameters">DRR calculation parameters</param>
            <returns>DRR image</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.FitCollimatorToStructure(VMS.TPS.Common.Model.Types.FitToStructureMargins,VMS.TPS.Common.Model.API.Structure,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Fits the collimator to the specified structure
            </summary>
            <param name="margins">Margins used to fit to structure</param>
            <param name="structure">Structure to fit to</param>
            <param name="useAsymmetricXJaws">Flag of using asymmetric x jaws</param>
            <param name="useAsymmetricYJaws">Flag of uisng asymmetric y jaws</param>
            <param name="optimizeCollimatorRotation">Flag of optimizing collimator angles as fitting result</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.FitMLCToOutline(System.Windows.Point[][])">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Fits the MLC leaves to a shape on the isocenter plane with default settings, or with settings from previous fit.
            </summary>
            <param name="outline">The shape to fit the MLC leaves to, for example, Block.Outline.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.FitMLCToOutline(System.Windows.Point[][],System.Boolean,VMS.TPS.Common.Model.Types.JawFitting,VMS.TPS.Common.Model.Types.OpenLeavesMeetingPoint,VMS.TPS.Common.Model.Types.ClosedLeavesMeetingPoint)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Fits the MLC leaves to a shape on the isocenter plane with specified options.
            </summary>
            <param name="outline">The shape to fit the MLC leaves to, for example, Block.Outline.</param>
            <param name="optimizeCollimatorRotation">Specifies if the MLC rotation is optimized.</param>
            <param name="jawFit">Controls whether the collimator jaws are positioned to match the MLC outline and how it is done.</param>
            <param name="olmp">Specifies the meeting point for MLC leaves and the structure outline (Inside/Middle/Outside).</param>
            <param name="clmp">Specifies the placement of closed leaf pairs (Bank One/Center/Bank Two).</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.FitMLCToStructure(VMS.TPS.Common.Model.API.Structure)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Fits the MLC leaves in the beam to a structure with the default settings, or with settings from the previous fit. The margin is zero.
            </summary>
            <param name="structure">The structure to fit the MLC leaves to.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.FitMLCToStructure(VMS.TPS.Common.Model.Types.FitToStructureMargins,VMS.TPS.Common.Model.API.Structure,System.Boolean,VMS.TPS.Common.Model.Types.JawFitting,VMS.TPS.Common.Model.Types.OpenLeavesMeetingPoint,VMS.TPS.Common.Model.Types.ClosedLeavesMeetingPoint)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Fits the MLC leaves to a structure projection on the isocenter plane with the specified margin.
            </summary>
            <param name="margins">Specifies the margin in all directions.</param>
            <param name="structure">The structure to fit the MLC leaves to.</param>
            <param name="optimizeCollimatorRotation">Specify if the MLC rotation is optimized.</param>
            <param name="jawFit">Controls whether and how the collimator jaws are positioned to match the MLC outline.</param>
            <param name="olmp">Specifies the meeting point for MLC leaves and the structure outline (Inside/Middle/Outside).</param>
            <param name="clmp">Specifies the placement of closed leaf pairs (Bank One/Center/Bank Two).</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.GantryAngleToUser(System.Double)">
            <summary>
            Converts the given gantry rotation value from the internal IEC scale to the user facing
            scale of the machine.
            </summary>
            <param name="val">Gantry rotation value</param>
            <returns>The value in the user facing scale of the machine</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.GetEditableParameters">
            <summary>
            Returns an editable copy of the beam parameters.
            The returned BeamParameters object is not updated if the beam parameters in the data model are changed,
            for example, by using another BeamParameters object.
            </summary>
            <returns>Returns a new parameters object. Its values are copied from the
            corresponding properties of this object.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.GetOptimalFluence">
            <summary>
            Gets the optimal fluence for this beam. Returns null if optimal fluence does not exist.
            </summary>
            <returns>Returns the optimized fluence, if it exists. Otherwise null.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.GetSourceLocation(System.Double)">
            <summary>
            Returns the location of the radiation source at a given gantry angle
            of the beam.
            </summary>
            <param name="gantryAngle">Gantry angle</param>
            <returns>Source location</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.GetStructureOutlines(VMS.TPS.Common.Model.API.Structure,System.Boolean)">
            <summary>
            If the structure has a segment, gets the outline of the structure on the isocenter plane of the beam.
            </summary>
            <param name="structure">The structure to be projected to the isocenter plane.</param>
            <param name="inBEV">If true, outlines are returned in the Beams Eye View (BEV) coordinates, where the collimator angle is 0.0 degrees. If false, outlines are returned in beam coordinates. Suitable for use with FitMLCToOutline(...).</param>
            <returns>Outlines as points.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.JawPositionsToUserString(VMS.TPS.Common.Model.Types.VRect{System.Double})">
            <summary>
            Converts the given jaw positions from the internal IEC scale to a string in the user facing
            scale of the machine.
            </summary>
            <param name="val">Jaw postitions</param>
            <returns>The value in the user facing scale of the machine</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.PatientSupportAngleToUser(System.Double)">
            <summary>
            Converts the given patient support angle value from the internal IEC scale to the user facing
            scale of the machine.
            </summary>
            <param name="val">Patient support angle value</param>
            <returns>The value in the user facing scale of the machine</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.SetOptimalFluence(VMS.TPS.Common.Model.Types.Fluence)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Sets the optimal fluence for this beam.
            If the fluence is empty (the fluence is null or the dimensions of the fluence matrix are zero) an ArgumentException will be thrown.
            </summary>
            <param name="fluence">The optimal fluence to be set.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Id">
            <summary>
            [Availability of this property depends on your Eclipse Scripting API license] The identifier of the Beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Meterset">
            <summary>
            The meterset value of the beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.BeamNumber">
            <summary>
            DICOM RT Beam Number. The value is unique within the plan in which it is created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Applicator">
            <summary>
            An applicator is a specific add-on used in the beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.ArcLength">
            <summary>
            The arc length.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.AverageSSD">
            <summary>
            The average Source-to-Skin Distance (SSD) of an arc beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Blocks">
            <summary>
            A collection of installed blocks.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Boluses">
            <summary>
            A collection of beam boluses.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs">
            <summary>
            A collection of beam calculation logs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Compensator">
            <summary>
            The compensator.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.ControlPoints">
            <summary>
            An enumerable sequence of machine parameters that
            describe the planned treatment beam.
            </summary>
            <remarks>
            A motorized wedge is described with four control points.
            If Elekta OmniWedge is used, the first three control points
            are used to describe the motorized wedge. Note, that for proton
            beams the control points are not currently supported and an empty
            collection is returned.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.CreationDateTime">
            <summary>
            The date when this object was created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Dose">
            <summary>
            The dose for the beam. Returns null if the dose is not calculated.
            </summary>
            <remarks>
            The dose will always be shown relative units. It does not have, for instance, the field weight factored in.
            Use <see cref="M:VMS.TPS.Common.Model.API.BeamDose.GetAbsoluteBeamDoseValue(VMS.TPS.Common.Model.Types.DoseValue)">BeamDose.GetAbsoluteBeamDose(DoseValue)</see> to get dose in absolute units.
            </remarks>
            <returns>Returns the beam dose, if it exists. Otherwise null.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.DoseRate">
            <summary>
            The dose rate of the treatment machine in MU/min.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.DosimetricLeafGap">
            <summary>
            The dosimetric leaf gap that has been configured for the Dynamic Multileaf Collimator (DMLC) beams in the system. The dosimetric leaf gap is
            used for accounting for dose transmission through rounded MLC leaves.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.EnergyModeDisplayName">
            <summary>
            The display name of the energy mode. For example '18E' or '6X-SRS'.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.FieldReferencePoints">
            <summary>
            A collection of field reference points.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.GantryDirection">
            <summary>
            The gantry rotation direction: clockwise (CW), counterclockwise (CCW), or none.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.IsocenterPosition">
            <summary>
            The position of the isocenter.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.IsSetupField">
            <summary>
            Checks if a beam is a setup field.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.MetersetPerGy">
            <summary>
            The calculated meterset/Gy value for the beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.MLC">
            <summary>
            Returns a hardware description of the Multileaf Collimator (MLC) used in an MLC plan, or
            null if no MLC exists.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.MLCPlanType">
            <summary>
            The type of the Multileaf Collimator (MLC) plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.MLCTransmissionFactor">
            <summary>
            The transmission factor of the Multileaf Collimator (MLC) material.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.MotionCompensationTechnique">
            <summary>
            DICOM (respiratory) motion compensation technique. Returns an empty string if motion compensation technique is not used.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.MotionSignalSource">
            <summary>
            DICOM (respiratory) signal source. Returns an empty string if motion compensation technique is not used.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.NormalizationFactor">
            <summary>
            The beam normalization factor.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.NormalizationMethod">
            <summary>
            The beam normalization method.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Plan">
            <summary>
            Used for navigating to parent Plan
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.PlannedSSD">
            <summary>
            The Source-to-Skin Distance (SSD) value defined by the user.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.ReferenceImage">
            <summary>
            The reference image of the beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.SetupTechnique">
            <summary>
            The setup technique.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.SSD">
            <summary>
            The Source-to-Skin Distance (SSD). For arc beams, the SSD at the start angle.
            This value is calculated from the geometrical setup of the beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.SSDAtStopAngle">
            <summary>
            The Source-to-Skin Distance (SSD) at the stop angle of an arc beam.
            This value is calculated from the geometrical setup of the beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Technique">
            <summary>
            The technique used in the planning beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.ToleranceTableLabel">
            <summary>
            User-defined label for the referenced tolerance table, or an empty string if there is no reference to a tolerance table.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Trays">
            <summary>
            A collection of installed trays.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.TreatmentTime">
            <summary>
            The treatment time set for the beam in seconds. Plan Approval wizard sets this value by default.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.TreatmentUnit">
            <summary>
            The external beam treatment unit associated with this beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Wedges">
            <summary>
            A collection of installed wedges.
            </summary>
            <remarks>
            Use operator <c>is</c> or <c>as</c> to distinguish between various wedge types.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.WeightFactor">
            <summary>
            The weight factor of the beam.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Course">
            <summary>
            A course represents the course of treatment that a patient will be given.
            Every patient must have a course, and all plans always belong to a course.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Course.AddIonPlanSetupAsVerificationPlan(VMS.TPS.Common.Model.API.StructureSet,System.String,VMS.TPS.Common.Model.API.IonPlanSetup)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Attaches a new verification plan to this course and adds the relationship between the proton plan to be verified and the new verification plan. Data is not copied from the verified plan.
            A new primary reference point is always created for the new plan.
            
            </summary>
            <param name="structureSet">A valid structure set.</param>
            <param name="patientSupportDeviceId">Patient support device ID.</param>
            <param name="verifiedPlan">The verified plan.</param>
            <returns>A new verification plan.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Course.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Course.AddExternalPlanSetup(VMS.TPS.Common.Model.API.StructureSet)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Attaches a new plan to this course. A new primary reference point is always created for the new plan.
            </summary>
            <param name="structureSet">A valid structure set.</param>
            <returns>A new plan.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Course.AddExternalPlanSetupAsVerificationPlan(VMS.TPS.Common.Model.API.StructureSet,VMS.TPS.Common.Model.API.ExternalPlanSetup)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Attaches a new verification plan to this course and adds the relationship between the verified plan and a new plan. Data is not copied from the verified plan.
            A new primary reference point is always created for the new plan.
            
            </summary>
            <param name="structureSet">A valid structure set.</param>
            <param name="verifiedPlan">The verified plan.</param>
            <returns>A new verification plan.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Course.AddIonPlanSetup(VMS.TPS.Common.Model.API.StructureSet,System.String)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Attaches a new proton plan to this course.
            </summary>
            <param name="structureSet">A valid structure set.</param>
            <param name="patientSupportDeviceId">Id of the patient support device.</param>
            <returns>The new proton plan.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Course.CanAddPlanSetup(VMS.TPS.Common.Model.API.StructureSet)">
            <summary>
            Checks if a new plan can be added to this course using the given structure set.
            </summary>
            <param name="structureSet">The structure set used by the plan.</param>
            <returns>true if a new plan can be added.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Course.CanRemovePlanSetup(VMS.TPS.Common.Model.API.PlanSetup)">
            <summary>
            Checks if the plan setup can be removed from this course.
            </summary>
            <param name="planSetup">The plan setup to check.</param>
            <returns>true if the plan can be removed.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Course.CopyPlanSetup(VMS.TPS.Common.Model.API.PlanSetup)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Copies plan (the planning image will be the same for both plans).
            </summary>
            <param name="sourcePlan">Plan to copy from</param>
            <returns>New plan</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Course.CopyPlanSetup(VMS.TPS.Common.Model.API.PlanSetup,VMS.TPS.Common.Model.API.StructureSet,System.Text.StringBuilder)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Copies plan from sourcePlan to the target Image associated with the given structure set.
            TargetImage must be registered with primary image of the sourcePlan.
            First copies image and then changes planning image.
            </summary>
            <param name="sourcePlan">Plan to copy from</param>
            <param name="structureset">The structure set along with its associated image that will be assigned to the copied plan</param>
            <param name="outputDiagnostics">Information about copying, this needs to be shown to the user.</param>
            <returns>New plan</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Course.RemovePlanSetup(VMS.TPS.Common.Model.API.PlanSetup)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Removes the plan setup from the database. Use <see cref="M:VMS.TPS.Common.Model.API.Course.CanRemovePlanSetup(VMS.TPS.Common.Model.API.PlanSetup)">CanRemovePlanSetup</see> to check if it is possible to remove the plan. The
            PlanSetup object given as a parameter is not usable anymore after this operation.
            </summary>
            <param name="planSetup">The plan setup that is removed.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.Id">
            <summary>
            [Availability of this property depends on your Eclipse Scripting API license] The identifier of the Course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.ExternalPlanSetups">
            <summary>
            A collection of external beam plans for the course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.BrachyPlanSetups">
            <summary>
            A collection of brachytherapy plans for the course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.IonPlanSetups">
            <summary>
            A collection of proton plans for the course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.CompletedDateTime">
            <summary>
            The date and time when the course was completed.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.Diagnoses">
            <summary>
            The diagnoses that are attached to the course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.Intent">
            <summary>
            The intent of the course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.Patient">
            <summary>
            Patient in which the course is defined.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.PlanSetups">
            <summary>
            A collection of plans for the course. The plans can be of any type (external beam or brachytherapy).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.PlanSums">
            <summary>
            A collection of plan sums for the course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.StartDateTime">
            <summary>
            The date and time when the course was started.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.TreatmentPhases">
            <summary>
            All treatment phases in the course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.TreatmentSessions">
            <summary>
            Treatment sessions of the course.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.CustomScriptExecutable">
            <summary>
            A factory class for creating an application object for a custom script executable.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.CustomScriptExecutable.CreateApplication(System.String)">
            <summary>
            Creates an application object for a custom executable and logs it into the system.
                         
            Application object created by this method can be used when the executable itself is not a script.
            For example, an interpreter of a high level programming language, or a native C++ application that integrates into .NET and uses ESAPI.
                        
            The scripts executed with this application object are always read-only in a clinical environment,
            and writable in a non-clinical environment.
            </summary>
            <param name="scriptName">The script name for logging in. Preferably use the full absolute path.</param>
            <remarks>
            Code that uses ESAPI must run on a single-threaded apartment (STAThread).
            The Dispose method must be called before the program exits.
            Only one application object may be created during the entire run of the program.
            </remarks>
            <returns>Application object that is the root of the data model.</returns>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ESAPIActionPackAttribute">
            <summary>
            Specifies the assembly as an Eclipse visual scripting action pack.
            Action packs are ESAPI scripts that are used by visual scripts.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ESAPIActionPackAttribute.IsWriteable">
            <summary>
            Returns true if the action pack can modify patient data.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ESAPIScriptAttribute">
            <summary>
            Specifies the assembly as an Eclipse Scripting API (ESAPI) script.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ESAPIScriptAttribute.IsWriteable">
            <summary>
            Returns true if the script can modify patient data.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizerDVH">
            <summary>
            Contains a structure-specific Dose Volume Histogram (DVH) curve generated in optimization. 
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizerDVH.CurveData">
            <summary>
            An array of DVH points representing the DVH curve data.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizerDVH.Structure">
            <summary>
            The corresponding structure for the DVH curve data.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizerObjectiveValue">
            <summary>
            The optimizer objective function value for the structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizerObjectiveValue.Structure">
            <summary>
            The corresponding structure for the objective function value.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizerObjectiveValue.Value">
            <summary>
            The objective function value.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ExternalPlanSetup">
            <summary>
            Represents an external beam plan. For more information, see the definition of the DICOM RT Plan.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CalculateDoseWithPresetValues(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,VMS.TPS.Common.Model.Types.MetersetValue}})">
            <summary>
            Calculates the dose for the plan with preset meterset values.
            This applies only to IMRT beams.
            </summary>
            <param name="presetValues">The list of preset meterset values for the beams. An element of the list should contain a pair consisting of the 
            beam identifier (as the key) and the corresponding preset meterset value for the beam. 
            Each beam in the plan must have one entry in the list.</param>
            <returns>The calculation result. See calculation details from <see cref="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs">the calculation logs</see>.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CalculateDose">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Calculates the dose for the plan.
            </summary>
            <returns>The calculation result. See calculation details from <see cref="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs">the calculation logs</see>.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CalculateLeafMotionsAndDose">
            <summary>
            Calculate leaf motions and dose using the calculation models defined in the plan setup.
            </summary>
            <returns>Result of the intermediate dose calculation.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CalculateLeafMotions">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Calculates leaf motions using the calculation options of the plan setup.
            Before calling this method, set the calculation models for leaf motions and dose calculation.
            </summary>
            <returns>The calculation result. See calculation details from <see cref="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs">the calculation logs</see>.</returns>
            <seealso cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationModel(VMS.TPS.Common.Model.Types.CalculationType,System.String)">SetCalculationModel</seealso>
            <seealso cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationOption(System.String,System.String,System.String)">SetCalculationOption</seealso>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CalculateLeafMotions(VMS.TPS.Common.Model.Types.LMCVOptions)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Calculates leaf motions using the given calculation options, which override the calculation options defined for the plan setup.
            Before calling this method, set the calculation models for leaf motions and dose calculation.
            The used leaf motion calculation algorithm must be Varian Leaf Motion Calculator (LMCV).
            </summary>
            <param name="options">Calculation options for the Varian Leaf Motion Calculator (LMCV) algorithm.</param>
            <returns>The calculation result. See calculation details from <see cref="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs">the calculation logs</see>.</returns>
            <seealso cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationModel(VMS.TPS.Common.Model.Types.CalculationType,System.String)">SetCalculationModel</seealso>
            <seealso cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationOption(System.String,System.String,System.String)">SetCalculationOption</seealso>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CalculateLeafMotions(VMS.TPS.Common.Model.Types.SmartLMCOptions)">
            <summary>
            Calculates leaf motions using the given calculation options, which override the calculation options defined for the plan setup.
            Before calling this method, set the calculation models for leaf motions and dose calculation.
            The used leaf motion calculation algorithm must be Varian Smart LMC.
            </summary>
            <param name="options">Calculation options for the Varian Smart LMC algorithm.</param>
            <returns>The calculation result. See calculation details from <see cref="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs">the calculation logs</see>.</returns>
            <seealso cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationModel(VMS.TPS.Common.Model.Types.CalculationType,System.String)">SetCalculationModel</seealso>
            <seealso cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationOption(System.String,System.String,System.String)">SetCalculationOption</seealso>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CalculateLeafMotions(VMS.TPS.Common.Model.Types.LMCMSSOptions)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Calculates leaf motions using the given calculation options, which override the calculation options defined for the plan setup.
            Before calling this method, set the calculation models for leaf motions and dose calculation.
            The used leaf motion calculation algorithm must be MSS Leaf Motion Calculator (LMCMSS).
            </summary>
            <param name="options">Calculation options for the MSS Leaf Motion Calculator (LMCMSS) algorithm.</param>
            <returns>The calculation result. See calculation details from <see cref="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs">the calculation logs</see>.</returns>
            <seealso cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationModel(VMS.TPS.Common.Model.Types.CalculationType,System.String)">SetCalculationModel</seealso>
            <seealso cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationOption(System.String,System.String,System.String)">SetCalculationOption</seealso>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.GetModelsForCalculationType(VMS.TPS.Common.Model.Types.CalculationType)">
            <summary>
            Returns a list of calculation models for the given calculation type.
            </summary>
            <param name="calculationType">The type of calculation.</param>
            <returns>The list of calculation models.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.Optimize(System.Int32)">
            <summary>
            Runs IMRT optimization for the plan setup. 
            All existing optimal fluences are removed from the beams.
            Fails if the method cannot select an MLC for the beams.
            Plan normalization method is changed to 'No plan normalization' after successful optimization.
            </summary>
            <param name="maxIterations">The maximum number of iterations.</param>
            <returns>The result of the optimization.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.Optimize(System.Int32,VMS.TPS.Common.Model.Types.OptimizationOption)">
            <summary>
            Runs IMRT optimization for the plan setup.
            Fails if the method cannot select an MLC for the beams.
            Plan normalization method is changed to 'No plan normalization' after successful optimization.
            </summary>
            <param name="maxIterations">The maximum number of iterations.</param>
            <param name="optimizationOption">Optimization options.</param>
            <returns>The result of the optimization.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.Optimize(System.Int32,VMS.TPS.Common.Model.Types.OptimizationOption,System.String)">
            <summary>
            Runs IMRT optimization for the plan setup.
            You can add the Multileaf Collimator (MLC) as a parameter.
            Plan normalization method is changed to 'No plan normalization' after successful optimization.
            </summary>
            <param name="maxIterations">The maximum number of iterations.</param>
            <param name="optimizationOption">Optimization option specifying the initial state.</param>
            <param name="mlcId">The identifier for the Multileaf Collimator (MLC).</param>
            <returns>The result of the optimization.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.Optimize">
            <summary>
            Runs IMRT optimization for the plan setup. The Multileaf Collimator (MLC) is determined automatically. If there are more than one MLC or no MLC at all, 
            an exception is thrown.
            Plan normalization method is changed to 'No plan normalization' after successful optimization.
            </summary>
            <returns>The result of the optimization.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.Optimize(VMS.TPS.Common.Model.Types.OptimizationOptionsIMRT)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Runs IMRT optimization for the plan setup.
            Plan normalization method is changed to 'No plan normalization' after successful optimization.
            </summary>
            <param name="options">Options specifying initial state, intermediate dose, and termination upon convergence.</param>
            <returns>Result of the optimization.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.RemoveTemporaryPlan">
            <summary>
            This method is used to remove the temporary copy of the original IPlanSetup object that was created for intermediate dose calculation.
            The method should be called only after the optimization is done, otherwise the intermediate dose is disposed too early. The temporary copy 
            should be removed because it is copy of an existing plan and this might cause problems when saving other plans to database, e.g., in automated 
            validation tests. The plan is removed in the same way as in the optimization client for Eclipse.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.OptimizeVMAT(System.String)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Runs VMAT optimization for the plan setup.
            You can add the MLC as a parameter.
            Plan normalization method is changed to 'No plan normalization' after successful optimization.
            </summary>
            <param name="mlcId">The identifier for the Multileaf Collimator (MLC).</param>
            <returns>The result of the optimization.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.OptimizeVMAT">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Runs VMAT optimization for the plan setup.
            The Multileaf Collimator (MLC) is determined automatically. If there are more than one MLC or no MLC at all, 
            an exception is thrown.
            Plan normalization method is changed to 'No plan normalization' after successful optimization.
            </summary>
            <returns>The result of the optimization.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.OptimizeVMAT(VMS.TPS.Common.Model.Types.OptimizationOptionsVMAT)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Runs VMAT optimization for the plan setup using intermediate dose calculation.
            Plan normalization method is changed to 'No plan normalization' after successful optimization.
            </summary>
            <param name="options">VMAT optimization options.</param>
            <returns>The result of the optimization.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CalculateDVHEstimates(System.String,System.Collections.Generic.Dictionary{System.String,VMS.TPS.Common.Model.Types.DoseValue},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Calculates DVH estimates for the plan.
            </summary>
            <param name="modelId">DVH estimation model ID.</param>
            <param name="targetDoseLevels">Dose levels for the target structures.</param>
            <param name="structureMatches">Matching between the IDs of the structures contained in the structure set used in the plan (the Key in the Dictionary)
            and the structures used in the DVH estimation model (the Value in the Dictionary).</param>
            <returns>The calculation result. See the calculation details <see cref="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs"> in the calculation logs</see></returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.AddArcBeam(VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters,VMS.TPS.Common.Model.Types.VRect{System.Double},System.Double,System.Double,System.Double,VMS.TPS.Common.Model.Types.GantryDirection,System.Double,VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds a new arc beam to the plan.
            </summary>
            <param name="machineParameters">Configuration of the used treatment unit. See <see cref="T:VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters" />.</param>
            <param name="jawPositions">The jaw positions of the treatment beam in millimeters, and
            in IEC BEAM LIMITING DEVICE coordinates.</param>
            <param name="collimatorAngle">The orientation of the IEC BEAM LIMITING DEVICE
            coordinate system with respect to the IEC GANTRY coordinate system (in degrees).</param>
            <param name="gantryAngle">The orientation of the IEC GANTRY coordinate system with
            respect to the IEC FIXED REFERENCE coordinate system (in degrees).</param>
            <param name="gantryStop">The stop angle of the gantry, in degrees.</param>
            <param name="gantryDirection">The rotation direction of the arc.</param>
            <param name="patientSupportAngle">The orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).</param>
            <param name="isocenter">The isocenter position, in millimeters.</param>
            <returns>The created Beam.</returns>
            <remarks>All angles must be specified in the range [0, 360[.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.AddConformalArcBeam(VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters,System.Double,System.Int32,System.Double,System.Double,VMS.TPS.Common.Model.Types.GantryDirection,System.Double,VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds a new conformal arc beam to the plan.
            </summary>
            <param name="machineParameters">Configuration of the used treatment unit. See <see cref="T:VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters" />.</param>
            <param name="collimatorAngle">The orientation of the IEC BEAM LIMITING DEVICE
            coordinate system with respect to the IEC GANTRY coordinate system (in degrees).</param>
            <param name="controlPointCount">The number of control points to use.</param>
            <param name="gantryAngle">The orientation of the IEC GANTRY coordinate system with
            respect to the IEC FIXED REFERENCE coordinate system (in degrees).</param>
            <param name="gantryStop">The stop angle of the gantry, in degrees.</param>
            <param name="gantryDirection">The rotation direction of the arc.</param>
            <param name="patientSupportAngle">The orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).</param>
            <param name="isocenter">The isocenter position, in millimeters.</param>
            <returns>The created beam.</returns>
            <remarks>All angles must be specified in the range [0, 360[.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.AddMLCArcBeam(VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters,System.Single[0:,0:],VMS.TPS.Common.Model.Types.VRect{System.Double},System.Double,System.Double,System.Double,VMS.TPS.Common.Model.Types.GantryDirection,System.Double,VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds a new arc beam with an MLC to the plan.
            </summary>
            <param name="machineParameters">Configuration of the used treatment unit. See <see cref="T:VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters" />.</param>
            <param name="leafPositions">The positions of the beam collimator leaf pairs in millimeters, and in
            the IEC BEAMLIMITING DEVICE coordinate axis appropriate to the MLC device type. For example,
            the X-axis for MLCX and the Y-axis for MLCY. The two-dimensional array is
            indexed [bank, leaf], where the bank is either 0 or 1. Bank 0 represents
            the leaf bank to the negative MLC X direction, and bank 1 to the
            positive MLC X direction. Passing null selects the default.</param>
            <param name="jawPositions">The jaw positions of the treatment beam in millimeters, and
            in IEC BEAM LIMITING DEVICE coordinates.</param>
            <param name="collimatorAngle">The orientation of the IEC BEAM LIMITING DEVICE
            coordinate system with respect to the IEC GANTRY coordinate system (in degrees).</param>
            <param name="gantryAngle">The orientation of the IEC GANTRY coordinate system with
            respect to the IEC FIXED REFERENCE coordinate system (in degrees).</param>
            <param name="gantryStop">The stop angle of the gantry, in degrees.</param>
            <param name="gantryDirection">The direction of the arc.</param>
            <param name="patientSupportAngle">The orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).</param>
            <param name="isocenter">The isocenter position, in millimeters.</param>
            <returns>The created beam.</returns>
            <remarks>All angles must be specified in the range [0, 360[.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.AddMLCBeam(VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters,System.Single[0:,0:],VMS.TPS.Common.Model.Types.VRect{System.Double},System.Double,System.Double,System.Double,VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds a new beam with an MLC to the plan.
            </summary>
            <param name="machineParameters">Configuration of the used treatment unit. See <see cref="T:VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters" />.</param>
            <param name="leafPositions">The positions of the beam collimator leaf pairs in millimeters, and in
            the IEC BEAMLIMITING DEVICE coordinate axis appropriate to the MLC device type. For example,
            the X-axis for MLCX and the Y-axis for MLCY. The two-dimensional array is
            indexed [bank, leaf] where the bank is either 0 or 1. Bank 0 represents
            the leaf bank to the negative MLC X direction, and bank 1 to the
            positive MLC X direction. Passing null selects the default.</param>
            <param name="jawPositions">The jaw positions of the treatment beam in millimeters, and
            in IEC BEAM LIMITING DEVICE coordinates.</param>
            <param name="collimatorAngle">The orientation of the IEC BEAM LIMITING DEVICE
            coordinate system with respect to the IEC GANTRY coordinate system (in degrees).</param>
            <param name="gantryAngle">The orientation of the IEC GANTRY coordinate system with
            respect to the IEC FIXED REFERENCE coordinate system (in degrees).</param>
            <param name="patientSupportAngle">The orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).</param>
            <param name="isocenter">The isocenter position, in millimeters.</param>
            <returns>The created beam.</returns>
            <remarks>All angles must be specified in the range [0, 360[.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.AddMultipleStaticSegmentBeam(VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters,System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double,System.Double,VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds a new IMRT beam to the plan and defines Multiple Static Segments as the delivery technique.
            </summary>
            <param name="machineParameters">Configuration of the used treatment unit. See <see cref="T:VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters" />.</param>
            <param name="metersetWeights">The meterset weight for each control point of the beam. The number of meterset weight items defines the number of created control points.</param>
            <param name="collimatorAngle">The orientation of the IEC BEAM LIMITING DEVICE
            coordinate system with respect to the IEC GANTRY coordinate system (in degrees).</param>
            <param name="gantryAngle">The orientation of the IEC GANTRY coordinate system with
            respect to the IEC FIXED REFERENCE coordinate system (in degrees).</param>
            <param name="patientSupportAngle">The orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).</param>
            <param name="isocenter">The isocenter position, in millimeters.</param>
            <returns>The created beam.</returns>
            <remarks>All angles must be specified in the range [0, 360[.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.AddSlidingWindowBeam(VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters,System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double,System.Double,VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds a new IMRT beam to the plan and defines Sliding Window as the delivery technique.
            </summary>
            <param name="machineParameters">Configuration of the used treatment unit. See <see cref="T:VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters" />.</param>
            <param name="metersetWeights">The meterset weight for each control point of the beam. The number of meterset weight items defines the number of created control points.</param>
            <param name="collimatorAngle">The orientation of the IEC BEAM LIMITING DEVICE
            coordinate system with respect to the IEC GANTRY coordinate system (in degrees).</param>
            <param name="gantryAngle">The orientation of the IEC GANTRY coordinate system with
            respect to the IEC FIXED REFERENCE coordinate system (in degrees).</param>
            <param name="patientSupportAngle">The orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).</param>
            <param name="isocenter">The isocenter position, in millimeters.</param>
            <returns>The created beam.</returns>
            <remarks>All angles must be specified in the range [0, 360[.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.AddStaticBeam(VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters,VMS.TPS.Common.Model.Types.VRect{System.Double},System.Double,System.Double,System.Double,VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds a new static beam to the plan.
            </summary>
            <param name="machineParameters">Configuration of the used treatment unit. See <see cref="T:VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters" />.</param>
            <param name="jawPositions">The jaw positions of the treatment beam in millimeters, and
            in IEC BEAM LIMITING DEVICE coordinates.</param>
            <param name="collimatorAngle">The orientation of the IEC BEAM LIMITING DEVICE
            coordinate system with respect to the IEC GANTRY coordinate system (in degrees).</param>
            <param name="gantryAngle">The orientation of the IEC GANTRY coordinate system with
            respect to the IEC FIXED REFERENCE coordinate system (in degrees).</param>
            <param name="patientSupportAngle">The orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).</param>
            <param name="isocenter">The isocenter position, in millimeters.</param>
            <returns>The created beam.</returns>
            <remarks>All angles must be specified in the range [0, 360[.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.AddVMATBeam(VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters,System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double,System.Double,VMS.TPS.Common.Model.Types.GantryDirection,System.Double,VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds a new VMAT beam to the plan.
            </summary>
            <param name="machineParameters">Configuration of the used treatment unit. See <see cref="T:VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters" />.</param>
            <param name="metersetWeights">The meterset weight for each control point of the beam. The number of meterset weight items defines the number of created control points.</param>
            <param name="collimatorAngle">The orientation of the IEC BEAM LIMITING DEVICE
            coordinate system with respect to the IEC GANTRY coordinate system (in degrees).</param>
            <param name="gantryAngle">The orientation of the IEC GANTRY coordinate system with
            respect to the IEC FIXED REFERENCE coordinate system (in degrees).</param>
            <param name="gantryStop">The stop angle of the gantry, in degrees.</param>
            <param name="gantryDirection">The rotation direction of the arc.</param>
            <param name="patientSupportAngle">The orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).</param>
            <param name="isocenter">The isocenter position, in millimeters.</param>
            <returns>The created beam.</returns>
            <remarks>All angles must be specified in the range [0, 360[.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CopyEvaluationDose(VMS.TPS.Common.Model.API.Dose)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Creates an evaluation dose for the plan. The voxels in an evaluation dose
            are copied from the existing dose matrix.
            To create an evaluation dose, the plan must not contain any beams.
            </summary>
            <param name="existing">The dose matrix is copied from this object.</param>
            <returns>A new evaluation dose object.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CreateEvaluationDose">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Creates an evaluation dose for the plan. The voxels in an evaluation dose
            can be set using the Eclipse Scripting API instead of a dose calculation algorithm.
            To create an evaluation dose, the plan must not contain any beams.
            To set the evaluation dose voxels, retrieve the dose matrix using the <see cref="P:VMS.TPS.Common.Model.API.ExternalPlanSetup.DoseAsEvaluationDose">DoseAsEvaluationDose</see> property of the plan
            and then use <see cref="M:VMS.TPS.Common.Model.API.EvaluationDose.SetVoxels(System.Int32,System.Int32[0:,0:])">SetVoxels</see>.
            </summary>
            <returns>A new evaluation dose object.</returns>
            <remarks>Saving modifications to the database is not possible if the evaluation dose has been created but voxels have not been set.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.RemoveBeam(VMS.TPS.Common.Model.API.Beam)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Removes a beam from the plan.
            </summary>
            <param name="beam">The beam that will be removed from the plan.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ExternalPlanSetup.TradeoffExplorationContext">
            <summary>
            [Availability of this property depends on your Eclipse Scripting API license]
            Gets the <see cref="T:VMS.TPS.Common.Model.API.TradeoffExplorationContext"/>.
            </summary>
            <remarks>
            To be able to get the <see cref="T:VMS.TPS.Common.Model.API.TradeoffExplorationContext"/> class, the plan needs to have the optimization objectives set.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ExternalPlanSetup.DoseAsEvaluationDose">
            <summary>
            The evaluation dose is connected to the plan and contains voxels that are set by
            <see cref="M:VMS.TPS.Common.Model.API.EvaluationDose.SetVoxels(System.Int32,System.Int32[0:,0:])">SetVoxels</see>
            instead of the dose calculation algorithm. Returns null if the plan has no evaluation dose.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.TradeoffPlanGenerationIntermediateDoseMode">
            <summary>
            Enumeration that specifies the use of intermediate dose when optimizing a plan collection for trade-off exploring.
            </summary>
        </member>
        <member name="F:VMS.TPS.Common.Model.API.TradeoffPlanGenerationIntermediateDoseMode.NotUsed">
            <summary>
            No intermediate dose is used for the plan generation optimizations.
            </summary>
        </member>
        <member name="F:VMS.TPS.Common.Model.API.TradeoffPlanGenerationIntermediateDoseMode.UsePlanDose">
            <summary>
            Uses the current calculated plan dose as intermediate dose for the plan generation optimizations.
            Can only be used if the plan has a calculated dose and the plan is generated by continuing optimization.
            </summary>
            <seealso cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CanUsePlanDoseAsIntermediateDose"/>
        </member>
        <member name="F:VMS.TPS.Common.Model.API.TradeoffPlanGenerationIntermediateDoseMode.Calculate">
            <summary>
            Calculate intermediate dose and use it for the plan generation optimizations.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Image">
            <summary>
            Represents a 2D or 3D image, which can be a DRR, a CT, MR, or other volumetric dataset.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Image.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Image.CreateNewStructureSet">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Creates a new structure set. If the image does not yet have a structure set,
            the new structure set will be assigned directly to it. If the image already has
            a structure set, a copy of this image is made, and the new structure set is assigned
            to the copy. The image must be a 3D image.
            </summary>
            <returns>New structure set.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Image.DicomToUser(VMS.TPS.Common.Model.Types.VVector,VMS.TPS.Common.Model.API.PlanSetup)">
            <summary>
            Converts DICOM coordinates to the planning coordinate system used in the Eclipse user interface.
            </summary>
            <param name="dicom">Coordinate value in DICOM coordinate system.</param>
            <param name="planSetup">Plan that defines the planning orientation or null.</param>
            <returns>The coordinate value in the planning coordinate system used in Eclipse user interface.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Image.GetImageProfile(VMS.TPS.Common.Model.Types.VVector,VMS.TPS.Common.Model.Types.VVector,System.Double[])">
            <summary>
            Gets the image profile.
            </summary>
            <param name="start">Location of the first point of the profile.</param>
            <param name="stop">Location of the last point of the profile.</param>
            <param name="preallocatedBuffer">Preallocated buffer where the values are stored. The size of
            the buffer determines the number of values to return.</param>
            <returns>The ImageProfile object holding the image pixel values along the line segment defined by start and stop parameters.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Image.GetVoxels(System.Int32,System.Int32[0:,0:])">
            <summary>
            Gets the voxels of the given image plane.
            </summary>
            <param name="planeIndex">Zero based index of the plane.</param>
            <param name="preallocatedBuffer">Preallocated buffer where the voxel values are stored. The size of
            the buffer must conform with the X- and Y-size of this image.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Image.UserToDicom(VMS.TPS.Common.Model.Types.VVector,VMS.TPS.Common.Model.API.PlanSetup)">
            <summary>
            Converts a coordinate value from the planning coordinate system used in the Eclipse user interface to DICOM coordinates.
            </summary>
            <param name="user">Coordinate value in the planning coordinate system.</param>
            <param name="planSetup">Plan that defines the planning orientation or null.</param>
            <returns>The coordinate value in DICOM coordinate system.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Image.VoxelToDisplayValue(System.Int32)">
            <summary>
            Converts the given raw voxel value to the corresponding value
            in the user interface display unit, for example, HU, Bq/ml.
            </summary>
            <param name="voxelValue">Voxel value.</param>
            <returns>Value converted to user interface display unit.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.Id">
            <summary>
            [Availability of this property depends on your Eclipse Scripting API license] The identifier of the image.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.ApprovalHistory">
            <summary>
            Returns the approval history of the image.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.ContrastBolusAgentIngredientName">
            <summary>
            The name of the contrast bolus agent ingredient that is used in the image. If the value has not been specified, returns null.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.CreationDateTime">
            <summary>
            The date when this object was created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.DisplayUnit">
            <summary>
            The name of the display unit in which the voxels of the image are shown in the user interface.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.FOR">
            <summary>
            The UID of the frame of reference.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.HasUserOrigin">
            <summary>
            Defines if a user origin has been specified for the image.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.ImagingOrientation">
            <summary>
            The orientation of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.IsProcessed">
            <summary>
            Returns the value true if an image processing filter is in use for the image.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.Level">
            <summary>
            The level setting. The value is given in the internal voxel scale.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.Origin">
            <summary>
            The origin of the image. In other words, the DICOM coordinates of the center point
            of the upper-left hand corner voxel of the first image plane.
            Supported only for volume images. For other types of images, the return
            value is a vector of Double.NaNs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.Series">
            <summary>
            Used for navigating to parent series.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.UserOrigin">
            <summary>
            The user origin in DICOM coordinates in millimeter.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.UserOriginComments">
            <summary>
            The text typed on the Origin tab in the Image Properties dialog box.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.Window">
            <summary>
            The window setting. The value is given in the internal voxel scale.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.XDirection">
            <summary>
            The direction of the x-axis in the image.
            Supported only for volume images. For other types of images, the return
            value is a vector of Double.NaNs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.XRes">
            <summary>
            The image resolution in X-direction in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.XSize">
            <summary>
            The image size in X-direction in voxels.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.YDirection">
            <summary>
            The direction of the y-axis in the image.
            Supported only for volume images. For other types of images, the return
            value is a vector of Double.NaNs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.YRes">
            <summary>
            The image resolution in Y-direction in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.YSize">
            <summary>
            The image size in Y-direction in voxels.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.ZDirection">
            <summary>
            The direction of the z-axis in the image.
            Supported only for volume images. For other types of images, the return
            value is a vector of Double.NaNs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.ZRes">
            <summary>
            The image resolution in Z-direction in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.ZSize">
            <summary>
            The image size in Z-direction in voxels.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.IonBeamParameters">
            <summary>
            An editable copy of the parameters of a proton beam.
            </summary>
            <remarks>
            To apply the parameters, call the <see cref="M:VMS.TPS.Common.Model.API.Beam.ApplyParameters(VMS.TPS.Common.Model.API.BeamParameters)">ApplyParameters</see> method of the
            IonBeam class. The parameters contained in this class are simply
            copies, and they do not reflect the current state of the data model.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeamParameters.ControlPoints">
            <summary>
            Editable control point parameters copied from the
            treatment beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeamParameters.IonControlPointPairs">
            <summary>
            A copy of editable control point pairs.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.IonPlanSetup">
            <summary>
            Represents a proton treatment plan.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonPlanSetup.CalculateDose">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Calculates the dose for the proton plan.
            </summary>
            <returns>The calculation result. See calculation details from <see cref="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs">the calculation logs</see>.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonPlanSetup.PostProcessAndCalculateDose">
            <summary>
            ost-processes the proton plan by creating a final spot list, and calculates the dose.
            </summary>
            <returns>The calculation result. See calculation details from <see cref="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs">the calculation logs</see>.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonPlanSetup.CalculateDoseWithoutPostProcessing">
            <summary>
            Calculates the dose for a proton plan without post-processing. The existing final spot list is used, and no new list is created during the calculation.
            </summary>
            <returns>The calculation result. See calculation details from <see cref="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs">the calculation logs</see>.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonPlanSetup.GetModelsForCalculationType(VMS.TPS.Common.Model.Types.CalculationType)">
            <summary>
            Returns a list of calculation models for the given calculation type.
            </summary>
            <param name="calculationType">The type of calculation.</param>
            <returns>The list of calculation models.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonPlanSetup.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonPlanSetup.CopyEvaluationDose(VMS.TPS.Common.Model.API.Dose)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Creates an evaluation dose for the plan. The voxels in an evaluation dose
            are copied from the existing dose matrix.
            To create an evaluation dose, the plan must not contain any beams.
            </summary>
            <param name="existing">The dose matrix is copied from this object.</param>
            <returns>A new evaluation dose object.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonPlanSetup.CreateEvaluationDose">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Creates an evaluation dose for the plan. The voxels in an evaluation dose
            can be set using the Eclipse Scripting API instead of a dose calculation algorithm.
            To create an evaluation dose, the plan must not contain any beams.
            To set the evaluation dose voxels, retrieve the dose matrix using the <see cref="P:VMS.TPS.Common.Model.API.IonPlanSetup.DoseAsEvaluationDose">DoseAsEvaluationDose</see> property of the plan
            and then use <see cref="M:VMS.TPS.Common.Model.API.EvaluationDose.SetVoxels(System.Int32,System.Int32[0:,0:])">SetVoxels</see>.
            </summary>
            <returns>A new evaluation dose object.</returns>
            <remarks>Saving modifications to the database is not possible if the evaluation dose has been created but voxels have not been set.</remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonPlanSetup.IsPostProcessingNeeded">
            <summary>
            Instructs whether to include the post-processing of scanning spots in proton dose calculation.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonPlanSetup.DoseAsEvaluationDose">
            <summary>
            The evaluation dose is connected to the plan and contains voxels that are set by
            <see cref="M:VMS.TPS.Common.Model.API.EvaluationDose.SetVoxels(System.Int32,System.Int32[0:,0:])">SetVoxels</see>
            instead of the dose calculation algorithm. Returns null if the plan has no evaluation dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonPlanSetup.IonBeams">
            <summary>
            Gets the proton beams of the plan.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationControllerIMRT">
            <summary>
            Controls the IMRT optimization from the Script
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationControllerBase">
            <summary>
            Base class for IMRT and VMAT optimization controllers.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationControllerBase.GetOptimizationMLCs(VMS.TPS.Common.Model.IOptimizationSetup)">
            <summary>
            Gets a list of available MLCs for optimizing this plan with.
            </summary>
            <returns>List of MLCs</returns>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationControllerVMAT">
            <summary>
            Controls the VMAT optimization from the Script
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationSetup">
            <summary>
            Gives access to the optimization parameters and objectives.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.AddAutomaticNormalTissueObjective(System.Double)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds a new automatic normal tissue objective (NTO) or updates the data of the existing objective. Only one
            NTO can be added.
            </summary>
            <param name="priority">Determines the relative importance of the NTO in relation to other optimization objectives.The value is positive.</param>
            <returns>The added parameter.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.AddBeamSpecificParameter(VMS.TPS.Common.Model.API.Beam,System.Double,System.Double,System.Boolean)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds a new beam-specific parameter for IMRT optimization.
            </summary>
            <param name="beam">The beam for which the parameters are added.</param>
            <param name="smoothX">A fluence-smoothing parameter in X-direction.</param>
            <param name="smoothY">A fluence-smoothing parameter in Y-direction.</param>
            <param name="fixedJaws">If true, the collimator jaw positions of the beam remain the same during the optimization.</param>
            <returns>The added parameter.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.AddEUDObjective(VMS.TPS.Common.Model.API.Structure,VMS.TPS.Common.Model.Types.OptimizationObjectiveOperator,VMS.TPS.Common.Model.Types.DoseValue,System.Double,System.Double)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds a new gEUD objective.
            </summary>
            <param name="structure">The target structure of the objective.</param>
            <param name="objectiveOperator">The type of the gEUD objective.</param>
            <param name="dose">The dose value of the objective. The unit must be the same as defined in the system configuration.</param>
            <param name="parameterA">gEUD parameter a.</param>
            <param name="priority">The priority of the objective.</param>
            <returns>The added objective.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.AddMeanDoseObjective(VMS.TPS.Common.Model.API.Structure,VMS.TPS.Common.Model.Types.DoseValue,System.Double)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds a new mean dose objective.
            </summary>
            <param name="structure">The target structure of the objective.</param>
            <param name="dose">The dose value of the objective. The unit must be the same as defined in the system configuration.</param>
            <param name="priority">The priority of the objective.</param>
            <returns>The added objective.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.AddNormalTissueObjective(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds a new normal tissue objective (NTO) or updates the data of the existing objective. Only one
            NTO can be added. Calling this function disables the automatic NTO if it has been set previously.
            </summary>
            <param name="priority">Determines the relative importance of the normal tissue objective in relation to other optimization objectives.The value is positive.</param>
            <param name="distanceFromTargetBorderInMM">Determines the distance in millimeters from the target border where the evaluation of the normal tissue objective dose begins.</param>
            <param name="startDosePercentage">Determines the relative dose level in the normal tissue objective at the target border,
            expressed in percentage of the upper objective for the target.
            The value is positive. 100% is specified as 100.
            </param>
            <param name="endDosePercentage">Determines the relative dose level in the normal tissue objective in the area furthest from the target border.
            Expressed in percentage. The value is positive. 100% is specified as 100.
            </param>
            <param name="fallOff">Determines the steepness of the normal tissue objective fall-off.
            The value is positive.
            </param>
            <returns>The added parameter.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.AddPointObjective(VMS.TPS.Common.Model.API.Structure,VMS.TPS.Common.Model.Types.OptimizationObjectiveOperator,VMS.TPS.Common.Model.Types.DoseValue,System.Double,System.Double)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds a new point objective.
            </summary>
            <param name="structure">The target structure of the objective.</param>
            <param name="objectiveOperator">The type of the dose-volume objective.</param>
            <param name="dose">The dose value of the objective. The unit must be the same as defined in the system configuration.</param>
            <param name="volume">The volume of the objective.</param>
            <param name="priority">The priority of the objective.</param>
            <returns>The added objective.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.RemoveObjective(VMS.TPS.Common.Model.API.OptimizationObjective)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Removes the specified optimization objective.
            </summary>
            <param name="objective">The objective that is removed.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.RemoveParameter(VMS.TPS.Common.Model.API.OptimizationParameter)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Removes the specified optimization parameter.
            </summary>
            <param name="parameter">The parameter that is removed.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationSetup.UseJawTracking">
            <summary>
            [Availability of this property depends on your Eclipse Scripting API license] Jaw tracking parameter for VMAT optimization.
            The parameter can only be set for plans to be delivered with a treatment machine that supports jaw tracking.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationSetup.Objectives">
            <summary>
            A collection of optimization objectives.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationSetup.Parameters">
            <summary>
            A collection of optimization parameters.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.CalculationResult">
            <summary>
            Holds the result of the calculation (pass/fail).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.CalculationResult.Success">
            <summary>
            Returns true if calculation did not return any errors. Otherwise returns false.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizerResult">
            <summary>
            Holds the result of the optimization (pass/fail).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizerResult.StructureDVHs">
            <summary>
            A list of Dose Volume Histogram (DVH) curves for structures.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizerResult.StructureObjectiveValues">
            <summary>  
            The list of objective function values per structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizerResult.TotalObjectiveFunctionValue">
            <summary>
            The total objective function value for the optimization.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizerResult.NumberOfIMRTOptimizerIterations">
            <summary>
            The number of iterations taken by the IMRT optimizer.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ProtocolPhaseMeasure">
            <summary>
            Represents the plan measures (quality indices) of the clinical protocol.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ProtocolPhaseMeasure.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ProtocolPhaseMeasure.TargetValue">
            <summary>
            The target value of this plan measure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ProtocolPhaseMeasure.ActualValue">
            <summary>
            The calculated actual value of this plan measure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ProtocolPhaseMeasure.TargetIsMet">
            <summary>
            Indicates whether the target is met. If this cannot be evaluated, the value is null.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ProtocolPhaseMeasure.Modifier">
            <summary>
            Measure Modifier.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ProtocolPhaseMeasure.StructureId">
            <summary>
            ID of the structure to which this measure is applied.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ProtocolPhaseMeasure.Type">
            <summary>
            Measure Type.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ProtocolPhaseMeasure.TypeText">
            <summary>
            Measure type as text, for instance, 'Conformity Index' in 'Conformity Index is more than 10.0'.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ProtocolPhasePrescription">
            <summary>
            Represents the prescriptions (plan objectives) of the clinical protocol.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ProtocolPhasePrescription.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ProtocolPhasePrescription.TargetTotalDose">
            <summary>
            Total dose in absolute units specified for this prescription.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ProtocolPhasePrescription.TargetFractionDose">
            <summary>
            Fraction dose in absolute units specified for this prescription.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ProtocolPhasePrescription.ActualTotalDose">
            <summary>
            Actual total dose for this prescription
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ProtocolPhasePrescription.TargetIsMet">
            <summary>
            Indicates whether the target is met. If this cannot be evaluated, the value is null.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ProtocolPhasePrescription.PrescModifier">
            <summary>
            Prescription Modifier.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ProtocolPhasePrescription.PrescParameter">
            <summary>
            Value of the prescription parameter, for instance, '80' in 'At least 80% receives more than 2 Gy'.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ProtocolPhasePrescription.PrescType">
            <summary>
            Prescription Type.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ProtocolPhasePrescription.StructureId">
            <summary>
            ID of structure to which this prescription is applied.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ScriptEnvironment">
            <summary>
            Contains the runtime information of the application environment for the script.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ScriptEnvironment.#ctor(System.String,System.Collections.Generic.IEnumerable{VMS.TPS.Common.Model.IApplicationScript},System.Action{System.Reflection.Assembly,System.Object,System.Windows.Window,System.Object})">
            <summary>
            Provides scripts access to the application environment.
            A ScriptEnvironment instance is given as an optional parameter in the Execute function of the script.
            The script itself does not instantiate the ScriptEnvironment.
            </summary>
            <param name="appName">The application name.</param>
            <param name="scripts">A list of all scripts known by the application.</param>
            <param name="scriptExecutionEngine">The execution engine for executing a script from another script.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ScriptEnvironment.ExecuteScript(System.Reflection.Assembly,VMS.TPS.Common.Model.API.ScriptContext,System.Windows.Window)">
            <summary>
            Executes an other script from script. This allows a script to be used for launching other scripts.
            Without using this special method, the system would be unaware of the other script, and thus could not save the correct script logs.  
            </summary>
            <param name="scriptAssembly">The other script assembly. The assembly must have a location.</param>
            <param name="scriptContext">The script context that was passed to the executing script.</param>
            <param name="window">The script window. This is an optional parameter, can be null.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptEnvironment.ApplicationName">
            <summary>
            The name of the active application.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptEnvironment.VersionInfo">
            <summary>
            The version number of Eclipse.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptEnvironment.ApiVersionInfo">
            <summary>
            The version number of Eclipse Scripting API.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptEnvironment.Scripts">
            <summary>
            Retrieves a list of all scripts known by the application.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Structure">
            <summary>
            A structure is a geometrical representation of an anatomical organ, a treatment volume, a marker, or a support structure.
            See the definition of a DICOM Structure for more information.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.op_Implicit(VMS.TPS.Common.Model.API.Structure)~VMS.TPS.Common.Model.API.SegmentVolume">
            <summary>
            An implicit conversion from Structure to SegmentVolume makes it easier to
            use the SegmentVolume functionality, such as the boolean operators and margin.
            </summary>
            <param name="structure">The converted structure.</param>
            <returns>The segment volume of the structure.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.AddContourOnImagePlane(VMS.TPS.Common.Model.Types.VVector[],System.Int32)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds the given contour to the given image plane.
            </summary>
            <param name="contour">The contour points, z coordinates are ignored.</param>
            <param name="z">A zero-based image plane index.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.And(VMS.TPS.Common.Model.API.SegmentVolume)">
            <summary>
            Boolean And operation for structures that have a segment model. Provided here for convenience.
            </summary>
            <param name="other">The segment volume that is combined with this segment volume.</param>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.AsymmetricMargin(VMS.TPS.Common.Model.Types.AxisAlignedMargins)">
            <summary>
            Asymmetric margin operation for structures that have a segment model. Provided here for convenience.
            </summary>
            <param name="margins">The margins aligned to the axes of the image coordinate system, in millimeters. The maximum is 50.</param>
            <returns>A new expanded or shrunk segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.CanConvertToHighResolution">
            <summary>
            Returns true if this structure can be converted to a high-resolution structure.
            </summary>
            <returns>true if this structure can be converted to a high-resolution structure.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.CanEditSegmentVolume(System.String@)">
            <summary>
            Checks if the segment volume of the structure can be edited.
            </summary>
            <param name="errorMessage">If the segment volume cannot be edited, contains the error message.</param>
            <returns>Returns true if the segment volume of the structure can be edited.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.CanSetAssignedHU(System.String@)">
            <summary>
            Checks if the HU value of the structure can be modified.
            </summary>
            <param name="errorMessage">If the HU value cannot be set, contains the error message.</param>
            <returns>Returns true if the HU value for this structure can be modified.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.ClearAllContoursOnImagePlane(System.Int32)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Clears the contours on the given image plane.
            </summary>
            <param name="z">A zero-based image plane index.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.ConvertDoseLevelToStructure(VMS.TPS.Common.Model.API.Dose,VMS.TPS.Common.Model.Types.DoseValue)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Creates a structure out of an isodose level.
            </summary>
            <param name="dose">The dose from which the dose level is extracted.</param>
            <param name="doseLevel">The dose level.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.ConvertToHighResolution">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Converts this structure to a high-resolution structure.
            Increases the resolution of the segment volume in cases where the image size is larger than 256x256 voxels.
            </summary>
            <exception cref="T:System.InvalidOperationException">Can not convert this structure.</exception>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.GetAssignedHU(System.Double@)">
            <summary>
            Returns the HU value of the material.
            </summary>
            <param name="huValue">Double value that will contain the HU value upon return from this method</param>
            <returns>Returns true if a HU value has been assigned for this structure.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.GetContoursOnImagePlane(System.Int32)">
            <summary>
            If the structure has a segment, gets the contours of the structure on the given image plane.
            </summary>
            <param name="z">Zero based image plane index.</param>
            <returns>A jagged array that holds the points for all contours of the structure on the given image plane.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.GetNumberOfSeparateParts">
            <summary>
            If the structure has a segment, returns the number of separate parts.
            </summary>
            <returns>Returns the number of separate parts in this structure</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.GetReferenceLinePoints">
            <summary>
            If the structure is a reference line, gets its points.
            </summary>
            <returns>An array that holds the points defining the reference line. If no reference line exists, the array is empty.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.GetSegmentProfile(VMS.TPS.Common.Model.Types.VVector,VMS.TPS.Common.Model.Types.VVector,System.Collections.BitArray)">
            <summary>
            If the structure has a segment, gets the segment profile.
            </summary>
            <param name="start">Location of the first point of the profile.</param>
            <param name="stop">Location of the last point of the profile.</param>
            <param name="preallocatedBuffer">Preallocated buffer where the values are stored. The size of
            the buffer determines the number of values to return.</param>
            <returns>The SegmentProfile object holding segment values (true if inside, false otherwise) along the line segment defined by start and stop parameters.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.IsPointInsideSegment(VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            If the structure has a segment, checks if the given point lies within the structure.
            </summary>
            <param name="point">Location of the point.</param>
            <returns>True if the point lies within the structure, false otherwise.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.Margin(System.Double)">
            <summary>
            Margin operation for structures that have a segment model. Provided here for convenience.
            </summary>
            <param name="marginInMM">The used margin in millimeters. The maximum is 50.</param>
            <returns>A new expanded or shrunk segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.Not">
            <summary>
            Boolean Not operation for structures that have a segment model. Provided here for convenience.
            </summary>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.Or(VMS.TPS.Common.Model.API.SegmentVolume)">
            <summary>
            Boolean Or operation for structures that have a segment model. Provided here for convenience.
            </summary>
            <param name="other">The segment volume that is combined with this volume.</param>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.ResetAssignedHU">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Resets the HU value of the material to "undefined".
            </summary>
            <returns>
            Returns true if the HU value was set to "undefined".
            Returns false, if the value could not be reset. This can happen if the material has been set to a structure.
            </returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.SetAssignedHU(System.Double)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Sets the HU value of the material.
            </summary>
            <param name="huValue">A double value that contains the HU value to be set.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.Sub(VMS.TPS.Common.Model.API.SegmentVolume)">
            <summary>
            Boolean Sub operation for structures that have a segment model. Provided here for convenience.
            </summary>
            <param name="other">The segment volume that is subtracted from this segment volume.</param>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.SubtractContourOnImagePlane(VMS.TPS.Common.Model.Types.VVector[],System.Int32)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Subtracts the given contour from the given image plane.
            </summary>
            <param name="contour">The contour points, z coordinates are ignored.</param>
            <param name="z">A zero-based image plane index.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.Xor(VMS.TPS.Common.Model.API.SegmentVolume)">
            <summary>
            Boolean Xor operation for structures that have a segment model. Provided here for convenience.
            </summary>
            <param name="other">The segment volume that is combined with this volume.</param>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.Id">
            <summary>
            [Availability of this property depends on your Eclipse Scripting API license] The identifier of the Structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.ApprovalHistory">
            <summary>
            Returns the approval history of the structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.CenterPoint">
            <summary>
            The center point of the structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.Color">
            <summary>
            The color of the structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.DicomType">
            <summary>
            The DICOM type of the structure, for example, PTV, MARKER, or ORGAN.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.HasSegment">
            <summary>
            Checks if the structure has a segment.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.IsEmpty">
            <summary>
            Checks if the structure is empty.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.IsHighResolution">
            <summary>
            true if this structure is a high-resolution structure. Otherwise false.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.MeshGeometry">
            <summary>
            The mesh geometry.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.ROINumber">
            <summary>
            The DICOM ROI Number of the structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.SegmentVolume">
            <summary>
            Provides access to the segment volume of the structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.StructureCodeInfos">
            <summary>
            A collection of structure codes attached to this structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.Volume">
            <summary>
            The calculated volume.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.StructureSet">
            <summary>
            A structure set is a container for structures of a patient, including anatomical organs, treatment volumes and markers, and support structures.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.StructureSet.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.StructureSet.AddStructure(System.String,System.String)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds a new structure according to the DICOM structure type.
            </summary>
            <param name="dicomType">RT ROI Interpreted Type (DICOM). Identifies the DICOM structure type.
            Possible values are "AVOIDANCE", "CAVITY", "CONTRAST_AGENT", "CTV", "EXTERNAL", "GTV", "IRRAD_VOLUME",
            "ORGAN", "PTV", "TREATED_VOLUME", "SUPPORT", "FIXATION", "CONTROL", and "DOSE_REGION".
            </param>
            <param name="id">The identifier for the new structure.</param>
            <returns>Newly created structure.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.StructureSet.CanAddStructure(System.String,System.String)">
            <summary>
            Returns true if it is possible to add the given type of structure to the structure set.
            </summary>
            <param name="dicomType">RT ROI Interpreted Type (DICOM). Identifies the DICOM structure type.
            Possible values are "AVOIDANCE", "CAVITY", "CONTRAST_AGENT", "CTV", "EXTERNAL", "GTV", "IRRAD_VOLUME",
            "ORGAN", "PTV", "TREATED_VOLUME", "SUPPORT", "FIXATION", "CONTROL", and "DOSE_REGION".
            </param>
            <param name="id">The identifier for the new structure.</param>
            <returns>true if it is possible to add the given type of structure to the structure set. Otherwise false.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.StructureSet.CanRemoveStructure(VMS.TPS.Common.Model.API.Structure)">
            <summary>
            Returns true if it is possible to remove the given structure from the structure set.
            </summary>
            <param name="structure">The structure to check.</param>
            <returns>Returns true if the structure can be removed, false otherwise.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.StructureSet.Copy">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Creates a copy of this structure set.
            </summary>
            <returns>The newly created copy of the structure set.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.StructureSet.CreateAndSearchBody(VMS.TPS.Common.Model.API.SearchBodyParameters)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Creates a new Body structure and searches Body with the specified parameters. The existing Body structure is returned, if there is one.
            </summary>
            <param name="parameters">Parameters for the Search Body feature.</param>
            <returns>Newly created or already existing Body structure.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.StructureSet.Delete">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Deletes this structure set.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.StructureSet.GetDefaultSearchBodyParameters">
            <summary>
            Gets a default set of Search Body parameters.
            </summary>
            <returns>Parameters for the Search Body feature.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.StructureSet.RemoveStructure(VMS.TPS.Common.Model.API.Structure)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Removes the structure from this structure set if removal is allowed.
            </summary>
            <param name="structure">The structure to remove.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.StructureSet.Structures">
            <summary>
            Used for navigating to the child structures.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.StructureSet.Id">
            <summary>
            [Availability of this property depends on your Eclipse Scripting API license] The identifier of the structure set.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.StructureSet.ApplicationScriptLogs">
            <summary>
            The log entries of the script executions that have modified the structure set.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.StructureSet.Image">
            <summary>
            Used for navigating to the image.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.StructureSet.Patient">
            <summary>
            Used for navigating to the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.StructureSet.UID">
            <summary>
            DICOM UID.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.TradeoffExplorationContext">
            <summary>
            <para>Context for performing multi-criteria optimization (MCO) to explore different trade-offs.</para>  
            </summary>
            <remarks>
            To be able to get the <see cref="T:VMS.TPS.Common.Model.API.TradeoffExplorationContext"/> class from <see cref="T:VMS.TPS.Common.Model.API.ExternalPlanSetup"/>, the plan needs to have the optimization objectives set.
            </remarks>
            <example>
            <para>The basic workflow is the following:</para>
            <list type="number">
            <listheader></listheader>
            <item>Start from an optimized and calculated plan by using the <see cref="T:VMS.TPS.Common.Model.API.TradeoffExplorationContext"/> class.</item>
            <item>Select the trade-off objectives by using the <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.AddTradeoffObjective(VMS.TPS.Common.Model.API.Structure)"/> method. At least one objective is needed.</item>
            <item>Query if all pre-conditions to generate the plan collection are met by calling the <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CanCreatePlanCollection"/> property.</item>
            <item>If <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CanCreatePlanCollection"/> is true, generate the plan collection by calling the <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CreatePlanCollection(System.Boolean,VMS.TPS.Common.Model.API.TradeoffPlanGenerationIntermediateDoseMode,System.Boolean)"/> method.</item>
            <item>If the plan collection is generated successfully, the <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> property is set to true. The class is now ready for exploring different trade-offs.</item>
            <item>To evaluate the current trade-off, use the <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.GetObjectiveCost(VMS.TPS.Common.Model.API.TradeoffObjective)"/>, <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CurrentDose"/>, and <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.GetStructureDvh(VMS.TPS.Common.Model.API.Structure)"/> methods.</item>
            <item>To explore different trade-offs, use the <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.SetObjectiveCost(VMS.TPS.Common.Model.API.TradeoffObjective,System.Double)"/> method to reduce the cost of any objective and use the <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.SetObjectiveUpperRestrictor(VMS.TPS.Common.Model.API.TradeoffObjective,System.Double)"/> method to prevent the cost of an objective from exceeding a specified limit.</item>
            <item>Save the trade-off exploration results by calling the <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.ApplyTradeoffExplorationResult"/> method. The method also applies the trade-off exploration result to the plan setup for IMRT plans.</item>
            <item>In case of a VMAT plan, call the <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CreateDeliverableVmatPlan(System.Boolean)"/> method to apply the trade-off exploration result to the plan setup.</item>
            <item>To resume the trade-off exploration from a saved plan collection, call the <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.LoadSavedPlanCollection"/> method.</item>
            </list>
            </example>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.#ctor(VMS.TPS.Common.Model.API.ExternalPlanSetup,VMS.TPS.Common.Model.ILicenseManager,VMS.TPS.Common.BusinessLogic.Interface.IMcoController,VMS.TPS.Common.BusinessLogic.Interface.IMcoRuleValidator)">
            <summary>
            Creates a trade-off exploration context for a given plan. Acquires an MCO license for the lifetime of the application.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.LoadSavedPlanCollection">
            <summary>
            Loads a previously saved plan collection and sets <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> to true.
            </summary>
            <returns>True if the plan collection was successfully loaded from the database.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CreatePlanCollection(System.Boolean,VMS.TPS.Common.Model.API.TradeoffPlanGenerationIntermediateDoseMode,System.Boolean)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license]
            Creates a plan collection for trade-off exploration and sets <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> to true.
            Note: This operation is a long-running task because it involves optimizing a set of Pareto plans.
            </summary>
            <param name="continueOptimization">
            True if the starting point for the trade-off exploration should be created by continuing optimization
            for the existing plan. Otherwise, the starting point is created by starting optimization from the beginning.
            </param>
            <param name="intermediateDoseMode">Specifies which intermediate dose mode is used for plan generation.</param>
            <param name="useHybridOptimizationForVmat"> 
            True if VMAT-IMRT hybrid optimization should be used in VMAT plan generation. 
            Otherwise native VMAT optimization is used.</param>
            <returns>True if plan collection was successfully created.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.GetObjectiveCost(VMS.TPS.Common.Model.API.TradeoffObjective)">
            <summary>
            Gets the current relative cost of a trade-off objective. The costs are normalized to the range [0,1].
            If <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> is false, <see cref="F:System.Double.NaN"/> is returned as the cost.
            </summary>
            <param name="objective">Trade-off objective for which to get the cost.</param>
            <returns>Current relative cost [0,1] of the given trade-off objective.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.GetObjectiveLowerLimit(VMS.TPS.Common.Model.API.TradeoffObjective)">
            <summary>
            Gets the lower limit value for a trade-off objective. It is not possible to set the cost value of the objective below this value.
            The range of the objective may be limited because one or more objective has a restrictor (<see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.SetObjectiveUpperRestrictor(VMS.TPS.Common.Model.API.TradeoffObjective,System.Double)"/>) set.
            If <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> is false, <see cref="F:System.Double.NaN"/> is returned as the cost.
            </summary>
            <param name="objective">Trade-off objective for which to get the lower limit.</param>
            <returns>Lower limit [0,1] of the given trade-off objective</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.GetObjectiveUpperLimit(VMS.TPS.Common.Model.API.TradeoffObjective)">
            <summary>
            Gets the upper limit value for a trade-off objective. It is not possible to set the cost value of the objective above this value.
            The range of the objective may be limited because one or more objective has a restrictor (<see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.SetObjectiveUpperRestrictor(VMS.TPS.Common.Model.API.TradeoffObjective,System.Double)"/>) set.
            If <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> is false, <see cref="F:System.Double.NaN"/> is returned as the cost.
            </summary>
            <param name="objective">Trade-off objective for which to get the upper limit.</param>
            <returns>Upper limit [0,1] of the given trade-off objective.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.GetObjectiveUpperRestrictor(VMS.TPS.Common.Model.API.TradeoffObjective)">
            <summary>
            Gets the current upper limit of a trade-off objective. The limits are normalized to the range [0,1].
            If <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> is false, <see cref="F:System.Double.NaN"/> is returned as the cost.
            </summary>
            <param name="objective">Trade-off objective to get the upper limit.</param>
            <returns>Current upper limit [0,1] of the given trade-off objective.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.SetObjectiveCost(VMS.TPS.Common.Model.API.TradeoffObjective,System.Double)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license]
            A single trade-off objective specifies a one dimensional subspace of the Pareto surface.
            By adjusting the relative cost of the objective, it is possible to move in this one dimensional subspace.
            The difference between the current relative cost
            and the new relative cost specifies the direction of the movement. If the difference is negative, the movement is towards the extreme case where the given
            trade-off objective is emphasized at the cost of all other objectives. If the difference is positive, the movement is away from the extreme case.
            If <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> is false, the call to <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.SetObjectiveCost(VMS.TPS.Common.Model.API.TradeoffObjective,System.Double)"/> is ignored.
            </summary>
            <param name="tradeoffObjective">Trade-off objective that specifies the one dimensional subspace.</param>
            <param name="cost">
            The relative cost is defined as an interval [0,1]. A smaller value gives more emphasis to the given trade-off objective.
            </param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.SetObjectiveUpperRestrictor(VMS.TPS.Common.Model.API.TradeoffObjective,System.Double)">
            <summary>
            Sets an upper limit for a trade-off objective. The limits are normalized to the range [0,1].
            If <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> is false, the call to <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.SetObjectiveUpperRestrictor(VMS.TPS.Common.Model.API.TradeoffObjective,System.Double)"/> is ignored.
            </summary>
            <param name="tradeoffObjective">Optimization objective selected for trade-off exploration. This trade-off objective specifies the one dimensional subspace of the Pareto surface.</param>
            <param name="restrictorValue">New upper limit [0,1] of the given trade-off objective.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.ResetToBalancedPlan">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license]
            Resets the costs of a trade-off objective to correspond to the balanced plan.
            If <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> is false, the call to <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.ResetToBalancedPlan"/> is ignored.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.GetStructureDvh(VMS.TPS.Common.Model.API.Structure)">
            <summary>
            Calculates a DVH for a given structure based on the dose at the current location on the Pareto surface (current trade-offs).
            If <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> is false, the call to <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.GetStructureDvh(VMS.TPS.Common.Model.API.Structure)"/> returns null.
            </summary>
            <param name="structure">Structure for which the DVH is calculated.</param>
            <returns><see cref="T:VMS.TPS.Common.Model.API.DVHData"/> if the current location on the Pareto surface is valid. Otherwise, null.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.AddTargetHomogeneityObjective(VMS.TPS.Common.Model.API.Structure)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license]
            Creates a homogeneity objective for a given target structure to be used as a trade-off objective.
            Only target structures may have a homogeneity objective.
            Adding a new trade-off objective sets <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> to false, as it invalidates the current plan collection.
            </summary>
            <param name="targetStructure">Structure for which the homogeneity objective is created.</param>
            <returns>True if the structure was a target and the objective was successfully created.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.AddTradeoffObjective(VMS.TPS.Common.Model.API.Structure)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license]
            Creates a trade-off objective from all objectives associated with the given structure.
            Targets cannot be used in trade-off exploration at the structure level.
            Structures that do not have objectives or are not included in the plan cannot be 
            added as trade-off objectives.
            Adding a new trade-off objective sets <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> to false, as it invalidates the current plan collection.
            </summary>
            <param name="structure">Structure to be added as a trade-off objective.</param>
            <returns>True if the structure was successfully added as a trade-off objective.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.AddTradeoffObjective(VMS.TPS.Common.Model.API.OptimizationObjective)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license]
            Creates a trade-off objective from an individual optimization objective.
            Adding a new trade-off objective sets <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> to false, as it invalidates the current plan collection.
            </summary>
            <param name="objective">Objective to be added as a trade-off objective.</param>
            <returns>True if the objective was successfully added.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.RemoveTradeoffObjective(VMS.TPS.Common.Model.API.TradeoffObjective)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license]
            Removes the given trade-off objective.
            Removing the trade-off objective invalidates the current plan collection and sets <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> to false.
            </summary>
            <param name="tradeoffObjective">Trade-off objective to be removed.</param>
            <returns>True if the objective was successfully removed.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.RemoveTargetHomogeneityObjective(VMS.TPS.Common.Model.API.Structure)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license]
            Removes the homogeneity trade-off objective of the given target structure.
            Removing the trade-off objective invalidates the current plan collection and sets <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> to false.
            </summary>
            <param name="targetStructure">Target structure for which the homogeneity objective is removed.</param>
            <returns>True if the objective was successfully removed.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.RemoveTradeoffObjective(VMS.TPS.Common.Model.API.Structure)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license]
            Removes the trade-off objective of the given structure.
            Removing the trade-off objective invalidates the current plan collection and sets <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> to false.
            </summary>
            <param name="structure">Structure for which the trade-off objective is removed.</param>
            <returns>True if the trade-off objective for the structure was successfully removed.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.RemovePlanCollection">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license]
            Removes the plan collection from the plan setup and database. 
            Removing the plan collection sets <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> to false.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.RemoveAllTradeoffObjectives">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license]
            Removes all the trade-off objectives of the current plan collection.
            Removing all trade-off objectives invalidates the current plan collection and sets <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> to false.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.ApplyTradeoffExplorationResult">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license]
            Saves the trade-off exploration result. 
            Also applies the trade-off exploration result to the plan setup for IMRT plans.
            For VMAT plans, to apply the results to the plan setup, an additional call to the 
            <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CreateDeliverableVmatPlan(System.Boolean)"/> method is needed.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CreateDeliverableVmatPlan(System.Boolean)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license]
            Applies the trade-off exploration result to the plan setup for VMAT plans.
            </summary>
            <param name="useIntermediateDose">True if intermediate dose is used when creating the VMAT plan.</param>
            <returns>True if a deliverable VMAT plan was successfully created.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection">
            <summary>
            True if the trade-off exploration context has a plan collection, so that the trade-offs can be explored using the <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CreatePlanCollection(System.Boolean,VMS.TPS.Common.Model.API.TradeoffPlanGenerationIntermediateDoseMode,System.Boolean)"/> method.
            This property is set to true when a plan collection is loaded successfully using <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.LoadSavedPlanCollection"/> or created using <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CreatePlanCollection(System.Boolean,VMS.TPS.Common.Model.API.TradeoffPlanGenerationIntermediateDoseMode,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CanLoadSavedPlanCollection">
            <summary>
            True if a previously saved plan collection can be loaded.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CanCreatePlanCollection">
            <summary>
            True if a plan collection can be created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CanUsePlanDoseAsIntermediateDose">
            <summary>
            True if plan dose can be used as intermediate dose in <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CreatePlanCollection(System.Boolean,VMS.TPS.Common.Model.API.TradeoffPlanGenerationIntermediateDoseMode,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CanUseHybridOptimizationInPlanGeneration">
            <summary>
            True if VMAT-IMRT hybrid optimization can be used in <see cref="M:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CreatePlanCollection(System.Boolean,VMS.TPS.Common.Model.API.TradeoffPlanGenerationIntermediateDoseMode,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.TradeoffObjectiveCandidates">
            <summary>
            Available optimization objectives that can be selected for trade-off exploration in multi-criteria optimization.
            </summary>
            <returns>IReadOnlyList&lt;<see cref="T:VMS.TPS.Common.Model.API.OptimizationObjective"/>&gt;</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.TradeoffObjectives">
            <summary>
            Trade-off objectives. If <see cref="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.HasPlanCollection"/> is false, <see cref="F:System.Double.NaN"/> is returned as the cost.
            </summary>
            <returns>IReadOnlyList&lt;<see cref="T:VMS.TPS.Common.Model.API.TradeoffObjective"/>&gt;</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.TradeoffStructureCandidates">
            <summary> 
            Available structures that can be selected for trade-off exploration in multi-criteria optimization. 
            Only organs at risk can be used for trade-off exploration at the structure level.
            </summary>
            <returns>IReadOnlyList&lt;<see cref="T:VMS.TPS.Common.Model.API.Structure"/>&gt;</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.TargetStructures">
            <summary>
            Target structures in trade-off exploration. 
            These structures cannot be selected for trade-off exploration at the structure level.
            Homogeneity indices only apply to the target structures.
            </summary>
            <returns>IReadOnlyList&lt;<see cref="T:VMS.TPS.Common.Model.API.Structure"/>&gt;</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TradeoffExplorationContext.CurrentDose">
            <summary>
            Dose at the current location on the Pareto surface (the current trade-offs).
            Returns null if no valid dose exists.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.TypeBasedIdValidator">
            <summary>
            A utility class for validating the data object identifier.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TypeBasedIdValidator.IsValidId(System.String,VMS.TPS.Common.Model.API.ApiDataObject,System.Text.StringBuilder)">
            <summary>
            Returns true if the given identifier is valid for the given data object.
            </summary>
            <param name="id">The new identifier to check.</param>
            <param name="dataObject">The data object for whom the new identifier is checked.</param>
            <param name="errorHint">The error string that is set if the validation failed.</param>
            <returns>true if the given identifier is valid for the given data object.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TypeBasedIdValidator.ThrowIfNotValidId(System.String,VMS.TPS.Common.Model.API.ApiDataObject)">
            <summary>
            Throws System.ArgumentException if the given identifier is not valid for the given data object.
            </summary>
            <param name="id">The new identifier to check.</param>
            <param name="dataObject">The data object for whom the new identifier is checked.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.User">
            <summary>
            Represents a user.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.User.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.User.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object. 
            </summary>
            <param name="obj">Object to compare with the current object</param>
            <returns>True if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.User.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.User.op_Equality(VMS.TPS.Common.Model.API.User,VMS.TPS.Common.Model.API.User)">
            <summary>
            The equality operator.
            </summary>
            <param name="a">First operand.</param>
            <param name="b">Second operand.</param>
            <returns>True if the given User is the same.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.User.op_Inequality(VMS.TPS.Common.Model.API.User,VMS.TPS.Common.Model.API.User)">
            <summary>
            The inequality operator.
            </summary>
            <param name="a">First operand.</param>
            <param name="b">Second operand.</param>
            <returns>True if the given User is not the same.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.User.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.User.Id">
            <summary>
            The identifier of the user.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.User.Language">
            <summary>
            The language of the user.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.User.Name">
            <summary>
            The display name of the user.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Diagnosis">
            <summary>
            Represents a diagnosis of the patient.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Diagnosis.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Diagnosis.ClinicalDescription">
            <summary>
            User-defined clinical description of the diagnosis.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Diagnosis.Code">
            <summary>
            The disease code from the specified code table.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Diagnosis.CodeTable">
            <summary>
            Identifies the coding system table, for example, ICD-9-CM.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.EstimatedDVH">
            <summary>
            Represents an estimated Dose Volume Histogram (DVH) curve.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.EstimatedDVH.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.EstimatedDVH.CurveData">
            <summary>
            The points of the estimated DVH curve.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.EstimatedDVH.PlanSetup">
            <summary>
            Parent plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.EstimatedDVH.PlanSetupId">
            <summary>
            ID of the parent plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.EstimatedDVH.Structure">
            <summary>
            Parent structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.EstimatedDVH.StructureId">
            <summary>
            ID of the parent structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.EstimatedDVH.TargetDoseLevel">
            <summary>
            Dose level of the associated target structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.EstimatedDVH.Type">
            <summary>
            Type of DVH estimate curve.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.EvaluationDose">
            <summary>
            Represents an evaluation dose that is connected to a plan that has no beams.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.EvaluationDose.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.EvaluationDose.DoseValueToVoxel(VMS.TPS.Common.Model.Types.DoseValue)">
            <summary>
            Converts the given dose value to the corresponding
            raw voxel value.
            </summary>
            <param name="doseValue">Dose value.</param>
            <returns>Value converted to voxel value.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.EvaluationDose.SetVoxels(System.Int32,System.Int32[0:,0:])">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] For an evaluation dose (the dose of a plan that has no beams), sets the voxels of the given dose plane.
            Create the evaluation dose first using <see cref="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CreateEvaluationDose">CreateEvaluationDose</see>.
            </summary>
            <param name="planeIndex">Zero-based index of the plane.</param>
            <param name="values">The plane of voxel values. The size of the array must conform to the X-size and Y-size of the dose.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ExternalBeamTreatmentUnit">
            <summary>
            Represents a treatment machine used for delivering external beam radiotherapy.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalBeamTreatmentUnit.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ExternalBeamTreatmentUnit.MachineModel">
            <summary>
            The model of the treatment unit.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ExternalBeamTreatmentUnit.MachineModelName">
            <summary>
            The displayed name of the treatment unit model.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ExternalBeamTreatmentUnit.MachineScaleDisplayName">
            <summary>
            The name of the scale used in the treatment unit.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ExternalBeamTreatmentUnit.OperatingLimits">
            <summary>
            Information about operating limits for a set of treatment unit parameters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ExternalBeamTreatmentUnit.SourceAxisDistance">
            <summary>
            The Source to Axis Distance (SAD).
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.IonBeam">
            <summary>
            Proton beam interface.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonBeam.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonBeam.GetEditableParameters">
            <summary>
            Returns a new editable copy of the ion beam parameters.
            The returned IonBeamParameters object is not updated if the beam parameters in the data model are changed,
            for example, by using another IonBeamParameters object.
            </summary>
            <returns>Returns a new parameters object. Its values are copied from the
            corresponding properties of this object.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.AirGap">
            <summary>
            The user-defined air gap in mm.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.DistalTargetMargin">
            <summary>
            Distal end margin, in mm.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.LateralMargins">
            <summary>
            The lateral margins of this field, in mm.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.LateralSpreadingDevices">
            <summary>
            The lateral spreading devices in this beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.NominalRange">
            <summary>
            The nominal range of the beam line, in mm.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.NominalSOBPWidth">
            <summary>
            The nominal width of the Spread Out Bragg Peak, in mm.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.OptionId">
            <summary>
            The identifier of the selected beam-line setting for proton beams. For a typical double scattering system, for example,
            an option is a combination of range modulator, second scatterer, and nominal energy that correspond to a broad proton beam
            with a certain range in patient and field size. Returns null if the option is undefined.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.PatientSupportId">
            <summary>
            Patient support identifier. Returns null if undefined.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.PatientSupportType">
            <summary>
            Patient support type.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.IonControlPoints">
            <summary>
            Gets the proton control points.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.ProximalTargetMargin">
            <summary>
            Proximal end margin, in mm.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.RangeModulators">
            <summary>
            The range modulator devices in this beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.RangeShifters">
            <summary>
            The range shifter devices in this beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.ScanMode">
            <summary>
            The method of beam scanning to be used during treatment.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.SnoutId">
            <summary>
            The Snout identifier. Returns null if undefined.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.TargetStructure">
            <summary>
            Returns the field target structure. Null if the field target is not defined (and axial margins are defined around the isocenter level).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.VirtualSADX">
            <summary>
            Virtual Source-to-Axis Distance X, in mm.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonBeam.VirtualSADY">
            <summary>
            Virtual Source-to-Axis Distance Y, in mm.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.IonControlPoint">
            <summary>
            Proton control point interface.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ControlPoint">
            <summary>
            Represents a point in a planned sequence of treatment beam parameters. See the definition of control points in a DICOM RT Beam.
            </summary>
            <remarks>
            Control points are discussed in DICOM PS 3.3 C.8.8.14. All beams have
            at least two control points. Note that some values may be NaN
            if they are not applicable to the treatment plan in question.
            </remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ControlPoint.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.Beam">
            <summary>
            Used for navigating to parent beam
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.CollimatorAngle">
            <summary>
            The orientation of the IEC BEAM LIMITING DEVICE coordinate system with
            respect to the IEC GANTRY coordinate system (in degrees).
            </summary>
            <remarks>
            The definition is adapted from DICOM PS 3.3 C.8.8.14
            "Beam Limiting Device Angle", but rotation direction is
            not specified explicitly.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.GantryAngle">
            <summary>
            The gantry angle of the radiation source. In other words, the orientation of the IEC GANTRY
            coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).
            </summary>
            <remarks>
            The definition is from DICOM PS 3.3 C.8.8.14 "Gantry Angle", but
            rotation direction does not change during treatment and it is
            specified in Beam.GantryDirection instead.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.Index">
            <summary>
            Control point index starting with zero. Even numbers represent start control points, and odd numbers represent stop control points.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.JawPositions">
            <summary>
            The positions of the beam collimator jaws (in mm) in the IEC BEAM LIMITING DEVICE
            coordinates.
            </summary>
            <remarks>
            The definition is adapted from DICOM PS 3.3 C.8.8.14
            "Leaf/Jaw Positions". The difference is that DICOM likens the
            collimator jaw positions with MLC leaf positions and places
            them in the same sequence.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.LeafPositions">
            <summary>
            The positions of the beam collimator leaf pairs (in mm) in the IEC BEAMLIMITING
            DEVICE coordinate axis appropriate to the device type. For example, the X-axis
            for MLCX and the Y-axis for MLCY. The two-dimensional array is
            indexed [bank, leaf] where the bank is either 0 or 1. Bank 0 represents
            the leaf bank to the negative MLC X direction, and bank 1 to the
            positive MLC X direction. If there is no MLC, a (0,0)-length array is
            returned.
            </summary>
            <remarks>
            The definition is adapted from DICOM PS 3.3 C.8.8.14
            "Leaf/Jaw Positions". The difference is that DICOM supports a
            position sequence for each collimator type while we support a position
            sequence for a single MLC plus four jaws.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.MetersetWeight">
            <summary>
            The cumulative meterset weight to this control point. The cumulative meterset
            weight for the first item in a control point sequence is zero.
            </summary>
            <remarks>
            The meterset at a given control point is equal to the beam meterset,
            multiplied by the cumulative meterset weight for the control point,
            divided by the final cumulative meterset weight.
            The definition is adapted from DICOM PS 3.3 C.8.8.14.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.PatientSupportAngle">
            <summary>
            The patient support angle. In other words, the orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE
            coordinate system (in degrees).
            </summary>
            <remarks>
            The definition is from DICOM PS 3.3 C.8.8.14 "Patient Support Angle",
            but here rotation direction is specified implicitly towards the
            shortest angle between the current and the next control point.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.TableTopLateralPosition">
            <summary>
            Table top lateral position in millimeters, in the IEC TABLE TOP coordinate system.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.TableTopLongitudinalPosition">
            <summary>
            Table top longitudinal position in millimeters, in the IEC TABLE TOP coordinate system.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.TableTopVerticalPosition">
            <summary>
            Table top vertical position in millimeters, in the IEC TABLE TOP coordinate system.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonControlPoint.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPoint.FinalSpotList">
            <summary>
            Gets a cached copy of the post-processed final spot list.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPoint.LateralSpreadingDeviceSettings">
            <summary>
            The lateral spreading device settings.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPoint.NominalBeamEnergy">
            <summary>
            Nominal beam energy, in megavolts.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPoint.NumberOfPaintings">
            <summary>
            The number of times the scan pattern shall be applied at the current control point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPoint.RangeModulatorSettings">
            <summary>
            The range modulator settings.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPoint.RangeShifterSettings">
            <summary>
            The range shifter settings.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPoint.RawSpotList">
            <summary>
            Gets a cached copy of the raw spot list.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPoint.ScanningSpotSizeX">
            <summary>
            The scanning spot size as calculated using the Full Width HalfMaximum (FWHM). The size is measured in air at isocenter in IEC GANTRY X direction (mm).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPoint.ScanningSpotSizeY">
            <summary>
            The scanning spot size as calculated using the Full Width HalfMaximum (FWHM). The size is measured in air at isocenter in IEC GANTRY Y direction (mm).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPoint.ScanSpotTuneId">
            <summary>
            User-supplied or machine code identifier for machine configuration to produce beam spot. This may be the nominal spot size or some other machine-specific value. Returns null if undefined.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPoint.SnoutPosition">
            <summary>
            The snout position, in mm.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.IonControlPointCollection">
            <summary>
            Represents a collection of machine parameters that describe
            the planned proton beam.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonControlPointCollection.GetEnumerator">
            <summary>
            Retrieves enumerator for IonControlPoints in the collection.
            </summary>
            <returns>Enumerator for IonControlPoints in the collection.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonControlPointCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPointCollection.Item(System.Int32)">
            <summary>
            Gets the specified IonControlPoint from the collection.
            </summary>
            <param name="index">Zero based index of the IonControlPoint to retrieve.</param>
            <returns>IonControlPoint at the given index.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPointCollection.Count">
            <summary>
            The number of control points in the collection.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.IonControlPointPair">
            <summary>
            An editable copy of a control point pair (the pair of the start control
            point with an even index, and the end control point with an odd index).
            </summary>
            <remarks>
            To apply the parameters, call the <see cref="M:VMS.TPS.Common.Model.API.Beam.ApplyParameters(VMS.TPS.Common.Model.API.BeamParameters)">ApplyParameters</see> method of the
            IonBeam class. The parameters contained in this class are simply
            copies, and they do not reflect the current state of the data model.
            </remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonControlPointPair.ResizeFinalSpotList(System.Int32)">
            <summary>
            Resizes the list of final spots.
            </summary>
            <param name="count">New length of the list.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonControlPointPair.ResizeRawSpotList(System.Int32)">
            <summary>
            Resizes the list of raw spots.
            </summary>
            <param name="count">New length of the list.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPointPair.EndControlPoint">
            <summary>
            The end control point in the pair, with an odd index.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPointPair.FinalSpotList">
            <summary>
            Gets a cached copy of the editable post-processed final spot list.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPointPair.NominalBeamEnergy">
            <summary>
            Nominal beam energy in megavolts.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPointPair.RawSpotList">
            <summary>
            Gets a cached copy of the editable raw spot list
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPointPair.StartControlPoint">
            <summary>
            Start control point in the pair, with an even index from zero.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPointPair.StartIndex">
            <summary>
            The index of the start control point in the pair. The index should be an even number
            starting from zero.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.IonControlPointPairCollection">
            <summary>
            A collection of editable copies of control point pairs that describe
            the planned proton beam.
            </summary>
            <remarks>
            To apply the parameters, call the <see cref="M:VMS.TPS.Common.Model.API.Beam.ApplyParameters(VMS.TPS.Common.Model.API.BeamParameters)">ApplyParameters</see> method of the
            IonBeam class. The parameters contained in this class are simply
            copies, and they do not reflect the current state of the data model.
            </remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonControlPointPairCollection.GetEnumerator">
            <summary>
            Retrieves enumerator for IonControlPointPairs in the collection.
            </summary>
            <returns>Enumerator for IonControlPointPairs in the collection.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPointPairCollection.Item(System.Int32)">
            <summary>
            Gets the specified IonControlPointPair from the collection.
            </summary>
            <param name="index">Zero based index of the IonControlPointPair to retrieve.</param>
            <returns>IonControlPointPair at the given index.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPointPairCollection.Count">
            <summary>
            The number of control point pairs in the collection.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.IonControlPointParameters">
            <summary>
            An editable copy of the parameters of a proton control point.
            </summary>
            <remarks>
            To apply the parameters, call the ApplyParameters method of the
            Beam class. Because the parameters are simple copies, they do not
            reflect the current state of the data model.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPointParameters.FinalSpotList">
            <summary>
            Gets a cached copy of the post-processed final spot list.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonControlPointParameters.RawSpotList">
            <summary>
            Gets a cached copy of the raw spot list.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.IonSpot">
            <summary>
            The proton scanning spot interface that contains the 3D spot position and spot weight.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonSpot.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonSpot.Position">
            <summary>
            Read-only spot position in X, Y, and Z directions.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonSpot.Weight">
            <summary>
            Read-only spot weight.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.IonSpotCollection">
            <summary>
            Interface for the proton scanning spot list.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonSpotCollection.GetEnumerator">
            <summary>
            Retrieves enumerator for IonSpots in the collection.
            </summary>
            <returns>Enumerator for IonSpots in the collection.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonSpotCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonSpotCollection.Item(System.Int32)">
            <summary>
            Gets the specified IonSpot from the collection.
            </summary>
            <param name="index">Zero based index of the IonSpot to retrieve.</param>
            <returns>IonSpot at the given index.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonSpotCollection.Count">
            <summary>
            The number of scanning spots in this collection (spot list).
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.IonSpotParameters">
            <summary>
            Interface for the proton scanning spot that contains the 3D spot position and spot weight.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonSpotParameters.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonSpotParameters.Weight">
            <summary>
            Editable spot weight.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonSpotParameters.X">
            <summary>
            Editable X position.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonSpotParameters.Y">
            <summary>
            Editable Y position.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.IonSpotParametersCollection">
            <summary>
            Interface for the editable proton scanning spot list.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonSpotParametersCollection.GetEnumerator">
            <summary>
            Retrieves enumerator for IonSpotParameterss in the collection.
            </summary>
            <returns>Enumerator for IonSpotParameterss in the collection.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.IonSpotParametersCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonSpotParametersCollection.Item(System.Int32)">
            <summary>
            Gets the specified IonSpotParameters from the collection.
            </summary>
            <param name="index">Zero based index of the IonSpotParameters to retrieve.</param>
            <returns>IonSpotParameters at the given index.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.IonSpotParametersCollection.Count">
            <summary>
            The number of editable scanning spots in this collection (spot list).
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.LateralSpreadingDevice">
            <summary>
            The lateral spreading device.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.LateralSpreadingDevice.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.LateralSpreadingDevice.Type">
            <summary>
            The type of the device.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.LateralSpreadingDeviceSettings">
            <summary>
            Settings for the lateral spreading device.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.LateralSpreadingDeviceSettings.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.LateralSpreadingDeviceSettings.IsocenterToLateralSpreadingDeviceDistance">
            <summary>
            Distance from the isocenter to the downstream edge of the lateral spreading device (mm) at the current control point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.LateralSpreadingDeviceSettings.LateralSpreadingDeviceSetting">
            <summary>
            Machine-specific setting.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.LateralSpreadingDeviceSettings.LateralSpreadingDeviceWaterEquivalentThickness">
            <summary>
            Water equivalent thickness (in mm) of the lateral spreading device at the central axis for the beam energy incident upon the device.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.LateralSpreadingDeviceSettings.ReferencedLateralSpreadingDevice">
            <summary>
            The referenced lateral spreading device.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationEUDObjective">
            <summary>
            A gEUD objective is an exact, upper or lower objective.
            An exact gEUD objective defines an exact dose value that a target structure should receive.
            An upper gEUD objective defines the maximum dose value that a structure should receive.
            A lower gEUD objective defines the minimum dose value that a target structure should receive.
            
            Generalized Equivalent Uniform Dose (gEUD) is a uniform dose that, if delivered
            over the same number of fractions, yields the same radiobiological effect as the
            non-uniform dose distribution of interest.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationObjective">
            <summary>
            Provides a common base type for all structure-specific optimization objectives.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationObjective.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationObjective.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationObjective.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationObjective.op_Equality(VMS.TPS.Common.Model.API.OptimizationObjective,VMS.TPS.Common.Model.API.OptimizationObjective)">
            <summary>
            The equality operator.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>True if the given objects are the same.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationObjective.op_Inequality(VMS.TPS.Common.Model.API.OptimizationObjective,VMS.TPS.Common.Model.API.OptimizationObjective)">
            <summary>
            The inequality operator.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>True if the given objects are different.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationObjective.Operator">
            <summary>
            Specifies the type of the objective (upper, lower, exact).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationObjective.Priority">
            <summary>
            The priority of the objective as a positive double.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationObjective.Structure">
            <summary>
            The structure to which this optimization objective belongs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationObjective.StructureId">
            <summary>
            The identifier of the structure.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationEUDObjective.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationEUDObjective.Dose">
            <summary>
            The dose value for the objective.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationEUDObjective.ParameterA">
            <summary>
            A tissue-specific parameter that illustrates the effect of the volume on the dose.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationExcludeStructureParameter">
            <summary>
            Structures that have this parameter are excluded from the optimization.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationParameter">
            <summary>
            Provides a common base type for all optimization parameters.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationParameter.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationParameter.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationParameter.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationParameter.op_Equality(VMS.TPS.Common.Model.API.OptimizationParameter,VMS.TPS.Common.Model.API.OptimizationParameter)">
            <summary>
            The equality operator.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>True if the given objects are the same.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationParameter.op_Inequality(VMS.TPS.Common.Model.API.OptimizationParameter,VMS.TPS.Common.Model.API.OptimizationParameter)">
            <summary>
            The inequality operator.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>True if the given objects are different.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationExcludeStructureParameter.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationExcludeStructureParameter.Structure">
            <summary>
            The structure to be excluded.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationIMRTBeamParameter">
            <summary>
            Beam-specific optimization parameter for IMRT optimization.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationIMRTBeamParameter.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationIMRTBeamParameter.Beam">
            <summary>
            The beam to which this parameter belongs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationIMRTBeamParameter.BeamId">
            <summary>
            The identifier of the beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationIMRTBeamParameter.Excluded">
            <summary>
            True if the beam is excluded from the optimization.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationIMRTBeamParameter.FixedJaws">
            <summary>
            If true, the collimator jaw positions of the beam remain the same during the optimization.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationIMRTBeamParameter.SmoothX">
            <summary>
            A smoothing parameter that controls the fluence profiles.
            A high value smoothes the fluence more than a low value.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationIMRTBeamParameter.SmoothY">
            <summary>
            A smoothing parameter that controls the fluence profiles.
            A high value smoothes the fluence more than a low value.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationJawTrackingUsedParameter">
            <summary>
            An optimization parameter for using jaw tracking in VMAT optimization.
            The parameter exists if OptimizationSetup.UseJawTracking has been set to true.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationJawTrackingUsedParameter.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationLineObjective">
            <summary>
            A line objective is a collection of point objectives that have the same priority.
            It is used to limit the dose in a given structure.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationLineObjective.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationLineObjective.CurveData">
            <summary>
            The points in the line objective.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationMeanDoseObjective">
            <summary>
            A mean objective defines the mean dose that should not be exceeded. The mean objective is
            used to decrease the dose that a structure receives.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationMeanDoseObjective.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationMeanDoseObjective.Dose">
            <summary>
            The dose value for the objective.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationNormalTissueParameter">
            <summary>
            An optimization parameter for the normal tissue objective.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationNormalTissueParameter.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationNormalTissueParameter.DistanceFromTargetBorderInMM">
            <summary>
            Determines the distance in millimeters from the target border where the evaluation of the normal tissue objective dose begins.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationNormalTissueParameter.EndDosePercentage">
            <summary>
            Determines the relative dose level in the normal tissue objective in the area furthest from the target border.
            Expressed in percentage. The value is positive. 100% is specified as 100.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationNormalTissueParameter.FallOff">
            <summary>
            Determines the steepness of the normal tissue objective fall-off.
            The value is positive.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationNormalTissueParameter.IsAutomatic">
            <summary>
            Returns True if an automatic normal tissue objective (NTO) is used.  The automatic
            NTO adapts to the patient anatomy and the optimization
            objectives, and automatically determines the dose fall-off criteria.
            
            When an automatic NTO is used, the other properties of this object, except Priority, are not used.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationNormalTissueParameter.Priority">
            <summary>
            Determines the relative importance of the normal tissue objective in relation to other optimization objectives.
            The value is positive.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationNormalTissueParameter.StartDosePercentage">
            <summary>
            Determines the relative dose level in the normal tissue objective at the target border,
            expressed in percentage of the upper objective for the target.
            The value is positive. 100% is specified as 100.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationPointCloudParameter">
            <summary>
            Structure-specific parameter for point cloud optimization.
            
            Relevant if the optimization algorithm uses a point cloud.
            The point cloud parameters are automatically created with default values
            when you add other structure-specific parameters or objectives in the optimization setup.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationPointCloudParameter.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationPointCloudParameter.PointResolutionInMM">
            <summary>
            The point cloud resolution.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationPointCloudParameter.Structure">
            <summary>
            The structure whose parameters these are.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationPointObjective">
            <summary>
            A point objective is either an upper or lower objective.
            An upper objective is used to limit the dose in a given structure.
            A lower objective is used to define the desired dose levels in target structures.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationPointObjective.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationPointObjective.Dose">
            <summary>
            The dose value for the objective.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationPointObjective.Volume">
            <summary>
            Percentage of the structure volume (0-100 %) to receive the dose.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.PlanningItemDose">
            <summary>
            Represents a dose that is connected to a plan setup or a plan sum.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanningItemDose.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.PlanSumComponent">
            <summary>
            Represents a component plan of a plan sum.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSumComponent.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSumComponent.PlanSetupId">
            <summary>
            The unique identification of the plan within the course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSumComponent.PlanSumOperation">
            <summary>
            The summing operation (+ or -) that defines how the dose of a component plan contributes to the plan sum.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSumComponent.PlanWeight">
            <summary>
            The weight of a component plan included in the plan sum.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.PlanTreatmentSession">
            <summary>
            Plan in the treatment session.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanTreatmentSession.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanTreatmentSession.PlanSetup">
            <summary>
            Scheduled or treated plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanTreatmentSession.Status">
            <summary>
            Plan status in the treatment session.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanTreatmentSession.TreatmentSession">
            <summary>
            Treatment session.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.PlanUncertainty">
            <summary>
            Provides access to Plan Uncertainty parameters. For more information, see Eclipse Photon and Electron Instructions for Use.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanUncertainty.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanUncertainty.GetDVHCumulativeData(VMS.TPS.Common.Model.API.Structure,VMS.TPS.Common.Model.Types.DoseValuePresentation,VMS.TPS.Common.Model.Types.VolumePresentation,System.Double)">
            <summary>
            Returns cumulative Dose Volume Histogram (DVH) data for this uncertainty plan.
            </summary>
            <param name="structure">Structure, for which the DVH data is requested.</param>
            <param name="dosePresentation">Requested dose presentation mode (absolute or relative). Note that only
            absolute dose is supported for PlanSums.</param>
            <param name="volumePresentation">Requested volume presentation mode.</param>
            <param name="binWidth">Requested width of the bin.</param>
            <returns>DVHData object that contains the requested DVH information or null if DVH could not be calculated.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanUncertainty.BeamUncertainties">
            <summary>
            Collection of beam uncertainty doses.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanUncertainty.CalibrationCurveError">
            <summary>
            The calibration curve error of the plan uncertainty in percentage. Returns 100 for 100%. NaN if not defined.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanUncertainty.DisplayName">
            <summary>
            The display name of the plan variation, including the parameter values.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanUncertainty.Dose">
            <summary>
            The dose of this plan variation.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanUncertainty.IsocenterShift">
            <summary>
            The isocenter shift of the plan uncertainty.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanUncertainty.UncertaintyType">
            <summary>
            Type of uncertainty, which determines how and in what context the defined parameters are to be used.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.RadioactiveSource">
            <summary>
            Represents a radioactive source installed into a <see cref="T:VMS.TPS.Common.Model.API.BrachyTreatmentUnit">brachytherapy treatment unit</see>
            or a seed of a <see cref="T:VMS.TPS.Common.Model.API.SeedCollection">seed collection</see>.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.RadioactiveSource.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSource.CalibrationDate">
            <summary>
            The calibration date for the strength of this radioactive source.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSource.NominalActivity">
            <summary>
            Defines whether source decay is accounted for in treatment planning.
            If the value is true, the dose calculation uses the source at its calibration activity (nominal activity).
            If the value is false, the source strength is decayed to the treatment activity based on the treatment date of the plan where the source is used.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSource.RadioactiveSourceModel">
            <summary>
            The brachytherapy radioactive source model associated with this radioactive source.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSource.SerialNumber">
            <summary>
            The serial number of this radioactive source.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSource.Strength">
            <summary>
            The source strength for the radioactive source on the calibration date in cGy cm^2/h.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.RadioactiveSourceModel">
            <summary>
            The radioactive source model represents the details of the radioactive source used in brachytherapy. It encapsulates
            the source isotope, dimensions, and dose calculation parameters.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.RadioactiveSourceModel.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.ActiveSize">
            <summary>
            The active size of the modeled radioactive source in x, y, and z dimensions in millimeters.
            x represents the source width, y represents the source height, and z the source length.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.ActivityConversionFactor">
            <summary>
            The activity-kerma conversion factor is used for converting activity (in mCi) to air-kerma strength (in U = cGy cm^2 / h).
            The unit of the factor is [U / mCi].
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.CalculationModel">
            <summary>
            The dose calculation type used with this source model. Possible values are "Point source" and "Linear source".
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.DoseRateConstant">
            <summary>
            A conversion factor from the air-kerma strength to the dose rate in tissue. The unit of the dose rate constant is cGy / (h U).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.HalfLife">
            <summary>
            The half life of the isotope in seconds.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.LiteratureReference">
            <summary>
            The reference to the scientific publications on which the source model is based.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.Manufacturer">
            <summary>
            The manufacturer of the modeled radioactive source.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.SourceType">
            <summary>
            The DICOM source type. Possible values are "Point", "Line", "Cylinder", and "Sphere".
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.Status">
            <summary>
            The status of this source model. The status can be either "Unapproved", "Commissioning", "Approved", or "Retired".
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.StatusDate">
            <summary>
            The time when the status of the source model was set.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.StatusUserName">
            <summary>
            The name of the user who last set the status of the source model.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.RangeModulator">
            <summary>
            The range modulator device.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.RangeModulator.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RangeModulator.Type">
            <summary>
            The type of the device.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.RangeModulatorSettings">
            <summary>
            Range modulator settings.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.RangeModulatorSettings.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RangeModulatorSettings.IsocenterToRangeModulatorDistance">
            <summary>
            Distance from the isocenter to the downstream edge of the range modulator (mm) at the current control point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RangeModulatorSettings.RangeModulatorGatingStartValue">
            <summary>
            Start position defines the range modulator position at which the beam is switched on.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RangeModulatorSettings.RangeModulatorGatingStarWaterEquivalentThickness">
            <summary>
            Water equivalent thickness (in mm) of the range modulator at the position specified by Range Modulator Gating Start Value.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RangeModulatorSettings.RangeModulatorGatingStopValue">
            <summary>
            Stop position defines the range modulator position at which the beam is switched off.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RangeModulatorSettings.RangeModulatorGatingStopWaterEquivalentThickness">
            <summary>
            Water equivalent thickness (in mm) of the range modulator at the position specified by Range Modulator Gating Stop Value.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RangeModulatorSettings.ReferencedRangeModulator">
            <summary>
            The referenced range modulator.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.RangeShifter">
            <summary>
            The range shifter device.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.RangeShifter.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RangeShifter.Type">
            <summary>
            The type of the device.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.RangeShifterSettings">
            <summary>
            Range shifter settings.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.RangeShifterSettings.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RangeShifterSettings.IsocenterToRangeShifterDistance">
            <summary>
            Distance from the isocenter to the downstream edge of the range shifter (mm) at the current control point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RangeShifterSettings.RangeShifterSetting">
            <summary>
            Machine-specific setting.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RangeShifterSettings.RangeShifterWaterEquivalentThickness">
            <summary>
            Water equivalent thickness (in mm) of the range shifter at the central axis for the beam energy incident upon the device.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RangeShifterSettings.ReferencedRangeShifter">
            <summary>
            The referenced range shifter.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.RTPrescription">
            <summary>
            Represents a prescription.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.RTPrescription.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.BolusFrequency">
            <summary>
            Bolus frequency (how often the bolus is present in the field). For example, daily.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.BolusThickness">
            <summary>
            Thickness of the bolus to be used.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.Energies">
            <summary>
            The energies in the prescription.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.EnergyModes">
            <summary>
            The energy modes in the prescription.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.Gating">
            <summary>
            Gating information.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.LatestRevision">
            <summary>
            Gets the latest revision of the current RT prescription.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.Notes">
            <summary>
            Additional notes.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.NumberOfFractions">
            <summary>
            Number of fractions, optional.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.OrgansAtRisk">
            <summary>
            Gets the organs at risk of the current RT prescription.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.PhaseType">
            <summary>
            Type of the phase (primary/boost).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.PredecessorPrescription">
            <summary>
            Gets the previous version of the RT prescription if it exists.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.RevisionNumber">
            <summary>
            Revision number of the prescription.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.SimulationNeeded">
            <summary>
            Indicates if simulations need to be done before treatment planning.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.Site">
            <summary>
            The treatment site in the prescription.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.Status">
            <summary>
            Prescription status.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.TargetConstraintsWithoutTargetLevel">
            <summary>
            Coverage constraints for targets with no prescribed dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.Targets">
            <summary>
            Gets the targets of the current prescription.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescription.Technique">
            <summary>
            Treatment technique to be used.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.RTPrescriptionConstraint">
            <summary>
            Represents a coverage constraint for an RT prescription.
            <list type="table"><listheader><term>Type of the constraint</term><term>Applies to</term><term>Example</term><term>Value1</term><term>Unit1</term><term>Value2</term><term>Unit2</term></listheader><item><term><see cref="F:VMS.TPS.Common.Model.Types.RTPrescriptionConstraintType.MinimumDose" /></term><term>Targets</term><term>Minimum dose &gt; 95% (of the target dose).</term><term>95</term><term>%</term><term>null</term><term>null</term></item><item><term><see cref="F:VMS.TPS.Common.Model.Types.RTPrescriptionConstraintType.MaximumDose" /></term><term>Targets</term><term>Maximum dose &lt; 102% (of the target dose).</term><term>102</term><term>%</term><term>null</term><term>null</term></item><item><term><see cref="F:VMS.TPS.Common.Model.Types.RTPrescriptionConstraintType.MaximumDose" /></term><term>Organs at risk</term><term>Maximum dose &lt; 50 Gy.</term><term>50</term><term>Gy</term><term>null</term><term>null</term></item><item><term><see cref="F:VMS.TPS.Common.Model.Types.RTPrescriptionConstraintType.MinimumDvhDose" /></term><term>Targets</term><term>At least 95% of structure gets 98% of the target dose, i.e. V98% &gt; 95%.</term><term>98</term><term>%</term><term>95</term><term>%</term></item><item><term><see cref="F:VMS.TPS.Common.Model.Types.RTPrescriptionConstraintType.MaximumDvhDose" /></term><term>Targets</term><term>No more than 95% of structure gets 102% of the target dose, i.e. V102% &lt; 95%.</term><term>102</term><term>%</term><term>95</term><term>%</term></item><item><term><see cref="F:VMS.TPS.Common.Model.Types.RTPrescriptionConstraintType.MaximumMeanDose" /></term><term>Organs at risk</term><term>Maximum mean dose &lt; 45 Gy.</term><term>45</term><term>Gy</term><term>null</term><term>null</term></item><item><term><see cref="F:VMS.TPS.Common.Model.Types.RTPrescriptionConstraintType.FreeText" /></term><term>Organs at risk</term><term>Free text constraint (a &lt; b).</term><term>a</term><term>null</term><term>b</term><term>null</term></item></list></summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.RTPrescriptionConstraint.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescriptionConstraint.ConstraintType">
            <summary>
            Type of the constraint.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescriptionConstraint.Unit1">
            <summary>
            Gy, %, or null <see cref="F:VMS.TPS.Common.Model.Types.RTPrescriptionConstraintType.FreeText" /></summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescriptionConstraint.Unit2">
            <summary>
            Gy, %, or null <see cref="F:VMS.TPS.Common.Model.Types.RTPrescriptionConstraintType.FreeText" /></summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescriptionConstraint.Value1">
            <summary>
            First numerical (or free text) part of the constraint.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescriptionConstraint.Value2">
            <summary>
            Second numerical (or free text) part of the constraint.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.RTPrescriptionOrganAtRisk">
            <summary>
            Represents an organ at risk structure.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.RTPrescriptionOrganAtRisk.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescriptionOrganAtRisk.Constraints">
            <summary>
            Constraints.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescriptionOrganAtRisk.OrganAtRiskId">
            <summary>
            Structure identifier of the organ at risk.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.RTPrescriptionTarget">
            <summary>
            Represents a prescription target.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.RTPrescriptionTarget.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescriptionTarget.Constraints">
            <summary>
            Coverage constraints.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescriptionTarget.DosePerFraction">
            <summary>
            Dose per fraction for this target.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescriptionTarget.NumberOfFractions">
            <summary>
            The number of fractions in the prescription.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescriptionTarget.TargetId">
            <summary>
            The ID of the target volume.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescriptionTarget.Type">
            <summary>
            Type of the prescription target. It can be Isocenter, IsodoseLine, Volume or Depth.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescriptionTarget.Value">
            <summary>
            Defined when the target type is IsodoseLine or Depth. Unit is % for IsodoseLine or mm for Depth. Not defined for other prescription types.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.RTPrescriptionTargetConstraints">
            <summary>
            Represents target structure constraints.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.RTPrescriptionTargetConstraints.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescriptionTargetConstraints.Constraints">
            <summary>
            Constraints.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RTPrescriptionTargetConstraints.TargetId">
            <summary>
            Identifier of the target structure.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.SearchBodyParameters">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Parameters for the Search Body feature.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SearchBodyParameters.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SearchBodyParameters.LoadDefaults">
            <summary>
            Loads the default values of the Search Body parameters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SearchBodyParameters.FillAllCavities">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Defines whether all cavities are filled.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SearchBodyParameters.KeepLargestParts">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Defines whether the largest part(s) of the Body structure are kept.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SearchBodyParameters.LowerHUThreshold">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] The lower threshold of the Hounsfield Unit value in the CT for the Search Body feature.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SearchBodyParameters.MREdgeThresholdHigh">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Higher edge threshold for MR images.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SearchBodyParameters.MREdgeThresholdLow">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Lower edge threshold for MR images.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SearchBodyParameters.NumberOfLargestPartsToKeep">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] The number of the largest parts in the Body structure that are kept.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SearchBodyParameters.PreCloseOpenings">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Defines whether to connect structure parts before extraction.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SearchBodyParameters.PreCloseOpeningsRadius">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Radius setting for PreCloseOpenings.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SearchBodyParameters.PreDisconnect">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Defines whether to disconnect structure parts before extraction.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SearchBodyParameters.PreDisconnectRadius">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Radius setting for PreDisconnect.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SearchBodyParameters.Smoothing">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Whether to do smoothing.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SearchBodyParameters.SmoothingLevel">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Smoothing levels.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.SeedCollection">
            <summary>
            Represents a collection of brachytherapy <see cref="T:VMS.TPS.Common.Model.API.SourcePosition">seed positions</see>.
            Each position is also associated with a radioactive source.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SeedCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SeedCollection.BrachyFieldReferencePoints">
            <summary>
            A collection of brachy field reference points.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SeedCollection.Color">
            <summary>
            The color of the seeds in the seed collection in the views.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SeedCollection.SourcePositions">
            <summary>
            The source positions in this collection in creation order.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.SegmentVolume">
            <summary>
            The volumetric representation of a structure.
            This object is used  when defining margins for structures, or when performing Boolean operations on structures.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SegmentVolume.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SegmentVolume.And(VMS.TPS.Common.Model.API.SegmentVolume)">
            <summary>
            Creates a combination of segment volumes. The existing segment volumes are not modified.
            The combination includes the areas that belong to both this segment volume and
            another segment volume,  that is, the intersection of this and the other segment volume.
            </summary>
            <param name="other">The segment volume that is combined with this segment volume.</param>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SegmentVolume.AsymmetricMargin(VMS.TPS.Common.Model.Types.AxisAlignedMargins)">
            <summary>
            Expands or shrinks this segment volume with the specified margins, aligned to the
            axes of the image coordinate system.
            </summary>
            <param name="margins">The margins in millimeters. The maximum is 50.</param>
            <returns>A new expanded or shrunk segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SegmentVolume.Margin(System.Double)">
            <summary>
            Creates a new segment volume by expanding or shrinking this segment volume
            with the specified margin (in millimeters).
            A positive value creates an outer margin. A negative value creates an inner margin.
            </summary>
            <param name="marginInMM">The used margin in millimeters. The maximum is 50.</param>
            <returns>A new expanded or shrunk segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SegmentVolume.Not">
            <summary>
            Creates a combination of segment volumes. Does not modify this segment volume.
            The combination includes the area that covers everything else but this segment volume.
            </summary>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SegmentVolume.Or(VMS.TPS.Common.Model.API.SegmentVolume)">
            <summary>
            Creates a combination of segment volumes. The existing segment volumes are not modified.
            The combination includes the areas that belong to this segment volume,
            to another segment volume, or both, that is, the union of this and the other segment volume.
            </summary>
            <param name="other">The segment volume that is combined with this volume.</param>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SegmentVolume.Sub(VMS.TPS.Common.Model.API.SegmentVolume)">
            <summary>
            Creates a combination of segment volumes. The existing segment volumes are not modified.
            The combination includes the area that belongs to this segment volume, but not
            to the other segment volume.
            </summary>
            <param name="other">The segment volume that is subtracted from this segment volume.</param>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SegmentVolume.Xor(VMS.TPS.Common.Model.API.SegmentVolume)">
            <summary>
            Creates a combination of segment volumes. The existing segment volumes are not modified.
            The combination includes the areas that belong either to this segment volume or to
            another segment volume, but not to both of them.
            </summary>
            <param name="other">The segment volume that is combined with this volume.</param>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.SourcePosition">
            <summary>
            Represents a brachytherapy source dwell position in a <see cref="T:VMS.TPS.Common.Model.API.Catheter">catheter</see>
            or a seed position in a <see cref="T:VMS.TPS.Common.Model.API.SeedCollection">seed collection</see>.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SourcePosition.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SourcePosition.DwellTime">
            <summary>
            The dwell time associated with this source position in seconds.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SourcePosition.RadioactiveSource">
            <summary>
            The radioactive source associated with this dwell position.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SourcePosition.Transform">
            <summary>
            The 4x4 transformation matrix represents the orientation and location of the source position in space.
            The matrix is composed of a 4x3 rotation submatrix and a 4x1 translation vector. Its bottom row indicates scaling and is always [0 0 0 1].
            The translation vector indicates the coordinates of the source position center, in millimeters. The third column of the rotation matrix indicates the source axis direction.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SourcePosition.Translation">
            <summary>
            The translation of this source position.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.StandardWedge">
            <summary>
            A standard wedge is a physical piece of material with an angle that is
            static during treatment.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Wedge">
            <summary>
            A wedge is a beam modulating add-on that modifies the dose intensity over all or a part of a treatment beam.
            </summary>
            <remarks>
            Use run-time type information via operator <c>is</c> or <c>as</c>
            to find out the type of a Wedge.
            </remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Wedge.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Wedge.Direction">
            <summary>
            The wedge orientation with respect to the beam orientation, in degrees.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Wedge.WedgeAngle">
            <summary>
            The wedge angle.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.StandardWedge.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.BeamCalculationLog">
            <summary>
            Represents a beam calculation log.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BeamCalculationLog.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BeamCalculationLog.Beam">
            <summary>
            Used for navigating to parent Beam
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BeamCalculationLog.Category">
            <summary>
            The log category, for example, "Dose", or "Optimization".
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BeamCalculationLog.MessageLines">
            <summary>
            The log as an array of lines.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Block">
            <summary>
            Represents a block add-on, a custom-made beam collimating material fixed to a tray, used to shape the beam.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Block.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Block.AddOnMaterial">
            <summary>
            The dosimetric material of the block.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Block.IsDiverging">
            <summary>
            Checks if the block cut is diverging.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Block.Outline">
            <summary>
            Gets the block outline coordinates in field coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Block.TransmissionFactor">
            <summary>
            The transmission factor of the selected material.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Block.Tray">
            <summary>
            The tray on which the block is installed.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Block.TrayTransmissionFactor">
            <summary>
            The transmission factor of the selected tray.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Block.Type">
            <summary>
            The type of the block: shielding or aperture.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Bolus">
            <summary>
            Represents a bolus, which is custom-made material that is usually fixed to the patient's skin for treatment.
            The bolus is used to modulate the depth dose profile of a beam.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Bolus.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Bolus.Id">
            <summary>
            The identifier of the bolus.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Bolus.MaterialCTValue">
            <summary>
            The CT value of the bolus material (HU).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Bolus.Name">
            <summary>
            The name of the bolus.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Compensator">
            <summary>
            Represents a beam compensator add-on, a custom-made beam modulating material fixed to a tray, used to modulate the beam's intensity.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Compensator.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Compensator.Material">
            <summary>
            The dosimetric material used in the compensator.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Compensator.Slot">
            <summary>
            The slot into which the tray is inserted.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Compensator.Tray">
            <summary>
            The tray to which the compensator is connected.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ControlPointCollection">
            <summary>
            Represents a collection of machine parameters that describe the planned
            treatment beam.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ControlPointCollection.GetEnumerator">
            <summary>
            Retrieves enumerator for ControlPoints in the collection.
            </summary>
            <returns>Enumerator for ControlPoints in the collection.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ControlPointCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointCollection.Item(System.Int32)">
            <summary>
            Gets the specified ControlPoint from the collection.
            </summary>
            <param name="index">Zero based index of the ControlPoint to retrieve.</param>
            <returns>ControlPoint at the given index.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointCollection.Count">
            <summary>
            The number of control points in the collection.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Application">
            <summary>
            The main application interface.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.Dispose">
            <summary>
            Releases all unmanaged resources of this object.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.Finalize">
            <summary>
            Called only if user forgot to call Dispose()
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.CreateApplication(System.String,System.String)">
            <summary>
            Creates an application instance and logs into the system.
            </summary>
            <param name="username">Username for logging in or null value to invoke an interactive login dialog.</param>
            <param name="password">Password for logging in or null value to invoke an interactive login dialog.</param>
            <returns>Application object that is the root of the data model.</returns>
            <remarks>
            Code that uses ESAPI must run on a single-threaded apartment
            (STAThread). Dispose must be called before the program exits. Only
            one Application instance may be created during the entire run of the
            program.
            </remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.CreateApplication">
            <summary>
            Creates an application instance for a standalone script and logs into the system.
            </summary>
            <returns>Application object that is the root of the data model.</returns>
            <remarks>
            Code that uses ESAPI must run on a single-threaded apartment (STAThread).
            The Dispose method must be called before the program exits.
            Only one application instance may be created during the entire run of the program.
            </remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.OpenPatient(VMS.TPS.Common.Model.API.PatientSummary)">
            <summary>
            Opens a patient.
            </summary>
            <param name="patientSummary">Patient summary.</param>
            <returns>Opened patient if found.</returns>
            <remarks>Only one patient can be open at the same time.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.OpenPatientById(System.String)">
            <summary>
            Opens a patient by using a patient identifier.
            </summary>
            <param name="id">Patient ID</param>
            <returns>Opened patient if found.</returns>
            <remarks>Only one patient can be open at the same time.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.ClosePatient">
            <summary>
            Closes the current patient. If the script tries to access the data of a closed patient, an access violation exception occurs.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.SaveModifications">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Saves data modifications to the database if saving is allowed.
            Note: Calling this method can cause a multi-user warning dialog box to appear if the same patient is modified
            by other parties.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.LogExportToHipaa(System.String)">
            <summary>
            Add HIPAA log record if HIPAA is enabled
            </summary>
            <param name="patientId"></param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.ConsoleEventHandler(VMS.TPS.Common.Model.API.Application.ConsoleHandlerEventCode)">
            <summary>
            CTRL+BREAK handler, stops script execution
            </summary>
            <param name="eventCode"></param>
            <returns></returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Application.CurrentUser">
            <summary>
            The user who is currently logged on.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Application.PatientSummaries">
            <summary>
            Fetches patient summaries from the database.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Application.ScriptEnvironment">
            <summary>
            Gets the script environment.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Globals">
            <summary>
            This class is internal to the Eclipse Scripting API.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Globals.CheckAbort">
            <summary>
            Checks if abort is needed and stops execution.
            </summary>
        </member>
        <member name="F:VMS.TPS.Common.Model.API.Globals.Tracing">
            <summary>
            True if Trace is called. Enables the re-entrancy checking for the Scripting API from a custom TraceListener.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Globals.Trace(System.String)">
            <summary>
            Uses System.Diagnostics.Trace with re-entrancy check for the Scripting API.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Globals.SetMaximumNumberOfLoggedApiCalls(System.Int32)">
            <summary>
            Sets the maximum number of the API calls that are saved in the script execution log.
            This will clear the existing log entries. 
            </summary>
            <param name="apiLogCacheSize">The cache size for API call logs. Setting the value to zero disables logging.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Globals.GetLoggedApiCalls">
            <summary>
            Returns the last called properties and methods. The oldest cached call is the first.
            The maximum number of logged calls is set by calling SetMaximumNumberOfLoggedApiCalls.
            </summary>
            <returns>The called API properties and methods as saved in the cache.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Globals.EnableApiAccessTrace">
            <summary>
            Enables the getting of access information for API members through .NET trace listener.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Globals.DisableApiAccessTrace">
            <summary>
            Disables the getting of access information for API members through .NET trace listener.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Globals.AbortNow">
            <summary>
            The flag that aborts script execution the next time any property or
            method of the Eclipse Scripting API is accessed.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Globals.DefaultMaximumNumberOfLoggedApiCalls">
            <summary>
            The default maximum number of API calls that are saved in the script execution log.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.DVHData">
            <summary>
            Represents Dose Volume Histogram (DVH) data.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.DVHData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.Coverage">
            <summary>
            The dose coverage of the target, normalized to 0.0 .. 1.0.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.CurveData">
            <summary>
            The points of the Dose Volume Histogram (DVH) curve.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.MaxDose">
            <summary>
            The maximum dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.MeanDose">
            <summary>
            The mean dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.MedianDose">
            <summary>
            The median dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.MinDose">
            <summary>
            The minimum dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.SamplingCoverage">
            <summary>
            The sampling coverage.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.StdDev">
            <summary>
            The standard deviation.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.Volume">
            <summary>
            The volume of the structure in cubic centimeters.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.DynamicWedge">
            <summary>
            A Dynamic Wedge is formed by a moving jaw of a standard collimator
            during irradiation.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.DynamicWedge.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.EnhancedDynamicWedge">
            <summary>
            An Enhanced Dynamic Wedge is similar to a Dynamic Wedge, but
            it features more wedge angles than a simple Dynamic Wedge.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.EnhancedDynamicWedge.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.FieldReferencePoint">
            <summary>
            This object links a treatment beam to a reference point.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.FieldReferencePoint.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.FieldReferencePoint.EffectiveDepth">
            <summary>
            The effective depth of the field reference point. For arc fields this is the average value
            over the span of the arc.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.FieldReferencePoint.FieldDose">
            <summary>
            The field dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.FieldReferencePoint.IsFieldDoseNominal">
            <summary>
            Checks if the field dose is nominal (the real calculated field dose is not known).
            If the field doses at a reference point are nominal, they alone cannot be used to verify MU calculation.”
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.FieldReferencePoint.IsPrimaryReferencePoint">
            <summary>
            Checks if the reference point is primary.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.FieldReferencePoint.ReferencePoint">
            <summary>
            Used for navigating to an underlying reference point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.FieldReferencePoint.RefPointLocation">
            <summary>
            The location of the reference point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.FieldReferencePoint.SSD">
            <summary>
            The Source-to-Skin Distance (SSD) of the reference point. For arc fields this is the average value
            over the span of the arc.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Hospital">
            <summary>
            Represents a hospital.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Hospital.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Hospital.CreationDateTime">
            <summary>
            The date when this object was created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Hospital.Location">
            <summary>
            The location of the hospital.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ScriptContext">
            <summary>
            Contains the runtime context information of the active application for the script.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ScriptContext.#ctor(System.Object,System.Object,System.String)">
            <summary>
            Provides scripts an access to the current data context.
            A context instance is given as a parameter in the Execute function of the script.
            The script itself does not instantiate the context.
            </summary>
            <param name="context">The internal data context.</param>
            <param name="user">The internal user object.</param>
            <param name="appName">The application name.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.CurrentUser">
            <summary>
            The current user of the application.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.Course">
            <summary>
            The course. The value may be null if the context has no course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.Image">
            <summary>
            The 3D image. The value may be null if the context has no image.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.StructureSet">
            <summary>
            The structure set. The value may be null if the context has no structure set.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.Patient">
            <summary>
            The patient. The value may be null if the context has no patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.PlanSetup">
            <summary>
            The plan setup. The value may be null if the context has no plan setup.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.ExternalPlanSetup">
            <summary>
            The active external beam plan setup. The value is null if the active object is not an external beam plan setup. 
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.BrachyPlanSetup">
            <summary>
            The active brachytherapy plan setup. The value is null if the active object is not a brachytherapy plan setup.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.IonPlanSetup">
            <summary>
            The active proton plan setup. The value is null if the active object is not a proton plan setup.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.PlansInScope">
            <summary>
            Retrieves a list of all plans in the Scope window.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.ExternalPlansInScope">
            <summary>
            Retrieves a list of all external beam plans in the Scope window.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.BrachyPlansInScope">
            <summary>
            Retrieves a list of all brachytherapy plans in the Scope window.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.IonPlansInScope">
            <summary>
            Retrieves a list of all proton plans in the Scope window.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.PlanSumsInScope">
            <summary>
            Retrieves a list of all plan sums in the Scope window.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.ActiveStructure">
            <summary>
            Retrieves the active structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.ApplicationName">
            <summary>
            The name of the active application.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.VersionInfo">
            <summary>
            The version number of Eclipse.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Isodose">
            <summary>
            Represents an isodose level for a fixed absolute or relative dose value.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Isodose.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Isodose.Color">
            <summary>
            The color of the isodose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Isodose.Level">
            <summary>
            The dose value of the isodose level.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Isodose.MeshGeometry">
            <summary>
            The triangle mesh of the isodose. Returned for those isodose levels that
            are rendered in 3D in Eclipse.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.MLC">
            <summary>
            Represents a Multileaf Collimator (MLC) add-on.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.MLC.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.MLC.ManufacturerName">
            <summary>
            The name of the manufacturer of the Multileaf Collimator (MLC).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.MLC.MinDoseDynamicLeafGap">
            <summary>
            For dose-dynamic treatments, the minimum gap (mm) between moving,
            open leaf pairs that the Multileaf Collimator (MLC) hardware can handle.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.MLC.Model">
            <summary>
            The number or name of the Multileaf Collimator (MLC) model.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.MLC.SerialNumber">
            <summary>
            The serial number given to the Multileaf Collimator (MLC) by the factory.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.MotorizedWedge">
            <summary>
            A motorized wedge is a standard wedge placed in the beam for a
            user-defined fraction of the total treatment time.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.MotorizedWedge.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OmniWedge">
            <summary>
            An OmniWedge is a special type of wedge that combines an open
            field, a motorized wedge, and a virtual wedge to create the desired wedge
            effect.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OmniWedge.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Patient">
            <summary>
            Represents a patient.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.AddCourse">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Attaches a new course to this patient.
            </summary>
            <returns>The new course.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.AddEmptyPhantom(System.String,VMS.TPS.Common.Model.Types.PatientOrientation,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Adds an empty phantom image to the patient. The empty image is created in a new study.
            A new structure set is created for the image.
            </summary>
            <param name="imageId">The identifier for the empty image to be created. The value must not be empty.</param>
            <param name="orientation">The patient orientation in the image.</param>
            <param name="xSizePixel">The x size of the image in pixels. The expected value is from 23 to 2048 pixels.</param>
            <param name="ySizePixel">The y size of the image in pixels. The expected value is from 23 to 2048 pixels.</param>
            <param name="widthMM">The height of the image in millimeters. The expected value is from 10.0 to 2000.0 millimeters.</param>
            <param name="heightMM">The width of the image in millimeters. The expected value is from 10.0 to 2000.0 millimeters.</param>
            <param name="nrOfPlanes">The number of planes in the image. The expected value is from 1 to 10000.</param>
            <param name="planeSepMM">The distance between the planes in millimeters. The expected value is from 0.1 to 200.0 millimeters.</param>
            <returns>The structure set associated with the new empty image.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.BeginModifications">
            <summary>
            Enables write-access to the data model from the Scripting API.
            This function must be called for each patient the script modifies.
            If this function is not called, the data in the database cannot be modified.
            </summary>
            <remarks>The method <see cref="M:VMS.TPS.Common.Model.API.Patient.CanModifyData">CanModifyData</see> can be used to check if the system allows write-access to the data model.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.CanAddCourse">
            <summary>
            Checks if a new course can be added to the patient.
            </summary>
            <returns>true if a new course can be added to the patient.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.CanAddEmptyPhantom(System.String@)">
            <summary>
            Checks if an empty phantom can be added to the patient.
            The user should have the appropriate permissions to perform the operation.
            </summary>
            <param name="errorMessage">If phantom adding is not permitted, contains the error message.</param>
            <returns>true, if the phantom image can be added to the patient.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.CanCopyImageFromOtherPatient(VMS.TPS.Common.Model.API.Study,System.String,System.String,System.String,System.String@)">
            <summary>
            Checks if the image can be copied from the other patient.
            </summary>
            <param name="targetStudy">The target study for the new image series, or null.</param>
            <param name="otherPatientId">The identifier of the other patient.</param>
            <param name="otherPatientStudyId">The identifier of the other patient's study. If null or empty, the system tries to find the image using only the 3D image identifier.</param>
            <param name="otherPatient3DImageId">The identifier of the other patient's 3D image.</param>
            <param name="errorMessage">If copying the image is not permitted, contains the error message.</param>
            <returns>true, if the image can be copied from the other patient.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.CanModifyData">
            <summary>
            Returns true if the script can modify patient data in the database.
            </summary>
            <returns>true if the script can modify patient data in the database. Otherwise false.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.CanRemoveCourse(VMS.TPS.Common.Model.API.Course)">
            <summary>
            Checks if the course can be removed from the patient.
            </summary>
            <param name="course">The course to be removed.</param>
            <returns>true if the course can be removed from the patient.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.CanRemoveEmptyPhantom(VMS.TPS.Common.Model.API.StructureSet,System.String@)">
            <summary>
            Checks if the image can be removed.
            The image to be removed and the associated structure set should be empty.
            </summary>
            <param name="structureset">The structure set to be removed.</param>
            <param name="errorMessage">If the image and associated structure set cannot be removed, contains the error message.</param>
            <returns>true, if the image is empty and can be removed from the patient.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.CopyImageFromOtherPatient(System.String,System.String,System.String)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Copies an image from an other patient to this patient. A new study and series is created for the image.
            The method <see cref="M:VMS.TPS.Common.Model.API.Patient.CanCopyImageFromOtherPatient(VMS.TPS.Common.Model.API.Study,System.String,System.String,System.String,System.String@)">CanCopyImageFromOtherPatient</see>
            can be used to check if copying the image is possible.
            </summary>
            <exception cref="T:System.ArgumentException">The exception is thrown if the patient is the current patient, or the patient is not found, or the image is not found.</exception>
            <param name="otherPatientId">The identifier of the other patient.</param>
            <param name="otherPatientStudyId">The identifier of the other patient's study. If null or empty, the system tries to find the image using only the 3D image identifier.</param>
            <param name="otherPatient3DImageId">The identifier of the other patient's 3D image.</param>
            <returns>The structure set of the copied 3D image.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.CopyImageFromOtherPatient(VMS.TPS.Common.Model.API.Study,System.String,System.String,System.String)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Copies an image from an other patient to the given study. A new series is created for the image.
            The method <see cref="M:VMS.TPS.Common.Model.API.Patient.CanCopyImageFromOtherPatient(VMS.TPS.Common.Model.API.Study,System.String,System.String,System.String,System.String@)">CanCopyImageFromOtherPatient</see>
            can be used to check if copying the image is possible.
            </summary>
            <exception cref="T:System.ArgumentException">The exception is thrown if the patient is the current patient, or the patient is not found, or the image is not found.</exception>
            <param name="targetStudy">The target study for the new image series.</param>
            <param name="otherPatientId">The identifier of the other patient.</param>
            <param name="otherPatientStudyId">The identifier of the other patient's study. If null or empty, the system tries to find the image using only the 3D image identifier.</param>
            <param name="otherPatient3DImageId">The identifier of the other patient's 3D image.</param>
            <returns>The structure set of the copied 3D image.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.RemoveCourse(VMS.TPS.Common.Model.API.Course)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Removes the course from the patient and deletes it.
            </summary>
            <param name="course">The course that is removed.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.RemoveEmptyPhantom(VMS.TPS.Common.Model.API.StructureSet)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Removes an empty image from the patient. The associated structure set is also removed.
            The image to be removed and the associated structure set should be empty.
            </summary>
            <param name="structureset">The structure set to be removed.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.Courses">
            <summary>
            A collection of the patient's courses.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.CreationDateTime">
            <summary>
            The date when this object was created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.DateOfBirth">
            <summary>
            The date of birth of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.FirstName">
            <summary>
            The first name of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.HasModifiedData">
            <summary>
            Returns true if the patient object tree has been modified.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.Hospital">
            <summary>
            The hospital.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.Id2">
            <summary>
            The patient ID2.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.LastName">
            <summary>
            The last name of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.MiddleName">
            <summary>
            The middle name of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.PrimaryOncologistId">
            <summary>
            The identifier of the primary oncologist.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.Registrations">
            <summary>
            A collection of registrations.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.Sex">
            <summary>
            The gender of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.SSN">
            <summary>
            The Social Security Account Number (SSN) of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.StructureSets">
            <summary>
            A collection of structure sets.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.Studies">
            <summary>
            A collection of studies.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.PatientSummary">
            <summary>
            Basic information about the patient.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PatientSummary.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.CreationDateTime">
            <summary>
            The date when the patient object was created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.DateOfBirth">
            <summary>
            The date of birth of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.FirstName">
            <summary>
            The first name of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.Id">
            <summary>
            The patient ID.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.Id2">
            <summary>
            The patient ID2.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.LastName">
            <summary>
            The last name of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.MiddleName">
            <summary>
            The middle name of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.Sex">
            <summary>
            The gender of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.SSN">
            <summary>
            The Social Security Account Number (SSN) of the patient.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.PlanSum">
            <summary>
            A plan sum describes the cumulative dose summation of several treatment plans.
            It can be used, for example, to evaluate the dose the patient received from a treatment plan and boost plan together.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSum.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSum.GetPlanSumOperation(VMS.TPS.Common.Model.API.PlanSetup)">
            <summary>
            Returns the summing operation of the plan in the plan sum.
            </summary>
            <param name="planSetupInPlanSum">A plan that belongs to this plan sum, included in collection <see cref="P:VMS.TPS.Common.Model.API.PlanSum.PlanSetups">PlanSetups</see>.</param>
            <returns>The summing operation of the plan in the plan sum.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSum.GetPlanWeight(VMS.TPS.Common.Model.API.PlanSetup)">
            <summary>
            Returns the weight of the plan included in the sum.
            </summary>
            <param name="planSetupInPlanSum">A plan that belongs to this plan sum, included in collection<see cref="P:VMS.TPS.Common.Model.API.PlanSum.PlanSetups">PlanSetups</see>.</param>
            <returns>The weight of the plan in the plan sum.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSum.Course">
            <summary>
            Used for navigating to the parent course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSum.PlanSumComponents">
            <summary>
            A collection of plans in a plan sum.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSum.PlanSetups">
            <summary>
            A collection of plan setups.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ReferencePoint">
            <summary>
            A reference point associated with a patient.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ReferencePoint.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ReferencePoint.GetReferencePointLocation(VMS.TPS.Common.Model.API.PlanSetup)">
            <summary>
            The location of the reference point in mm.
            </summary>
            <param name="planSetup">Plan setup that this reference point is connected to.</param>
            <returns>Reference point location</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ReferencePoint.HasLocation(VMS.TPS.Common.Model.API.PlanSetup)">
            <summary>
            Tests if a valid reference point location exists.
            </summary>
            <param name="planSetup">Plan setup that this reference point is connected to</param>
            <returns>True if the reference point has location; false, otherwise</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ReferencePoint.DailyDoseLimit">
            <summary>
            Daily dose limit of this reference point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ReferencePoint.PatientVolumeId">
            <summary>
            The identifier of the patient volume for the reference point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ReferencePoint.SessionDoseLimit">
            <summary>
            Session dose limit of this reference point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ReferencePoint.TotalDoseLimit">
            <summary>
            Total dose limit of this reference point.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Registration">
            <summary>
            Represents the spatial registration matrix between two frames of reference.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Registration.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Registration.InverseTransformPoint(VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            Transforms a point in the inverse direction, that is, from the
            coordinate system of the RegisteredFOR to the coordinate system
            of the SourceFOR.
            </summary>
            <param name="pt">Point in the RegisteredFOR coordinate system.</param>
            <returns>Given point transformed to the SourceFOR.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Registration.TransformPoint(VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            Transforms a point from the SourceFOR coordinate system to the
            RegisteredFOR coordinate system.
            </summary>
            <param name="pt">Point in the SourceFOR coordinate system.</param>
            <returns>Given point transformed to the RegisteredFOR.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Registration.CreationDateTime">
            <summary>
            The date when this object was created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Registration.RegisteredFOR">
            <summary>
            The frame of reference UID of the registered coordinate system.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Registration.SourceFOR">
            <summary>
            The frame of reference UID of the source coordinate system.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Registration.Status">
            <summary>
            The current approval status of the registration.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Registration.StatusDateTime">
            <summary>
            The approval status date and time.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Registration.StatusUserDisplayName">
            <summary>
            Full user name of user who changed the approval status.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Registration.StatusUserName">
            <summary>
            User ID of the user who changed the approval status.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Registration.TransformationMatrix">
            <summary>
            The elements of the 4x4 transformation matrix.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Registration.UID">
            <summary>
            The SOP Instance UID of this registration object.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Series">
            <summary>
            A series is a collection of radiation therapy objects of a patient.
            The series is part of a study. See the definition of a DICOM Series for more information.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Series.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Series.SetImagingDevice(System.String)">
            <summary>
            [Availability of this method depends on your Eclipse Scripting API license] Sets the imaging device for the image series based on the identifier of the imaging device. If the imaging device
            identifier is not found, an exception is thrown.
            </summary>
            <param name="imagingDeviceId">Identifier of the imaging device.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.FOR">
            <summary>
            The UID of the frame of reference.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.Images">
            <summary>
            A collection of images that belong to the series.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.ImagingDeviceId">
            <summary>
            The identifier of the device that is used to scan the images into the system.
            Returns an empty string if the imaging device is not unique or the device identifier is not defined.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.ImagingDeviceManufacturer">
            <summary>
            The manufacturer of the device that is used to scan the images into the system.
            Returns an empty string if the imaging device is not unique or the device manufacturer is not defined.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.ImagingDeviceModel">
            <summary>
            The model of the device that is used to scan the images into the system.
            Returns an empty string if the imaging device is not unique or the device model is not defined.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.ImagingDeviceSerialNo">
            <summary>
            The serial number of the device that is used to scan the images into the system.
            Returns an empty string if the imaging device is not unique or the device serial number is not defined.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.Modality">
            <summary>
            The modality of the series.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.Study">
            <summary>
            Used for navigating to parent study.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.UID">
            <summary>
            The DICOM UID.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Slot">
            <summary>
            A slot is the location (typically on the collimator head of the gantry) where an add-on, such as a wedge or block, is mounted.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Slot.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Slot.Number">
            <summary>
            The slot number is unique within an instance of a treatment machine.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Study">
            <summary>
            A study is a collection of series.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Study.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Study.CreationDateTime">
            <summary>
            The date when this object was created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Study.Series">
            <summary>
            A collection of series.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Study.UID">
            <summary>
            The DICOM UID.
            </summary>
        </member>
        <member name="T:VMS.TPS.Version.VersionInfo">
            <summary>
            This class is a set of constants that specify build version information.
            Generated automatically from TpsNetVersion.in - do not edit by hand.
            The logic is copied from the VFC equivalents in TpsVersion.in.
            Names and identifiers are kept exactly the same as in the original VFC version
            to help in maintenance.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Technique">
            <summary>
            Treatment technique used for a beam. Can be, for example, static or arc.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Technique.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.TradeoffObjective">
            <summary>
            Trade-off objective interface that consists of a set of optimization objectives.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TradeoffObjective.Id">
            <summary>
            Identifier of the trade-off objective.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TradeoffObjective.OptimizationObjectives">
            <summary>
            The collection of objectives that this trade-off objective represents.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TradeoffObjective.Structure">
            <summary>
            Structure that this trade-off objective represents.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Tray">
            <summary>
            A tray add-on is a plate where blocks, compensators, and other beam modifying materials can be fixed to.
            The tray is inserted into a slot during the treatment of a beam.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Tray.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.TreatmentPhase">
            <summary>
            Treatment phase.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TreatmentPhase.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TreatmentPhase.OtherInfo">
            <summary>
            Other info (notes).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TreatmentPhase.PhaseGapNumberOfDays">
            <summary>
            Number of days between phases.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TreatmentPhase.Prescriptions">
            <summary>
            A collection of RT prescriptions in the course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TreatmentPhase.TimeGapType">
            <summary>
            Type of the time gap.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.TreatmentSession">
            <summary>
            Treatment session.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TreatmentSession.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TreatmentSession.SessionNumber">
            <summary>
            Treatment session number.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TreatmentSession.SessionPlans">
            <summary>
            Plans in this treatment session.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.TreatmentUnitOperatingLimit">
            <summary>
            Describes the limits of a treatment unit parameter and provides descriptive information related to it.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TreatmentUnitOperatingLimit.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TreatmentUnitOperatingLimit.Label">
            <summary>
            Gets the descriptive name of the operating limit parameter.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TreatmentUnitOperatingLimit.MaxValue">
            <summary>
            Gets the maximum allowed value for the operating limit parameter.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TreatmentUnitOperatingLimit.MinValue">
            <summary>
            Gets the minimum allowed value for the operating limit parameter.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TreatmentUnitOperatingLimit.Precision">
            <summary>
            Gets the number of decimal places to display for the operating limit parameter.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TreatmentUnitOperatingLimit.UnitString">
            <summary>
            Gets the string that describes the unit of the operating limit parameter.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.TreatmentUnitOperatingLimits">
            <summary>
            Provides operating limit information for treatment unit parameters.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TreatmentUnitOperatingLimits.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TreatmentUnitOperatingLimits.CollimatorAngle">
            <summary>
            Gets the operating limit information for the collimator angle parameter.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TreatmentUnitOperatingLimits.GantryAngle">
            <summary>
            Gets the operating limit information for the gantry angle parameter.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TreatmentUnitOperatingLimits.MU">
            <summary>
            Gets the operating limit information for the monitor unit (MU) parameter.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.TreatmentUnitOperatingLimits.PatientSupportAngle">
            <summary>
            Gets the operating limit information for the patient support angle parameter.
            </summary>
        </member>
    </members>
</doc>
