<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VMS.TPS.Common.Model.API</name>
    </assembly>
    <members>
        <member name="T:VMS.TPS.Common.Model.API.PlanSetup">
            <summary>
            Represents a treatment plan. See the definition of a DICOM RT Plan for more information.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.PlanningItem">
            <summary>
            Common properties of a treatment plan and a plan sum.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ApiDataObject">
            <summary>
            The base class of objects in the Eclipse Scripting API.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.SerializableObject">
            <summary>
            Base class for objects that can be serialized.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.GetSchema">
            <summary>
            This member is internal to the Eclipse Scripting API.
            </summary>
            <returns>XmlSchema</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.ReadXml(System.Xml.XmlReader)">
            <summary>
            This member is internal to the Eclipse Scripting API.
            </summary>
            <param name="reader">XmlReader</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes this object to the given XmlWriter.
            </summary>
            <param name="writer">XmlWriter where this object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.WriteXml(System.Xml.XmlWriter,System.String,System.Object)">
            <summary>
            Serializes everything except IEnumerable.
            </summary>
            <param name="writer">XmlWriter</param>
            <param name="name">Name.</param>
            <param name="obj">Object.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.WriteXml(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Serializes a string.
            </summary>
            <param name="writer">XmlWriter.</param>
            <param name="name">Name.</param>
            <param name="obj">String.</param>
            <remarks>Special case, because string is IEnumerable also.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.WriteXml``1(System.Xml.XmlWriter,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Serializes IEnumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.WriteXml``2(System.Xml.XmlWriter,System.String,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Serializes IDictionary.
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="obj"></param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.StartSerialization(System.String,System.String)">
            <summary>
            Must be called at the beginning of serialization
            </summary>
            <param name="typeName">Name of the type to serialize.</param>
            <param name="typeId">Id of the object.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.EndSerialization">
            <summary>
            Must be called at the end of serialization. Clear history records and type names.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.IsTypeSerialized">
            <summary>
            Check if history contains information about class
            </summary>
            <returns></returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.AddTypeToHistory">
            <summary>
            Add history record
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SerializableObject.ClearSerializationHistory">
            <summary>
            This member is internal to the Eclipse Scripting API.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.");
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object. 
            </summary>
            <param name="obj">Object to compare with the current object</param>
            <returns>True if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.op_Equality(VMS.TPS.Common.Model.API.ApiDataObject,VMS.TPS.Common.Model.API.ApiDataObject)">
            <summary>
            The equality operator.
            </summary>
            <param name="a">First operand.</param>
            <param name="b">Second operand.</param>
            <returns>True if the given ApiDataObjects are the same.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.op_Inequality(VMS.TPS.Common.Model.API.ApiDataObject,VMS.TPS.Common.Model.API.ApiDataObject)">
            <summary>
            The inequality operator.
            </summary>
            <param name="a">First operand.</param>
            <param name="b">Second operand.</param>
            <returns>True if the given ApiDataObjects are not the same.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.ThrowIfCanNotModifyInESAPI">
            <summary>
            Throws an exception if the system is in the read-only state.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ApiDataObject.ThrowIfCanNotModifyInESAPI(VMS.TPS.Common.Model.IDataObject)">
            <summary>
            Throws an exception if the system is in the read-only state.
            </summary>
            <param name="dataObj">The data object that is modified.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApiDataObject.Id">
            <summary>
            The identifier of the object.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApiDataObject.Name">
            <summary>
            The name of the object.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApiDataObject.Comment">
            <summary>
            A comment about the object.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApiDataObject.HistoryUserName">
            <summary>
            The identifier of the last user who modified this object.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ApiDataObject.HistoryDateTime">
            <summary>
            The date when this object was last modified.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanningItem.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanningItem.GetDVHCumulativeData(VMS.TPS.Common.Model.API.Structure,VMS.TPS.Common.Model.Types.DoseValuePresentation,VMS.TPS.Common.Model.Types.VolumePresentation,System.Double)">
            <summary>
            Returns cumulative Dose Volume Histogram (DVH) data.
            </summary>
            <param name="structure">Structure for which the DVH data is requested.</param>
            <param name="dosePresentation">Requested dose presentation mode (absolute or relative). Note, that only
            absolute dose is supported for PlanSums.</param>
            <param name="volumePresentation">Requested volume presentation mode.</param>
            <param name="binWidth">Requested width of the bin.</param>
            <returns>DVHData object that contains the requested DVH information or null if DVH calculation was not possible.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanningItem.CreationDateTime">
            <summary>
            The date when this object was created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanningItem.Dose">
            <summary>
            The total dose. The total dose is the dose of all planned fractions together.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanningItem.DoseValuePresentation">
            <summary>
            The presentation of the dose as absolute or relative.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.ClearCalculationModel(VMS.TPS.Common.Model.Types.CalculationType)">
            <summary>
            [Requires a research license] Clears the calculation model for the given calculation type.
            </summary>
            <param name="calculationType">The type of calculation.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.GetCalculationModel(VMS.TPS.Common.Model.Types.CalculationType)">
            <summary>
            Returns the selected calculation model for the given calculation type.
            Returns null if no model has been selected.
            </summary>
            <param name="calculationType">The type of calculation.</param>
            <returns>Returns the selected calculation model for the given calculation type. Returns null if no model has been selected.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.GetCalculationOption(System.String,System.String,System.String@)">
            <summary>
            Gets the given calculation option value.
            </summary>
            <param name="calculationModel">The name of the calculation model.</param>
            <param name="optionName">The XPath or name of the option to set.</param>
            <param name="optionValue">The value of the given option.</param>
            <returns>Returns false if the method cannot find the given option.</returns>
            <remarks>Available options are stored in the schema files of the calculation model located on the Distributed Calculation Framework (DCF) server.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.GetCalculationOptions(System.String)">
            <summary>
            Gets all the calculation options and their values for the given calculation model.
            </summary>
            <param name="calculationModel">The name of the calculation model.</param>
            <returns>A list of key-value pairs where the key is the XPath of the option and the value is the option value.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.GetDoseAtVolume(VMS.TPS.Common.Model.API.Structure,System.Double,VMS.TPS.Common.Model.Types.VolumePresentation,VMS.TPS.Common.Model.Types.DoseValuePresentation)">
            <summary>
            Gets the dose at a volume.
            </summary>
            <param name="structure">Structure for which the value is requested.</param>
            <param name="volume">Volume at which the dose is requested.</param>
            <param name="volumePresentation">Presentation mode of the volume parameter.</param>
            <param name="requestedDosePresentation">Requested dose presentation mode (absolute or relative).</param>
            <returns>The dose value at the given volume of structure.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.GetVolumeAtDose(VMS.TPS.Common.Model.API.Structure,VMS.TPS.Common.Model.Types.DoseValue,VMS.TPS.Common.Model.Types.VolumePresentation)">
            <summary>
            Gets the volume at a dose.
            </summary>
            <param name="structure">Structure for which the value is requested.</param>
            <param name="dose">Dose at which the volume is requested.</param>
            <param name="requestedVolumePresentation">Requested volume presentation mode.</param>
            <returns>The volume at the given dose.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationModel(VMS.TPS.Common.Model.Types.CalculationType,System.String)">
            <summary>
            [Requires a research license] Sets the calculation model for the given calculation type.
            </summary>
            <param name="calculationType">The type of calculation.</param>
            <param name="model">The name of the calculation model.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationOption(System.String,System.String,System.String)">
            <summary>
            [Requires a research license] Sets the given calculation option to the given value.
            Before setting the options for the model, set the calculation model.
            See <see cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationModel(VMS.TPS.Common.Model.Types.CalculationType,System.String)">SetCalculationModel</see>.
            </summary>
            <param name="calculationModel">The name of the calculation model.</param>
            <param name="optionName">The XPath or name of the option to set. If this is not an XPath,
            the method sets the first attribute that matches the name.
            Example 1:
            CalculationGridSizeInCM in the Anisotropic Analytical Algorithm (AAA) sets the option /AAACalculationOptions/@CalculationGridSizeInCM.
            Example 2:
            MaximalDrillDepthInCM in the Proton Convolution Superposition (PCS) algorithm sets the option /ProtonCalculationOptions/ScatteringUniformScanning/CompensatorConversion/Drilling1/@MaximalDrillDepthInCM.
            To set the values, for example, for the Drilling2 settings, you have to specify the entire XPath /ProtonCalculationOptions/ScatteringUniformScanning/CompensatorConversion/Drilling2/@MaximalDrillDepthInCM.
            </param>
            <param name="optionValue">The value to set.</param>
            <returns>Returns false if the method cannot find the given option.</returns>
            <remarks>Available options are stored in the schema files of the calculation model located on the Distributed Calculation Framework (DCF) server.</remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.ApprovalStatus">
            <summary>
            The approval status.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.Beams">
            <summary>
            A collection of all the beams in the plan (including setup beams).
            Returns an empty collection if not applicable for the plan, for example, if the plan is a brachytherapy plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.Course">
            <summary>
            Used for navigating to parent course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.CreationUserName">
            <summary>
            The name of the user who saved the plan for the first time.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.DVHEstimates">
            <summary>
            Returns a list of DVH estimate objects for this plan
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.ElectronCalculationModel">
            <summary>
            The name of the electron calculation model. Not applicable to brachytherapy plans.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.ElectronCalculationOptions">
            <summary>
            The electron calculation options. Not applicable to brachytherapy plans.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.IsDoseValid">
            <summary>
            Returns the value true if the plan dose is valid. This implies that the dose object returned
            from the dose property is not null and can therefore be used to query dose values.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.IsTreated">
            <summary>
            Checks if the treatment plan has been delivered.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.OptimizationSetup">
            <summary>
            Provides access to optimization objectives and parameters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PhotonCalculationModel">
            <summary>
            The name of the photon calculation model. Not applicable to brachytherapy plans.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PhotonCalculationOptions">
            <summary>
            The photon calculation options. Not applicable to brachytherapy plans.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlanIntent">
            <summary>
            The plan intent as in DICOM, or an empty string.
            The defined terms are "CURATIVE", "PALLIATIVE", "PROPHYLACTIC", "VERIFICATION", "MACHINE_QA", "RESEARCH" and "SERVICE",
            but the value can be different for imported plans.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlanningApprovalDate">
            <summary>
            The date when the plan was approved for planning.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlanningApprover">
            <summary>
            The name of the user who approved the plan for planning.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlanNormalizationMethod">
            <summary>
            The user interface name for the current normalization method.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlanNormalizationPoint">
            <summary>
            The plan normalization point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlanType">
            <summary>
            The plan type.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PrescribedPercentage">
            <summary>
            The prescribed dose percentage as a decimal number. For example, if the prescribed dose percentage shown in the Eclipse user interface is 80 %, returns 0.8
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PrimaryReferencePoint">
            <summary>
            The primary reference point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.ProtocolID">
            <summary>
            The protocol identifier.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.ProtocolPhaseID">
            <summary>
            The protocol phase identifier.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.ProtonCalculationModel">
            <summary>
            The name of the proton calculation model. Not applicable to brachytherapy plans.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.ProtonCalculationOptions">
            <summary>
            The proton calculation options. Not applicable to brachytherapy plans.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.Series">
            <summary>
            The series that contains this plan. Null if the plan is not connected to a series.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.SeriesUID">
            <summary>
            The DICOM UID of the series that contains this plan. Empty string if the plan is not connected to a series.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.StructureSet">
            <summary>
            The structure set.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.TargetVolumeID">
            <summary>
            The target volume identifier.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.TotalPrescribedDose">
            <summary>
            The total prescribed dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.TreatmentApprovalDate">
            <summary>
            The date when the plan was approved for treatment.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.TreatmentApprover">
            <summary>
            The name of the user who approved the plan for treatment.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.TreatmentOrientation">
            <summary>
            The orientation of the treatment.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.UID">
            <summary>
            The DICOM UID of the plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.UniqueFractionation">
            <summary>
            Gets the unique fractionation. If it does not exist, an exception is thrown.
            </summary>
            <returns>Unique fractionation if such exists. Otherwise throws.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.VerifiedPlan">
            <summary>
            Returns the verified plan if this is a verification plan, otherwise returns null.
            The verified plan is the clinical plan that was used to create the verification plan.
            </summary>
            <remarks>Always returns null if the plan has multiple fractionations.</remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.Id">
            <summary>
            The identifier of the PlanSetup.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSetup.PlanNormalizationValue">
            <summary>
            The plan normalization value in percentage. The plan is normalized according to the plan 
            normalization value, for instance, 200%.
            The value is Double.NaN if it is not defined.
            <remarks>[Requires a research license] The property setter changes also the plan normalization method to Plan Normalization Value.</remarks>
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Patient">
            <summary>
            Represents a patient.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.AddCourse">
            <summary>
            [Requires a research license] Attaches a new course to this patient.
            </summary>
            <returns>The new course.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.AddEmptyPhantom(System.String,VMS.TPS.Common.Model.Types.PatientOrientation,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            [Requires a research license] Adds an empty phantom image to the patient. The empty image is created in a new study.
            A new structure set is created for the image.
            </summary>
            <param name="imageId">The identifier for the empty image to be created. The value must not be empty.</param>
            <param name="orientation">The patient orientation in the image.</param>
            <param name="xSizePixel">The x size of the image in pixels. The expected value is from 23 to 2048 pixels.</param>
            <param name="ySizePixel">The y size of the image in pixels. The expected value is from 23 to 2048 pixels.</param>
            <param name="widthMM">The height of the image in millimeters. The expected value is from 10.0 to 2000.0 millimeters.</param>
            <param name="heightMM">The width of the image in millimeters. The expected value is from 10.0 to 2000.0 millimeters.</param>
            <param name="nrOfPlanes">The number of planes in the image. The expected value is from 1 to 10000.</param>
            <param name="planeSepMM">The distance between the planes in millimeters. The expected value is from 0.1 to 200.0 millimeters.</param>
            <returns>The structure set associated with the new empty image.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.BeginModifications">
            <summary>
            [Requires a research license] Enables write-access to the data model from the Scripting API if the system is configured for research use.
            This function must be called for each patient the script modifies.
            If this function is not called, the data in the research database cannot be modified.
            </summary>
            <remarks>The method <see cref="M:VMS.TPS.Common.Model.API.Patient.CanModifyData">CanModifyData</see> can be used to check if the system allows write-access to the data model.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.CanAddCourse">
            <summary>
            [Requires a research license] Checks if a new course can be added to the patient.
            </summary>
            <returns>true if a new course can be added to the patient.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.CanAddEmptyPhantom(System.String@)">
            <summary>
            [Requires a research license] Checks if an empty phantom can be added to the patient.
            The user should have the appropriate permissions to perform the operation.
            </summary>
            <param name="errorMessage">If phantom adding is not permitted, contains the error message.</param>
            <returns>true, if the phantom image can be added to the patient.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.CanCopyImageFromOtherPatient(VMS.TPS.Common.Model.API.Study,System.String,System.String,System.String,System.String@)">
            <summary>
            [Requires a research license] Checks if the image can be copied from the other patient.
            </summary>
            <param name="targetStudy">The target study for the new image series, or null.</param>
            <param name="otherPatientId">The identifier of the other patient.</param>
            <param name="otherPatientStudyId">The identifier of the other patient's study. If null or empty, the system tries to find the image using only the 3D image identifier.</param>
            <param name="otherPatient3DImageId">The identifier of the other patient's 3D image.</param>
            <param name="errorMessage">If copying the image is not permitted, contains the error message.</param>
            <returns>true, if the image can be copied from the other patient.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.CanModifyData">
            <summary>
            [Requires a research license] Returns true if the script can modify patient data in the database.
            </summary>
            <returns>true if the script can modify patient data in the database. Otherwise false.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.CanRemoveCourse(VMS.TPS.Common.Model.API.Course)">
            <summary>
            [Requires a research license] Checks if the course can be removed from the patient.
            </summary>
            <param name="course">The course to be removed.</param>
            <returns>true if the course can be removed from the patient.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.CanRemoveEmptyPhantom(VMS.TPS.Common.Model.API.StructureSet,System.String@)">
            <summary>
            [Requires a research license] Checks if the image can be removed.
            The image to be removed and the associated structure set should be empty.
            </summary>
            <param name="structureset">The structure set to be removed.</param>
            <param name="errorMessage">If the image and associated structure set cannot be removed, contains the error message.</param>
            <returns>true, if the image is empty and can be removed from the patient.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.CopyImageFromOtherPatient(System.String,System.String,System.String)">
            <summary>
            [Requires a research license] Copies an image from an other patient to this patient. A new study and series is created for the image.
            The method <see cref="M:VMS.TPS.Common.Model.API.Patient.CanCopyImageFromOtherPatient(VMS.TPS.Common.Model.API.Study,System.String,System.String,System.String,System.String@)">CanCopyImageFromOtherPatient</see>
            can be used to check if copying the image is possible.
            </summary>
            <exception cref="T:System.ArgumentException">The exception is thrown if the patient is the current patient, or the patient is not found, or the image is not found.</exception>
            <param name="otherPatientId">The identifier of the other patient.</param>
            <param name="otherPatientStudyId">The identifier of the other patient's study. If null or empty, the system tries to find the image using only the 3D image identifier.</param>
            <param name="otherPatient3DImageId">The identifier of the other patient's 3D image.</param>
            <returns>The structure set of the copied 3D image.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.CopyImageFromOtherPatient(VMS.TPS.Common.Model.API.Study,System.String,System.String,System.String)">
            <summary>
            [Requires a research license] Copies an image from an other patient to the given study. A new series is created for the image.
            The method <see cref="M:VMS.TPS.Common.Model.API.Patient.CanCopyImageFromOtherPatient(VMS.TPS.Common.Model.API.Study,System.String,System.String,System.String,System.String@)">CanCopyImageFromOtherPatient</see>
            can be used to check if copying the image is possible.
            </summary>
            <exception cref="T:System.ArgumentException">The exception is thrown if the patient is the current patient, or the patient is not found, or the image is not found.</exception>
            <param name="targetStudy">The target study for the new image series.</param>
            <param name="otherPatientId">The identifier of the other patient.</param>
            <param name="otherPatientStudyId">The identifier of the other patient's study. If null or empty, the system tries to find the image using only the 3D image identifier.</param>
            <param name="otherPatient3DImageId">The identifier of the other patient's 3D image.</param>
            <returns>The structure set of the copied 3D image.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.RemoveCourse(VMS.TPS.Common.Model.API.Course)">
            <summary>
            [Requires a research license] Removes the course from the patient and deletes it.
            </summary>
            <param name="course">The course that is removed.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Patient.RemoveEmptyPhantom(VMS.TPS.Common.Model.API.StructureSet)">
            <summary>
            [Requires a research license] Removes an empty image from the patient. The associated structure set is also removed.
            The image to be removed and the associated structure set should be empty.
            </summary>
            <param name="structureset">The structure set to be removed.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.Courses">
            <summary>
            A collection of the patient's courses.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.CreationDateTime">
            <summary>
            The date when this object was created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.DateOfBirth">
            <summary>
            The date of birth of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.FirstName">
            <summary>
            The first name of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.HasModifiedData">
            <summary>
            Returns true if the patient object tree has been modified.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.Hospital">
            <summary>
            The hospital.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.Id2">
            <summary>
            The patient ID2.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.LastName">
            <summary>
            The last name of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.MiddleName">
            <summary>
            The middle name of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.PrimaryOncologistId">
            <summary>
            The identifier of the primary oncologist.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.Registrations">
            <summary>
            A collection of registrations.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.Sex">
            <summary>
            The gender of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.SSN">
            <summary>
            The Social Security Account Number (SSN) of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.StructureSets">
            <summary>
            A collection of structure sets.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Patient.Studies">
            <summary>
            A collection of studies.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Image">
            <summary>
            Represents a 2D or 3D image, which can be a DRR, a CT, MR, or other volumetric dataset.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Image.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Image.DicomToUser(VMS.TPS.Common.Model.Types.VVector,VMS.TPS.Common.Model.API.PlanSetup)">
            <summary>
            Converts DICOM coordinates to the planning coordinate system used in the Eclipse user interface.
            </summary>
            <param name="dicom">Coordinate value in DICOM coordinate system.</param>
            <param name="planSetup">Plan that defines the planning orientation or null.</param>
            <returns>The coordinate value in the planning coordinate system used in Eclipse user interface.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Image.GetImageProfile(VMS.TPS.Common.Model.Types.VVector,VMS.TPS.Common.Model.Types.VVector,System.Double[])">
            <summary>
            Gets the image profile.
            </summary>
            <param name="start">Location of the first point of the profile.</param>
            <param name="stop">Location of the last point of the profile.</param>
            <param name="preallocatedBuffer">Preallocated buffer where the values are stored. The size of
            the buffer determines the number of values to return.</param>
            <returns>The ImageProfile object holding the image pixel values along the line segment defined by start and stop parameters.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Image.GetVoxels(System.Int32,System.Int32[0:,0:])">
            <summary>
            Gets the voxels of the given image plane.
            </summary>
            <param name="planeIndex">Zero based index of the plane.</param>
            <param name="preallocatedBuffer">Preallocated buffer where the voxel values are stored. The size of
            the buffer must conform with the X- and Y-size of this image.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Image.UserToDicom(VMS.TPS.Common.Model.Types.VVector,VMS.TPS.Common.Model.API.PlanSetup)">
            <summary>
            Converts a coordinate value from the planning coordinate system used in the Eclipse user interface to DICOM coordinates.
            </summary>
            <param name="user">Coordinate value in the planning coordinate system.</param>
            <param name="planSetup">Plan that defines the planning orientation or null.</param>
            <returns>The coordinate value in DICOM coordinate system.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Image.VoxelToDisplayValue(System.Int32)">
            <summary>
            Converts the given raw voxel value to the corresponding value
            in the user interface display unit, for example, HU, Bq/ml.
            </summary>
            <param name="voxelValue">Voxel value.</param>
            <returns>Value converted to user interface display unit.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.ContrastBolusAgentIngredientName">
            <summary>
            The name of the contrast bolus agent ingredient that is used in the image. If the value has not been specified, returns null.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.CreationDateTime">
            <summary>
            The date when this object was created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.DisplayUnit">
            <summary>
            The name of the display unit in which the voxels of the image are shown in the user interface.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.FOR">
            <summary>
            The UID of the frame of reference.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.HasUserOrigin">
            <summary>
            Defines if a user origin has been specified for the image.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.ImagingOrientation">
            <summary>
            The orientation of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.IsProcessed">
            <summary>
            Returns the value true if an image processing filter is in use for the image.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.Level">
            <summary>
            The level setting. The value is given in the internal voxel scale.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.Origin">
            <summary>
            The origin of the image. In other words, the DICOM coordinates of the center point
            of the upper-left hand corner voxel of the first image plane.
            Supported only for volume images. For other types of images, the return
            value is a vector of Double.NaNs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.Series">
            <summary>
            Used for navigating to parent series.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.UserOrigin">
            <summary>
            The user origin in DICOM coordinates.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.UserOriginComments">
            <summary>
            The text typed on the Origin tab in the Image Properties dialog box.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.Window">
            <summary>
            The window setting. The value is given in the internal voxel scale.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.XDirection">
            <summary>
            The direction of the x-axis in the image.
            Supported only for volume images. For other types of images, the return
            value is a vector of Double.NaNs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.XRes">
            <summary>
            The image resolution in X-direction in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.XSize">
            <summary>
            The image size in X-direction in voxels.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.YDirection">
            <summary>
            The direction of the y-axis in the image.
            Supported only for volume images. For other types of images, the return
            value is a vector of Double.NaNs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.YRes">
            <summary>
            The image resolution in Y-direction in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.YSize">
            <summary>
            The image size in Y-direction in voxels.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.ZDirection">
            <summary>
            The direction of the z-axis in the image.
            Supported only for volume images. For other types of images, the return
            value is a vector of Double.NaNs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.ZRes">
            <summary>
            The image resolution in Z-direction in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Image.ZSize">
            <summary>
            The image size in Z-direction in voxels.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Block">
            <summary>
            Represents a block add-on, a custom-made beam collimating material fixed to a tray, used to shape the beam.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Block.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Block.AddOnMaterial">
            <summary>
            The dosimetric material of the block.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Block.IsDiverging">
            <summary>
            Checks if the block cut is diverging.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Block.TransmissionFactor">
            <summary>
            The transmission factor of the selected material.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Block.Tray">
            <summary>
            The tray on which the block is installed.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Block.TrayTransmissionFactor">
            <summary>
            The transmission factor of the selected tray.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Block.Type">
            <summary>
            The type of the block: shielding or aperture.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationControllerVMAT">
            <summary>
            Controls the VMAT optimization from the Script
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationControllerBase">
            <summary>
            Base class for IMRT and VMAT optimization controllers.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.BrachyTreatmentUnit">
            <summary>
            Represents a brachytherapy afterloader.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.GetActiveRadioactiveSource">
            <summary>
            Returns the active radioactive source of this treatment unit.
            </summary>
            <returns>A RadioactiveSource object if the treatment unit has a source installed. Otherwise null.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.DoseRateMode">
            <summary>
            The dose rate mode of this treatment unit. Supported modes are "HDR", "PDR", "MDR", and "LDR".
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.DwellTimeResolution">
            <summary>
            The dwell time resolution supported by this treatment unit in seconds.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MachineInterface">
            <summary>
            The interface type for communicating with this brachytherapy treatment unit. Possible types are "GammaMed12i", "GammaMedPlus", "VariSource", "Other", and "Omnitron" (obsolete type).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MachineModel">
            <summary>
            The model identifier for this treatment unit. Possible models are "VariSource_5", "VariSource_10",
            "Remote_Afterloading", "Manual_Loading", "GammaMed12i", and "GammaMedPlus".
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MaxDwellTimePerChannel">
            <summary>
            The maximum combined dwell time in a single channel in seconds.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MaxDwellTimePerPos">
            <summary>
            The maximum dwell time in a single dwell position in seconds.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MaxDwellTimePerTreatment">
            <summary>
            The maximum combined dwell time in all the channels during a single treatment session. The value is in seconds.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MaximumChannelLength">
            <summary>
            The maximum channel length supported by this treatment unit in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MaximumDwellPositionsPerChannel">
            <summary>
            The maximum number of dwell positions per channel supported by this treatment unit.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MaximumStepSize">
            <summary>
            The maximum distance between adjacent source positions in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MinimumChannelLength">
            <summary>
            The minimum channel length supported by this treatment unit in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.MinimumStepSize">
            <summary>
            The minimum distance between adjacent source positions in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.NumberOfChannels">
            <summary>
            The number of channels in this treatment unit.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.SourceCenterOffsetFromTip">
            <summary>
            The offset distance (in millimeters) from the tip of the applicator to the center of the source at its first possible dwell position.
            In other words, the offset accounts for half of the active source length and encapsulation.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.SourceMovementType">
            <summary>
            The source movement type as defined in DICOM. Possible types are "STEPWISE", "FIXED", and "OSCILLATING".
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.StepSizeResolution">
            <summary>
            The default step size resolution for this treatment unit in millimeters.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Registration">
            <summary>
            Represents the spatial registration matrix between two frames of reference.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Registration.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Registration.InverseTransformPoint(VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            Transforms a point in the inverse direction, that is, from the
            coordinate system of the RegisteredFOR to the coordinate system
            of the SourceFOR.
            </summary>
            <param name="pt">Point in the RegisteredFOR coordinate system.</param>
            <returns>Given point transformed to the SourceFOR.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Registration.TransformPoint(VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            Transforms a point from the SourceFOR coordinate system to the
            RegisteredFOR coordinate system.
            </summary>
            <param name="pt">Point in the SourceFOR coordinate system.</param>
            <returns>Given point transformed to the RegisteredFOR.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Registration.CreationDateTime">
            <summary>
            The date when this object was created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Registration.RegisteredFOR">
            <summary>
            The frame of reference UID of the registered coordinate system.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Registration.SourceFOR">
            <summary>
            The frame of reference UID of the source coordinate system.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Registration.TransformationMatrix">
            <summary>
            The elements of the 4x4 transformation matrix.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.StandardWedge">
            <summary>
            A standard wedge is a physical piece of material with an angle that is
            static during treatment.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Wedge">
            <summary>
            A wedge is a beam modulating add-on that modifies the dose intensity over all or a part of a treatment beam.
            </summary>
            <remarks>
            Use run-time type information via operator <c>is</c> or <c>as</c>
            to find out the type of a Wedge.
            </remarks>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.AddOn">
            <summary>
            Represents an add-on, which is a beam modifying device that is inserted into a beam
            in an accessory slot of the external beam machine.
            An add-on is used to shape the beam or modulate its intensity or both.
            Add-ons are blocks, MLCs, wedges, compensators, applicators, a tray, and other devices
            or materials that can be fixed to a tray to be mounted into an accessory slot.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.AddOn.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.AddOn.CreationDateTime">
            <summary>
            The date when this object was created.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Wedge.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Wedge.Direction">
            <summary>
            The wedge orientation with respect to the beam orientation, in degrees.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Wedge.WedgeAngle">
            <summary>
            The wedge angle.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.StandardWedge.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationEUDObjective">
            <summary>
            A gEUD objective is an exact, upper or lower objective.
            An exact gEUD objective defines an exact dose value that a target structure should receive.
            An upper gEUD objective defines the maximum dose value that a structure should receive.
            A lower gEUD objective defines the minimum dose value that a target structure should receive.
            
            Generalized Equivalent Uniform Dose (gEUD) is a uniform dose that, if delivered
            over the same number of fractions, yields the same radiobiological effect as the
            non-uniform dose distribution of interest.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationObjective">
            <summary>
            Provides a common base type for all structure-specific optimization objectives.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationObjective.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationObjective.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationObjective.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationObjective.op_Equality(VMS.TPS.Common.Model.API.OptimizationObjective,VMS.TPS.Common.Model.API.OptimizationObjective)">
            <summary>
            The equality operator.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>True if the given objects are the same.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationObjective.op_Inequality(VMS.TPS.Common.Model.API.OptimizationObjective,VMS.TPS.Common.Model.API.OptimizationObjective)">
            <summary>
            The inequality operator.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>True if the given objects are different.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationObjective.Structure">
            <summary>
            The structure to which this optimization objective belongs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationObjective.StructureId">
            <summary>
            The identifier of the structure.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationEUDObjective.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationEUDObjective.Dose">
            <summary>
            The dose value for the objective.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationEUDObjective.Operator">
            <summary>
            Specifies the type of the gEUD objective.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationEUDObjective.ParameterA">
            <summary>
            A tissue-specific parameter that illustrates the effect of the volume on the dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationEUDObjective.Priority">
            <summary>
            The priority of the objective as a positive double.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Dose">
            <summary>
            Represents a 3D dose grid.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Dose.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Dose.GetDoseProfile(VMS.TPS.Common.Model.Types.VVector,VMS.TPS.Common.Model.Types.VVector,System.Double[])">
            <summary>
            Gets the dose profile.
            </summary>
            <param name="start">Location of the first point of the profile.</param>
            <param name="stop">Location of the last point of the profile.</param>
            <param name="preallocatedBuffer">Preallocated buffer where the values are stored. The size of
            the buffer determines the number of values to return.</param>
            <returns>The DoseProfile object holding the dose values along the line segment defined by start and stop parameters.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Dose.GetDoseToPoint(VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            Gets the point dose at a specified location.
            </summary>
            <param name="at">Location</param>
            <returns>Dose value</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Dose.GetVoxels(System.Int32,System.Int32[0:,0:])">
            <summary>
            Gets the voxels of the given dose plane.
            </summary>
            <param name="planeIndex">Zero based index of the plane.</param>
            <param name="preallocatedBuffer">Preallocated buffer where the voxel values are stored. The size of
            the buffer must conform with the X- and Y-size of this dose.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Dose.SetVoxels(System.Int32,System.Int32[0:,0:])">
            <summary>
            [Requires a research license] Deprecated.
            </summary>
            <param name="planeIndex">Zero-based index of the plane.</param>
            <param name="values">The plane of voxel values. The size of the array must conform to the X-size and Y-size of the dose.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Dose.VoxelToDoseValue(System.Int32)">
            <summary>
            Converts the given raw voxel value to the corresponding
            dose value.
            </summary>
            <param name="voxelValue">Voxel value.</param>
            <returns>Value converted to dose.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.DoseMax3D">
            <summary>
            The maximum dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.DoseMax3DLocation">
            <summary>
            The location of the maximum dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.Isodoses">
            <summary>
            A collection of isodoses.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.Origin">
            <summary>
            The origin of the dose matrix. In other words, the DICOM coordinates of the center point
            of the upper-left hand corner voxel of the first dose plane.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.Series">
            <summary>
            Returns the series that contains the dose, or null if the dose is not connected to a series.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.SeriesUID">
            <summary>
            Returns the DICOM UID of the series that contains the dose, or an empty string if the dose is not connected to a series.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.UID">
            <summary>
            The DICOM UID of the dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.XDirection">
            <summary>
            The direction of the x-axis in the dose matrix.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.XRes">
            <summary>
            The dose matrix resolution in X-direction in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.XSize">
            <summary>
            The dose matrix size in X-direction in voxels.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.YDirection">
            <summary>
            The direction of the y-axis in the dose matrix.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.YRes">
            <summary>
            The dose matrix resolution in Y-direction in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.YSize">
            <summary>
            The dose matrix size in Y-direction in voxels.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.ZDirection">
            <summary>
            The direction of the z-axis in the dose matrix.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.ZRes">
            <summary>
            The dose matrix resolution in Z-direction in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Dose.ZSize">
            <summary>
            The dose matrix size in Z-direction in voxels.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Structure">
            <summary>
            A structure is a geometrical representation of an anatomical organ, a treatment volume, a marker, or a support structure.
            See the definition of a DICOM Structure for more information.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.AddContourOnImagePlane(VMS.TPS.Common.Model.Types.VVector[],System.Int32)">
            <summary>
            [Requires a research license] Adds the given contour to the given image plane.
            </summary>
            <param name="contour">The contour points, z coordinates are ignored.</param>
            <param name="z">A zero-based image plane index.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.And(VMS.TPS.Common.Model.API.SegmentVolume)">
            <summary>
            [Requires a research license] Boolean And operation for structures that have a segment model. Provided here for convenience.
            </summary>
            <param name="other">The segment volume that is combined with this segment volume.</param>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.AsymmetricMargin(VMS.TPS.Common.Model.Types.AxisAlignedMargins)">
            <summary>
            [Requires a research license] Asymmetric margin operation for structures that have a segment model. Provided here for convenience.
            </summary>
            <param name="margins">The margins aligned to the axes of the image coordinate system, in millimeters. The maximum is 50.</param>
            <returns>A new expanded or shrunk segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.CanConvertToHighResolution">
            <summary>
            [Requires a research license] Returns true if this structure can be converted to a high-resolution structure.
            </summary>
            <returns>true if this structure can be converted to a high-resolution structure.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.CanSetAssignedHU(System.String@)">
            <summary>
            [Requires a research license] Checks if the HU value of the structure can be modified.
            </summary>
            <param name="errorMessage">If the HU value cannot be set, contains the error message.</param>
            <returns>Returns true if the HU value for this structure can be modified.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.ClearAllContoursOnImagePlane(System.Int32)">
            <summary>
            [Requires a research license] Clears the contours on the given image plane.
            </summary>
            <param name="z">A zero-based image plane index.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.ConvertToHighResolution">
            <summary>
            [Requires a research license] Converts this structure to a high-resolution structure.
            Increases the resolution of the segment volume in cases where the image size is larger than 256x256 voxels.
            </summary>
            <exception cref="T:System.InvalidOperationException">Can not convert this structure.</exception>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.GetAssignedHU(System.Double@)">
            <summary>
            Returns the HU value of the material.
            </summary>
            <param name="huValue">Double value that will contain the HU value upon return from this method</param>
            <returns>Returns true if a HU value has been assigned for this structure.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.GetContoursOnImagePlane(System.Int32)">
            <summary>
            If the structure has a segment, gets the contours of the structure on the given image plane.
            </summary>
            <param name="z">Zero based image plane index.</param>
            <returns>A jagged array that holds the points for all contours of the structure on the given image plane.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.GetNumberOfSeparateParts">
            <summary>
            If the structure has a segment, returns the number of separate parts.
            </summary>
            <returns>Returns the number of separate parts in this structure</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.GetSegmentProfile(VMS.TPS.Common.Model.Types.VVector,VMS.TPS.Common.Model.Types.VVector,System.Collections.BitArray)">
            <summary>
            If the structure has a segment, gets the segment profile.
            </summary>
            <param name="start">Location of the first point of the profile.</param>
            <param name="stop">Location of the last point of the profile.</param>
            <param name="preallocatedBuffer">Preallocated buffer where the values are stored. The size of
            the buffer determines the number of values to return.</param>
            <returns>The SegmentProfile object holding segment values (true if inside, false otherwise) along the line segment defined by start and stop parameters.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.IsPointInsideSegment(VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            If the structure has a segment, checks if the given point lies within the structure.
            </summary>
            <param name="point">Location of the point.</param>
            <returns>True if the point lies within the structure, false otherwise.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.Margin(System.Double)">
            <summary>
            [Requires a research license] Margin operation for structures that have a segment model. Provided here for convenience.
            </summary>
            <param name="marginInMM">The used margin in millimeters. The maximum is 50.</param>
            <returns>A new expanded or shrunk segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.Not">
            <summary>
            [Requires a research license] Boolean Not operation for structures that have a segment model. Provided here for convenience.
            </summary>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.Or(VMS.TPS.Common.Model.API.SegmentVolume)">
            <summary>
            [Requires a research license] Boolean Or operation for structures that have a segment model. Provided here for convenience.
            </summary>
            <param name="other">The segment volume that is combined with this volume.</param>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.ResetAssignedHU">
            <summary>
            [Requires a research license] Resets the HU value of the material to "undefined".
            </summary>
            <returns>
            Returns true if the HU value was set to "undefined".
            Returns false, if the value could not be reset. This can happen if the material has been set to a structure.
            </returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.SetAssignedHU(System.Double)">
            <summary>
            [Requires a research license] Sets the HU value of the material.
            </summary>
            <param name="huValue">A double value that contains the HU value to be set.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.Sub(VMS.TPS.Common.Model.API.SegmentVolume)">
            <summary>
            [Requires a research license] Boolean Sub operation for structures that have a segment model. Provided here for convenience.
            </summary>
            <param name="other">The segment volume that is subtracted from this segment volume.</param>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.SubtractContourOnImagePlane(VMS.TPS.Common.Model.Types.VVector[],System.Int32)">
            <summary>
            [Requires a research license] Subtracts the given contour from the given image plane.
            </summary>
            <param name="contour">The contour points, z coordinates are ignored.</param>
            <param name="z">A zero-based image plane index.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.Xor(VMS.TPS.Common.Model.API.SegmentVolume)">
            <summary>
            [Requires a research license] Boolean Xor operation for structures that have a segment model. Provided here for convenience.
            </summary>
            <param name="other">The segment volume that is combined with this volume.</param>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Structure.op_Implicit(VMS.TPS.Common.Model.API.Structure)~VMS.TPS.Common.Model.API.SegmentVolume">
            <summary>
            An implicit conversion from Structure to SegmentVolume makes it easier to
            use the SegmentVolume functionality, such as the boolean operators and margin.
            </summary>
            <param name="structure">The converted structure.</param>
            <returns>The segment volume of the structure.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.CenterPoint">
            <summary>
            The center point of the structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.Color">
            <summary>
            The color of the structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.DicomType">
            <summary>
            The DICOM type of the structure, for example, PTV, MARKER, or ORGAN.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.HasSegment">
            <summary>
            Checks if the structure has a segment.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.IsEmpty">
            <summary>
            Checks if the structure is empty.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.IsHighResolution">
            <summary>
            true if this structure is a high-resolution structure. Otherwise false.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.MeshGeometry">
            <summary>
            The mesh geometry.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.ROINumber">
            <summary>
            The DICOM ROI Number of the structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.SegmentVolume">
            <summary>
            [Requires a research license] Provides access to the segment volume of the structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.StructureCodeInfos">
            <summary>
            A collection of structure codes attached to this structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.Volume">
            <summary>
            The calculated volume.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Structure.Id">
            <summary>
            The identifier of the Structure.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.PlanSum">
            <summary>
            A plan sum describes the cumulative dose summation of several treatment plans.
            It can be used, for example, to evaluate the dose the patient received from a treatment plan and boost plan together.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSum.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSum.GetPlanSumOperation(VMS.TPS.Common.Model.API.PlanSetup)">
            <summary>
            Returns the summing operation of the plan in the plan sum.
            </summary>
            <param name="planSetupInPlanSum">A plan that belongs to this plan sum, included in collection <see cref="P:VMS.TPS.Common.Model.API.PlanSum.PlanSetups">PlanSetups</see>.</param>
            <returns>The summing operation of the plan in the plan sum.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSum.GetPlanWeight(VMS.TPS.Common.Model.API.PlanSetup)">
            <summary>
            Returns the weight of the plan included in the sum.
            </summary>
            <param name="planSetupInPlanSum">A plan that belongs to this plan sum, included in collection<see cref="P:VMS.TPS.Common.Model.API.PlanSum.PlanSetups">PlanSetups</see>.</param>
            <returns>The weight of the plan in the plan sum.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSum.Course">
            <summary>
            Used for navigating to the parent course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSum.PlanSumComponents">
            <summary>
            A collection of plans in a plan sum.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSum.StructureSet">
            <summary>
            The structure set.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSum.PlanSetups">
            <summary>
            A collection of plan setups.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.PlanSumComponent">
            <summary>
            Represents a component plan of a plan sum.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanSumComponent.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSumComponent.PlanSetupId">
            <summary>
            The unique identification of the plan within the course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSumComponent.PlanSumOperation">
            <summary>
            The summing operation (+ or -) that defines how the dose of a component plan contributes to the plan sum.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PlanSumComponent.PlanWeight">
            <summary>
            The weight of a component plan included in the plan sum.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizerDVH">
            <summary>
            [Requires a research license] Contains a structure-specific Dose Volume Histogram (DVH) curve generated in optimization. 
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizerDVH.CurveData">
            <summary>
            An array of DVH points representing the DVH curve data.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizerDVH.Structure">
            <summary>
            The corresponding structure for the DVH curve data.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizerObjectiveValue">
            <summary>
            [Requires a research license] The optimizer objective function value for the structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizerObjectiveValue.Structure">
            <summary>
            The corresponding structure for the objective function value.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizerObjectiveValue.Value">
            <summary>
            The objective function value.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.CalculationResult">
            <summary>
            [Requires a research license] Holds the result of the calculation (pass/fail).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.CalculationResult.Success">
            <summary>
            Returns true if calculation did not return any errors. Otherwise returns false.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizerResult">
            <summary>
            [Requires a research license] Holds the result of the optimization (pass/fail).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizerResult.StructureDVHs">
            <summary>
            A list of Dose Volume Histogram (DVH) curves for structures.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizerResult.StructureObjectiveValues">
            <summary>  
            The list of objective function values per structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizerResult.TotalObjectiveFunctionValue">
            <summary>
            The total objective function value for the optimization.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizerResult.NumberOfIMRTOptimizerIterations">
            <summary>
            The number of iterations taken by the IMRT optimizer.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ExternalPlanSetup">
            <summary>
            Represents an external beam plan. For more information, see the definition of the DICOM RT Plan.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CalculateDoseWithPresetValues(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,VMS.TPS.Common.Model.Types.MetersetValue}})">
            <summary>
            [Requires a research license] Calculates the dose for the plan with preset meterset values.
            This applies only to IMRT beams.
            </summary>
            <param name="presetValues">The list of preset meterset values for the beams. An element of the list should contain a pair consisting of the 
            beam identifier (as the key) and the corresponding preset meterset value for the beam. 
            Each beam in the plan must have one entry in the list.</param>
            <returns>The calculation result. See calculation details from <see cref="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs">the calculation logs</see>.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CalculateDose">
            <summary>
            [Requires a research license] Calculates the dose for the plan.
            </summary>
            <returns>The calculation result. See calculation details from <see cref="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs">the calculation logs</see>.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CalculateLeafMotionsAndDose">
            <summary>
            [Requires a research license] Calculate leaf motions and dose using the calculation models defined in the plan setup.
            </summary>
            <returns>Result of the intermediate dose calculation.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CalculateLeafMotions">
            <summary>
            [Requires a research license] Calculates leaf motions using the calculation options of the plan setup.
            Before calling this method, set the calculation models for leaf motions and dose calculation.
            </summary>
            <returns>The calculation result. See calculation details from <see cref="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs">the calculation logs</see>.</returns>
            <seealso cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationModel(VMS.TPS.Common.Model.Types.CalculationType,System.String)">SetCalculationModel</seealso>
            <seealso cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationOption(System.String,System.String,System.String)">SetCalculationOption</seealso>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CalculateLeafMotions(VMS.TPS.Common.Model.Types.LMCVOptions)">
            <summary>
            [Requires a research license] Calculates leaf motions using the given calculation options, which override the calculation options defined for the plan setup.
            Before calling this method, set the calculation models for leaf motions and dose calculation.
            The used leaf motion calculation algorithm must be Varian Leaf Motion Calculator (LMCV).
            </summary>
            <param name="options">Calculation options for the Varian Leaf Motion Calculator (LMCV) algorithm.</param>
            <returns>The calculation result. See calculation details from <see cref="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs">the calculation logs</see>.</returns>
            <seealso cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationModel(VMS.TPS.Common.Model.Types.CalculationType,System.String)">SetCalculationModel</seealso>
            <seealso cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationOption(System.String,System.String,System.String)">SetCalculationOption</seealso>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CalculateLeafMotions(VMS.TPS.Common.Model.Types.SmartLMCOptions)">
            <summary>
            [Requires a research license] Calculates leaf motions using the given calculation options, which override the calculation options defined for the plan setup.
            Before calling this method, set the calculation models for leaf motions and dose calculation.
            The used leaf motion calculation algorithm must be Varian Smart LMC.
            </summary>
            <param name="options">Calculation options for the Varian Smart LMC algorithm.</param>
            <returns>The calculation result. See calculation details from <see cref="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs">the calculation logs</see>.</returns>
            <seealso cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationModel(VMS.TPS.Common.Model.Types.CalculationType,System.String)">SetCalculationModel</seealso>
            <seealso cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationOption(System.String,System.String,System.String)">SetCalculationOption</seealso>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CalculateLeafMotions(VMS.TPS.Common.Model.Types.LMCMSSOptions)">
            <summary>
            [Requires a research license] Calculates leaf motions using the given calculation options, which override the calculation options defined for the plan setup.
            Before calling this method, set the calculation models for leaf motions and dose calculation.
            The used leaf motion calculation algorithm must be MSS Leaf Motion Calculator (LMCMSS).
            </summary>
            <param name="options">Calculation options for the MSS Leaf Motion Calculator (LMCMSS) algorithm.</param>
            <returns>The calculation result. See calculation details from <see cref="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs">the calculation logs</see>.</returns>
            <seealso cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationModel(VMS.TPS.Common.Model.Types.CalculationType,System.String)">SetCalculationModel</seealso>
            <seealso cref="M:VMS.TPS.Common.Model.API.PlanSetup.SetCalculationOption(System.String,System.String,System.String)">SetCalculationOption</seealso>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.GetModelsForCalculationType(VMS.TPS.Common.Model.Types.CalculationType)">
            <summary>
            Returns a list of calculation models for the given calculation type.
            </summary>
            <param name="calculationType">The type of calculation.</param>
            <returns>The list of calculation models.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.Optimize(System.Int32)">
            <summary>
            [Requires a research license] Runs IMRT optimization for the plan setup. 
            All existing optimal fluences are removed from the beams.
            Fails if the method cannot select an MLC for the beams.
            Plan normalization method is changed to 'No plan normalization' after successful optimization.
            </summary>
            <param name="maxIterations">The maximum number of iterations.</param>
            <returns>The result of the optimization.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.Optimize(System.Int32,VMS.TPS.Common.Model.Types.OptimizationOption)">
            <summary>
            [Requires a research license] Runs IMRT optimization for the plan setup.
            Fails if the method cannot select an MLC for the beams.
            Plan normalization method is changed to 'No plan normalization' after successful optimization.
            </summary>
            <param name="maxIterations">The maximum number of iterations.</param>
            <param name="optimizationOption">Optimization options.</param>
            <returns>The result of the optimization.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.Optimize(System.Int32,VMS.TPS.Common.Model.Types.OptimizationOption,System.String)">
            <summary>
            [Requires a research license] Runs IMRT optimization for the plan setup.
            You can add the Multileaf Collimator (MLC) as a parameter.
            Plan normalization method is changed to 'No plan normalization' after successful optimization.
            </summary>
            <param name="maxIterations">The maximum number of iterations.</param>
            <param name="optimizationOption">Optimization option specifying the initial state.</param>
            <param name="mlcId">The identifier for the Multileaf Collimator (MLC).</param>
            <returns>The result of the optimization.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.Optimize">
            <summary>
            [Requires a research license] Runs IMRT optimization for the plan setup. The Multileaf Collimator (MLC) is determined automatically. If there are more than one MLC or no MLC at all, 
            an exception is thrown.
            Plan normalization method is changed to 'No plan normalization' after successful optimization.
            </summary>
            <returns>The result of the optimization.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.Optimize(VMS.TPS.Common.Model.Types.OptimizationOptionsIMRT)">
            <summary>
            [Requires a research license] Runs IMRT optimization for the plan setup.
            Plan normalization method is changed to 'No plan normalization' after successful optimization.
            </summary>
            <param name="options">Options specifying initial state, intermediate dose, and termination upon convergence.</param>
            <returns>Result of the optimization.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.RemoveTemporaryPlan">
            <summary>
            This method is used to remove the temporary copy of the original IPlanSetup object that was created for intermediate dose calculation.
            The method should be called only after the optimization is done, otherwise the intermediate dose is disposed too early. The temporary copy 
            should be removed because it is copy of an existing plan and this might cause problems when saving other plans to database, e.g., in automated 
            validation tests. The plan is removed in the same way as in the optimization client for Eclipse.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.OptimizeVMAT(System.String)">
            <summary>
            [Requires a research license] Runs VMAT optimization for the plan setup.
            You can add the MLC as a parameter.
            Plan normalization method is changed to 'No plan normalization' after successful optimization.
            </summary>
            <param name="mlcId">The identifier for the Multileaf Collimator (MLC).</param>
            <returns>The result of the optimization.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.OptimizeVMAT">
            <summary>
            [Requires a research license] Runs VMAT optimization for the plan setup.
            The Multileaf Collimator (MLC) is determined automatically. If there are more than one MLC or no MLC at all, 
            an exception is thrown.
            Plan normalization method is changed to 'No plan normalization' after successful optimization.
            </summary>
            <returns>The result of the optimization.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.OptimizeVMAT(VMS.TPS.Common.Model.Types.OptimizationOptionsVMAT)">
            <summary>
            [Requires a research license] Runs VMAT optimization for the plan setup using intermediate dose calculation.
            Plan normalization method is changed to 'No plan normalization' after successful optimization.
            </summary>
            <param name="options">VMAT optimization options.</param>
            <returns>The result of the optimization.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CalculateDVHEstimates(System.String,System.Collections.Generic.Dictionary{System.String,VMS.TPS.Common.Model.Types.DoseValue},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            [Requires a research license] Calculates DVH estimates for the plan.
            </summary>
            <param name="modelId">DVH estimation model ID.</param>
            <param name="targetDoseLevels">Dose levels for the target structures.</param>
            <param name="structureMatches">Matching between the IDs of the structures contained in the structure set used in the plan (the Key in the Dictionary)
            and the structures used in the DVH estimation model (the Value in the Dictionary).</param>
            <returns>The calculation result. See the calculation details <see cref="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs"> in the calculation logs</see></returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.AddArcBeam(VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters,VMS.TPS.Common.Model.Types.VRect{System.Double},System.Double,System.Double,System.Double,VMS.TPS.Common.Model.Types.GantryDirection,System.Double,VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            [Requires a research license] Adds a new arc beam to the plan.
            </summary>
            <param name="machineParameters">Configuration of the used treatment unit. See ExternalBeamMachineParameters.</param>
            <param name="jawPositions">The jaw positions of the treatment beam in millimeters, and
            in IEC BEAM LIMITING DEVICE coordinates.</param>
            <param name="collimatorAngle">The orientation of the IEC BEAM LIMITING DEVICE
            coordinate system with respect to the IEC GANTRY coordinate system (in degrees).</param>
            <param name="gantryAngle">The orientation of the IEC GANTRY coordinate system with
            respect to the IEC FIXED REFERENCE coordinate system (in degrees).</param>
            <param name="gantryStop">The stop angle of the gantry, in degrees.</param>
            <param name="gantryDirection">The rotation direction of the arc.</param>
            <param name="patientSupportAngle">The orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).</param>
            <param name="isocenter">The isocenter position, in millimeters.</param>
            <returns>The created Beam.</returns>
            <remarks>All angles must be specified in the range [0, 360[.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.AddConformalArcBeam(VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters,System.Double,System.Int32,System.Double,System.Double,VMS.TPS.Common.Model.Types.GantryDirection,System.Double,VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            [Requires a research license] Adds a new conformal arc beam to the plan.
            </summary>
            <param name="machineParameters">Configuration of the used treatment unit. See ExternalBeamMachineParameters.</param>
            <param name="collimatorAngle">The orientation of the IEC BEAM LIMITING DEVICE
            coordinate system with respect to the IEC GANTRY coordinate system (in degrees).</param>
            <param name="controlPointCount">The number of control points to use.</param>
            <param name="gantryAngle">The orientation of the IEC GANTRY coordinate system with
            respect to the IEC FIXED REFERENCE coordinate system (in degrees).</param>
            <param name="gantryStop">The stop angle of the gantry, in degrees.</param>
            <param name="gantryDirection">The rotation direction of the arc.</param>
            <param name="patientSupportAngle">The orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).</param>
            <param name="isocenter">The isocenter position, in millimeters.</param>
            <returns>The created beam.</returns>
            <remarks>All angles must be specified in the range [0, 360[.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.AddMLCArcBeam(VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters,System.Single[0:,0:],VMS.TPS.Common.Model.Types.VRect{System.Double},System.Double,System.Double,System.Double,VMS.TPS.Common.Model.Types.GantryDirection,System.Double,VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            [Requires a research license] Adds a new arc beam with an MLC to the plan.
            </summary>
            <param name="machineParameters">Configuration of the used treatment unit. See ExternalBeamMachineParameters.</param>
            <param name="leafPositions">The positions of the beam collimator leaf pairs in millimeters, and in
            the IEC BEAMLIMITING DEVICE coordinate axis appropriate to the MLC device type. For example,
            the X-axis for MLCX and the Y-axis for MLCY. The two-dimensional array is
            indexed [bank, leaf], where the bank is either 0 or 1. Bank 0 represents
            the leaf bank to the negative MLC X direction, and bank 1 to the
            positive MLC X direction. Passing null selects the default.</param>
            <param name="jawPositions">The jaw positions of the treatment beam in millimeters, and
            in IEC BEAM LIMITING DEVICE coordinates.</param>
            <param name="collimatorAngle">The orientation of the IEC BEAM LIMITING DEVICE
            coordinate system with respect to the IEC GANTRY coordinate system (in degrees).</param>
            <param name="gantryAngle">The orientation of the IEC GANTRY coordinate system with
            respect to the IEC FIXED REFERENCE coordinate system (in degrees).</param>
            <param name="gantryStop">The stop angle of the gantry, in degrees.</param>
            <param name="gantryDirection">The direction of the arc.</param>
            <param name="patientSupportAngle">The orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).</param>
            <param name="isocenter">The isocenter position, in millimeters.</param>
            <returns>The created beam.</returns>
            <remarks>All angles must be specified in the range [0, 360[.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.AddMLCBeam(VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters,System.Single[0:,0:],VMS.TPS.Common.Model.Types.VRect{System.Double},System.Double,System.Double,System.Double,VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            [Requires a research license] Adds a new beam with an MLC to the plan.
            </summary>
            <param name="machineParameters">Configuration of the used treatment unit. See ExternalBeamMachineParameters.</param>
            <param name="leafPositions">The positions of the beam collimator leaf pairs in millimeters, and in
            the IEC BEAMLIMITING DEVICE coordinate axis appropriate to the MLC device type. For example,
            the X-axis for MLCX and the Y-axis for MLCY. The two-dimensional array is
            indexed [bank, leaf] where the bank is either 0 or 1. Bank 0 represents
            the leaf bank to the negative MLC X direction, and bank 1 to the
            positive MLC X direction. Passing null selects the default.</param>
            <param name="jawPositions">The jaw positions of the treatment beam in millimeters, and
            in IEC BEAM LIMITING DEVICE coordinates.</param>
            <param name="collimatorAngle">The orientation of the IEC BEAM LIMITING DEVICE
            coordinate system with respect to the IEC GANTRY coordinate system (in degrees).</param>
            <param name="gantryAngle">The orientation of the IEC GANTRY coordinate system with
            respect to the IEC FIXED REFERENCE coordinate system (in degrees).</param>
            <param name="patientSupportAngle">The orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).</param>
            <param name="isocenter">The isocenter position, in millimeters.</param>
            <returns>The created beam.</returns>
            <remarks>All angles must be specified in the range [0, 360[.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.AddMultipleStaticSegmentBeam(VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters,System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double,System.Double,VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            [Requires a research license] Adds a new IMRT beam to the plan and defines Multiple Static Segments as the delivery technique.
            </summary>
            <param name="machineParameters">Configuration of the used treatment unit. See ExternalBeamMachineParameters.</param>
            <param name="metersetWeights">The meterset weight for each control point of the beam. The number of meterset weight items defines the number of created control points.</param>
            <param name="collimatorAngle">The orientation of the IEC BEAM LIMITING DEVICE
            coordinate system with respect to the IEC GANTRY coordinate system (in degrees).</param>
            <param name="gantryAngle">The orientation of the IEC GANTRY coordinate system with
            respect to the IEC FIXED REFERENCE coordinate system (in degrees).</param>
            <param name="patientSupportAngle">The orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).</param>
            <param name="isocenter">The isocenter position, in millimeters.</param>
            <returns>The created beam.</returns>
            <remarks>All angles must be specified in the range [0, 360[.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.AddSlidingWindowBeam(VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters,System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double,System.Double,VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            [Requires a research license] Adds a new IMRT beam to the plan and defines Sliding Window as the delivery technique.
            </summary>
            <param name="machineParameters">Configuration of the used treatment unit. See ExternalBeamMachineParameters.</param>
            <param name="metersetWeights">The meterset weight for each control point of the beam. The number of meterset weight items defines the number of created control points.</param>
            <param name="collimatorAngle">The orientation of the IEC BEAM LIMITING DEVICE
            coordinate system with respect to the IEC GANTRY coordinate system (in degrees).</param>
            <param name="gantryAngle">The orientation of the IEC GANTRY coordinate system with
            respect to the IEC FIXED REFERENCE coordinate system (in degrees).</param>
            <param name="patientSupportAngle">The orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).</param>
            <param name="isocenter">The isocenter position, in millimeters.</param>
            <returns>The created beam.</returns>
            <remarks>All angles must be specified in the range [0, 360[.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.AddStaticBeam(VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters,VMS.TPS.Common.Model.Types.VRect{System.Double},System.Double,System.Double,System.Double,VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            [Requires a research license] Adds a new static beam to the plan.
            </summary>
            <param name="machineParameters">Configuration of the used treatment unit. See ExternalBeamMachineParameters.</param>
            <param name="jawPositions">The jaw positions of the treatment beam in millimeters, and
            in IEC BEAM LIMITING DEVICE coordinates.</param>
            <param name="collimatorAngle">The orientation of the IEC BEAM LIMITING DEVICE
            coordinate system with respect to the IEC GANTRY coordinate system (in degrees).</param>
            <param name="gantryAngle">The orientation of the IEC GANTRY coordinate system with
            respect to the IEC FIXED REFERENCE coordinate system (in degrees).</param>
            <param name="patientSupportAngle">The orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).</param>
            <param name="isocenter">The isocenter position, in millimeters.</param>
            <returns>The created beam.</returns>
            <remarks>All angles must be specified in the range [0, 360[.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.AddVMATBeam(VMS.TPS.Common.Model.Types.ExternalBeamMachineParameters,System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double,System.Double,VMS.TPS.Common.Model.Types.GantryDirection,System.Double,VMS.TPS.Common.Model.Types.VVector)">
            <summary>
            [Requires a research license] Adds a new VMAT beam to the plan.
            </summary>
            <param name="machineParameters">Configuration of the used treatment unit. See ExternalBeamMachineParameters.</param>
            <param name="metersetWeights">The meterset weight for each control point of the beam. The number of meterset weight items defines the number of created control points.</param>
            <param name="collimatorAngle">The orientation of the IEC BEAM LIMITING DEVICE
            coordinate system with respect to the IEC GANTRY coordinate system (in degrees).</param>
            <param name="gantryAngle">The orientation of the IEC GANTRY coordinate system with
            respect to the IEC FIXED REFERENCE coordinate system (in degrees).</param>
            <param name="gantryStop">The stop angle of the gantry, in degrees.</param>
            <param name="gantryDirection">The rotation direction of the arc.</param>
            <param name="patientSupportAngle">The orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).</param>
            <param name="isocenter">The isocenter position, in millimeters.</param>
            <returns>The created beam.</returns>
            <remarks>All angles must be specified in the range [0, 360[.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CreateEvaluationDose">
            <summary>
            [Requires a research license] Creates an evaluation dose for the plan. The voxels in an evaluation dose
            can be set using the Eclipse Scripting API instead of a dose calculation algorithm.
            To create an evaluation dose, the plan must not contain any beams.
            To set the evaluation dose voxels, retrieve the dose matrix using the <see cref="P:VMS.TPS.Common.Model.API.ExternalPlanSetup.DoseAsEvaluationDose">DoseAsEvaluationDose</see> property of the plan
            and then use <see cref="M:VMS.TPS.Common.Model.API.EvaluationDose.SetVoxels(System.Int32,System.Int32[0:,0:])">SetVoxels</see>.
            </summary>
            <returns>A new evaluation dose object.</returns>
            <remarks>Saving modifications to the database is not possible if the evaluation dose has been created but voxels have not been set.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.RemoveBeam(VMS.TPS.Common.Model.API.Beam)">
            <summary>
            [Requires a research license] Removes a beam from the plan.
            </summary>
            <param name="beam">The beam that will be removed from the plan.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ExternalPlanSetup.DoseAsEvaluationDose">
            <summary>
            [Requires a research license] The evaluation dose is connected to the plan and contains voxels that are set by
            <see cref="M:VMS.TPS.Common.Model.API.EvaluationDose.SetVoxels(System.Int32,System.Int32[0:,0:])">SetVoxels</see>
            instead of the dose calculation algorithm. Returns null if the plan has no evaluation dose.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.MLC">
            <summary>
            Represents a Multileaf Collimator (MLC) add-on.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.MLC.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.MLC.ManufacturerName">
            <summary>
            The name of the manufacturer of the Multileaf Collimator (MLC).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.MLC.MinDoseDynamicLeafGap">
            <summary>
            For dose-dynamic treatments, the minimum gap (mm) between moving,
            open leaf pairs that the Multileaf Collimator (MLC) hardware can handle.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.MLC.Model">
            <summary>
            The number or name of the Multileaf Collimator (MLC) model.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.MLC.SerialNumber">
            <summary>
            The serial number given to the Multileaf Collimator (MLC) by the factory.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Hospital">
            <summary>
            Represents a hospital.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Hospital.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Hospital.CreationDateTime">
            <summary>
            The date when this object was created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Hospital.Location">
            <summary>
            The location of the hospital.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationIMRTBeamParameter">
            <summary>
            Beam-specific optimization parameter for IMRT optimization.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationParameter">
            <summary>
            Provides a common base type for all optimization parameters.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationParameter.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationParameter.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationParameter.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationParameter.op_Equality(VMS.TPS.Common.Model.API.OptimizationParameter,VMS.TPS.Common.Model.API.OptimizationParameter)">
            <summary>
            The equality operator.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>True if the given objects are the same.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationParameter.op_Inequality(VMS.TPS.Common.Model.API.OptimizationParameter,VMS.TPS.Common.Model.API.OptimizationParameter)">
            <summary>
            The inequality operator.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>True if the given objects are different.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationIMRTBeamParameter.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationIMRTBeamParameter.Beam">
            <summary>
            The beam to which this parameter belongs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationIMRTBeamParameter.BeamId">
            <summary>
            The identifier of the beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationIMRTBeamParameter.Excluded">
            <summary>
            True if the beam is excluded from the optimization.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationIMRTBeamParameter.FixedJaws">
            <summary>
            If true, the collimator jaw positions of the beam remain the same during the optimization.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationIMRTBeamParameter.SmoothX">
            <summary>
            A smoothing parameter that controls the fluence profiles.
            A high value smoothes the fluence more than a low value.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationIMRTBeamParameter.SmoothY">
            <summary>
            A smoothing parameter that controls the fluence profiles.
            A high value smoothes the fluence more than a low value.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.BrachySolidApplicator">
            <summary>
            Represents a brachytherapy solid applicator part, such as a tandem or ovoid in a Fletcher Suit Delclos (FSD) applicator set.
            This class holds only the metadata related to the solid applicator part, and links
            to the <see cref="T:VMS.TPS.Common.Model.API.Catheter">catheters</see> that are part of the solid applicator.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BrachySolidApplicator.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.ApplicatorSetName">
            <summary>
            The name of the solid applicator set to which this part belongs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.ApplicatorSetType">
            <summary>
            The type of the solid applicator set to which this part belongs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.Category">
            <summary>
            The category of the solid applicator set to which this part belongs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.Catheters">
            <summary>
            The channel(s) of this solid applicator part.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.Note">
            <summary>
            A note or short description of the solid applicator part.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.PartName">
            <summary>
            The name of the solid applicator part.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.PartNumber">
            <summary>
            The part number of the solid applicator.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.Summary">
            <summary>
            A summary of the solid applicator set to which this part belongs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.UID">
            <summary>
            The unique identifier of the solid applicator part.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.Vendor">
            <summary>
            The vendor of the solid applicator set to which this part belongs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachySolidApplicator.Version">
            <summary>
            The version of the solid applicator part.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.BeamParameters">
            <summary>
            [Requires a research license] An editable copy of the parameters of a treatment beam.
            </summary>
            <remarks>
            To apply the parameters, call the ApplyParameters method of the
            Beam class. Because the parameters are simple copies, they do not
            reflect the current state of the data model.
            </remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BeamParameters.SetAllLeafPositions(System.Single[0:,0:])">
            <summary>
            [Requires a research license] Assigns the given leaf positions to each of the control point parameters.
            </summary>
            <param name="leafPositions">
            The positions of the MLC leaf pairs (in millimeters) in the IEC BEAMLIMITING DEVICE
            coordinate axis appropriate to the MLC device type: the X-axis for MLCX and the Y-axis for MLCY.
            The two-dimensional array is indexed [bank, leaf], where the bank is either 0 or 1.
            Bank 0 represents the leaf bank to the negative MLC X direction, and bank 1 to the positive MLC X direction.</param>
            <remarks>To apply the parameters, call the <see cref="M:VMS.TPS.Common.Model.API.Beam.ApplyParameters(VMS.TPS.Common.Model.API.BeamParameters)">ApplyParameters</see>
            method of the Beam class.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BeamParameters.SetJawPositions(VMS.TPS.Common.Model.Types.VRect{System.Double})">
            <summary>
            [Requires a research license] Assigns the given jaw positions to each of the control point parameters.
            </summary>
            <param name="positions">A rectangle describing the jaw positions in millimeters in IEC BEAM LIMITING DEVICE coordinates.</param>
            <remarks>To apply the parameters, call the <see cref="M:VMS.TPS.Common.Model.API.Beam.ApplyParameters(VMS.TPS.Common.Model.API.BeamParameters)">ApplyParameters</see>
            method of the Beam class.</remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BeamParameters.ControlPoints">
            <summary>
            [Requires a research license] Editable control point parameters copied from the
            treatment beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BeamParameters.GantryDirection">
            <summary>
            [Requires a research license] The direction of gantry rotation (clockwise or counterclockwise).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BeamParameters.Isocenter">
            <summary>
            [Requires a research license] A copy of the isocenter position, in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BeamParameters.WeightFactor">
            <summary>
            [Requires a research license] The weight factor of the beam.
            </summary>
            <remarks>
            The total dose distribution of a plan is calculated by adding the individual beam dose
            distributions. Before doing this, the dose distributions of each beam are multiplied
            with the respective beam weights, which indicate the relative weight of each beam in
            a plan. How the weight factors affect the dose distribution is determined by the
            selected beam normalization method.
            </remarks>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.AddOnMaterial">
            <summary>
            Add-on material describes the dosimetric and physical properties of the metal alloy or other substance used to create the add-on.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.AddOnMaterial.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Study">
            <summary>
            A study is a collection of series.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Study.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Study.CreationDateTime">
            <summary>
            The date when this object was created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Study.Series">
            <summary>
            A collection of series.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Study.UID">
            <summary>
            The DICOM UID.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.PatientSummary">
            <summary>
            Basic information about the patient.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PatientSummary.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.CreationDateTime">
            <summary>
            The date when the patient object was created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.DateOfBirth">
            <summary>
            The date of birth of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.FirstName">
            <summary>
            The first name of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.Id">
            <summary>
            The patient ID.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.Id2">
            <summary>
            The patient ID2.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.LastName">
            <summary>
            The last name of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.MiddleName">
            <summary>
            The middle name of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.Sex">
            <summary>
            The gender of the patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.PatientSummary.SSN">
            <summary>
            The Social Security Account Number (SSN) of the patient.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationMeanDoseObjective">
            <summary>
            A mean objective defines the mean dose that should not be exceeded. The mean objective is
            used to decrease the dose that a structure receives.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationMeanDoseObjective.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationMeanDoseObjective.Dose">
            <summary>
            The dose value for the objective.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationMeanDoseObjective.Priority">
            <summary>
            The priority of the objective as a positive double.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationLineObjective">
            <summary>
            A line objective is a collection of point objectives that have the same priority.
            It is used to limit the dose in a given structure.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationLineObjective.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationLineObjective.CurveData">
            <summary>
            The points in the line objective.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationLineObjective.Operator">
            <summary>
            Specifies the type of the line objective.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationLineObjective.Priority">
            <summary>
            The priority of the objective as a positive double.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Slot">
            <summary>
            A slot is the location (typically on the collimator head of the gantry) where an add-on, such as a wedge or block, is mounted.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Slot.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Slot.Number">
            <summary>
            The slot number is unique within an instance of a treatment machine.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Application">
            <summary>
            The main application interface.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.CreateApplication(System.String,System.String)">
            <summary>
            Creates an application instance and logs into the system.
            </summary>
            <param name="username">Username for logging in or null value to invoke an interactive login dialog.</param>
            <param name="password">Password for logging in or null value to invoke an interactive login dialog</param>
            <returns>Application object that is the root of the datamodel.</returns>
            <remarks>
            Code that uses this API must run on a single-threaded apartment
            (STAThread). Dispose must be called before the program exits. Only
            one Application instance may be created during the entire run of the
            program.
            </remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.OpenPatient(VMS.TPS.Common.Model.API.PatientSummary)">
            <summary>
            Opens a patient.
            </summary>
            <param name="patientSummary">Patient summary.</param>
            <returns>Opened patient if found.</returns>
            <remarks>Only one patient can be open at the same time.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.OpenPatientById(System.String)">
            <summary>
            Opens a patient by using a patient identifier.
            </summary>
            <param name="id">Patient ID</param>
            <returns>Opened patient if found.</returns>
            <remarks>Only one patient can be open at the same time.</remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.ClosePatient">
            <summary>
            Closes the current patient. If the script tries to access the data of a closed patient, an access violation exception occurs.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.SaveModifications">
            <summary>
            [Requires a research license] Saves data modifications to the database if saving is allowed.
            Note: Calling this method can cause a multi-user warning dialog box to appear if the same patient is modified
            by other parties.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.LogExportToHipaa(System.String)">
            <summary>
            Add HIPAA log record if HIPAA is enabled
            </summary>
            <param name="patientId"></param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.ConsoleEventHandler(VMS.TPS.Common.Model.API.Application.ConsoleHandlerEventCode)">
            <summary>
            CTRL+BREAK handler, stops script execution
            </summary>
            <param name="eventCode"></param>
            <returns></returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.Dispose">
            <summary>
            Releases all unmanaged resources of this object.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.Finalize">
            <summary>
            Called only if user forgot to call Dispose()
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Application.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Application.CurrentUser">
            <summary>
            The user who is currently logged on.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Application.PatientSummaries">
            <summary>
            Fetches patient summaries from the database.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.SegmentVolume">
            <summary>
            [Requires a research license] The volumetric representation of a structure.
            This object is used  when defining margins for structures, or when performing Boolean operations on structures.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SegmentVolume.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SegmentVolume.And(VMS.TPS.Common.Model.API.SegmentVolume)">
            <summary>
            [Requires a research license] Creates a combination of segment volumes. The existing segment volumes are not modified.
            The combination includes the areas that belong to both this segment volume and
            another segment volume,  that is, the intersection of this and the other segment volume.
            </summary>
            <param name="other">The segment volume that is combined with this segment volume.</param>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SegmentVolume.AsymmetricMargin(VMS.TPS.Common.Model.Types.AxisAlignedMargins)">
            <summary>
            [Requires a research license] Expands or shrinks this segment volume with the specified margins, aligned to the
            axes of the image coordinate system.
            </summary>
            <param name="margins">The margins in millimeters. The maximum is 50.</param>
            <returns>A new expanded or shrunk segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SegmentVolume.Margin(System.Double)">
            <summary>
            [Requires a research license] Creates a new segment volume by expanding or shrinking this segment volume
            with the specified margin (in millimeters).
            A positive value creates an outer margin. A negative value creates an inner margin.
            </summary>
            <param name="marginInMM">The used margin in millimeters. The maximum is 50.</param>
            <returns>A new expanded or shrunk segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SegmentVolume.Not">
            <summary>
            [Requires a research license] Creates a combination of segment volumes. Does not modify this segment volume.
            The combination includes the area that covers everything else but this segment volume.
            </summary>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SegmentVolume.Or(VMS.TPS.Common.Model.API.SegmentVolume)">
            <summary>
            [Requires a research license] Creates a combination of segment volumes. The existing segment volumes are not modified.
            The combination includes the areas that belong to this segment volume,
            to another segment volume, or both, that is, the union of this and the other segment volume.
            </summary>
            <param name="other">The segment volume that is combined with this volume.</param>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SegmentVolume.Sub(VMS.TPS.Common.Model.API.SegmentVolume)">
            <summary>
            [Requires a research license] Creates a combination of segment volumes. The existing segment volumes are not modified.
            The combination includes the area that belongs to this segment volume, but not
            to the other segment volume.
            </summary>
            <param name="other">The segment volume that is subtracted from this segment volume.</param>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SegmentVolume.Xor(VMS.TPS.Common.Model.API.SegmentVolume)">
            <summary>
            [Requires a research license] Creates a combination of segment volumes. The existing segment volumes are not modified.
            The combination includes the areas that belong either to this segment volume or to
            another segment volume, but not to both of them.
            </summary>
            <param name="other">The segment volume that is combined with this volume.</param>
            <returns>A new combined segment volume.</returns>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.PlanningItemDose">
            <summary>
            Represents a dose that is connected to a plan setup or a plan sum.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.PlanningItemDose.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.StructureSet">
            <summary>
            A structure set is a container for structures of a patient, including anatomical organs, treatment volumes and markers, and support structures.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.StructureSet.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.StructureSet.AddStructure(System.String,System.String)">
            <summary>
            [Requires a research license] Adds a new structure according to the DICOM structure type.
            </summary>
            <param name="dicomType">RT ROI Interpreted Type (DICOM). Identifies the DICOM structure type.
            Possible values are "AVOIDANCE", "CAVITY", "CONTRAST_AGENT", "CTV", "EXTERNAL", "GTV", "IRRAD_VOLUME",
            "ORGAN", "PTV", "TREATED_VOLUME", "SUPPORT", "FIXATION", "CONTROL", and "DOSE_REGION".
            </param>
            <param name="id">The identifier for the new structure.</param>
            <returns>Newly created structure.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.StructureSet.CanAddStructure(System.String,System.String)">
            <summary>
            [Requires a research license] Returns true if it is possible to add the given type of structure to the structure set.
            </summary>
            <param name="dicomType">RT ROI Interpreted Type (DICOM). Identifies the DICOM structure type.
            Possible values are "AVOIDANCE", "CAVITY", "CONTRAST_AGENT", "CTV", "EXTERNAL", "GTV", "IRRAD_VOLUME",
            "ORGAN", "PTV", "TREATED_VOLUME", "SUPPORT", "FIXATION", "CONTROL", and "DOSE_REGION".
            </param>
            <param name="id">The identifier for the new structure.</param>
            <returns>true if it is possible to add the given type of structure to the structure set. Otherwise false.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.StructureSet.CanRemoveStructure(VMS.TPS.Common.Model.API.Structure)">
            <summary>
            [Requires a research license] Returns true if it is possible to remove the given structure from the structure set.
            </summary>
            <param name="structure">The structure to check.</param>
            <returns>Returns true if the structure can be removed, false otherwise.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.StructureSet.RemoveStructure(VMS.TPS.Common.Model.API.Structure)">
            <summary>
            [Requires a research license] Removes the structure from this structure set if removal is allowed.
            </summary>
            <param name="structure">The structure to remove.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.StructureSet.Structures">
            <summary>
            Used for navigating to the child structures.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.StructureSet.Image">
            <summary>
            Used for navigating to the image.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.StructureSet.UID">
            <summary>
            DICOM UID.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Technique">
            <summary>
            Treatment technique used for a beam. Can be, for example, static or arc.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Technique.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OmniWedge">
            <summary>
            An OmniWedge is a special type of wedge that combines an open
            field, a motorized wedge, and a virtual wedge to create the desired wedge
            effect.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OmniWedge.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.EnhancedDynamicWedge">
            <summary>
            An Enhanced Dynamic Wedge is similar to a Dynamic Wedge, but
            it features more wedge angles than a simple Dynamic Wedge.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.DynamicWedge">
            <summary>
            A Dynamic Wedge is formed by a moving jaw of a standard collimator
            during irradiation.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.DynamicWedge.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.EnhancedDynamicWedge.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.DVHData">
            <summary>
            Represents Dose Volume Histogram (DVH) data.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.DVHData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.Coverage">
            <summary>
            The dose coverage of the target, normalized to 0.0 .. 1.0.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.CurveData">
            <summary>
            The points of the Dose Volume Histogram (DVH) curve.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.MaxDose">
            <summary>
            The maximum dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.MeanDose">
            <summary>
            The mean dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.MedianDose">
            <summary>
            The median dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.MinDose">
            <summary>
            The minimum dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.SamplingCoverage">
            <summary>
            The sampling coverage.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.StdDev">
            <summary>
            The standard deviation.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.DVHData.Volume">
            <summary>
            The volume of the structure in cubic centimeters.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ControlPoint">
            <summary>
            Represents a point in a planned sequence of treatment beam parameters. See the definition of control points in a DICOM RT Beam.
            </summary>
            <remarks>
            Control points are discussed in DICOM PS 3.3 C.8.8.14. All beams have
            at least two control points. Note that some values may be NaN
            if they are not applicable to the treatment plan in question.
            </remarks>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ControlPoint.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.CollimatorAngle">
            <summary>
            The orientation of the IEC BEAM LIMITING DEVICE coordinate system with
            respect to the IEC GANTRY coordinate system (in degrees).
            </summary>
            <remarks>
            The definition is adapted from DICOM PS 3.3 C.8.8.14
            "Beam Limiting Device Angle", but rotation direction is
            not specified explicitly.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.GantryAngle">
            <summary>
            The gantry angle of the radiation source. In other words, the orientation of the IEC GANTRY
            coordinate system with respect to the IEC FIXED REFERENCE coordinate
            system (in degrees).
            </summary>
            <remarks>
            The definition is from DICOM PS 3.3 C.8.8.14 "Gantry Angle", but
            rotation direction does not change during treatment and it is
            specified in Beam.GantryDirection instead.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.JawPositions">
            <summary>
            The positions of the beam collimator jaws (in mm) in the IEC BEAM LIMITING DEVICE
            coordinates.
            </summary>
            <remarks>
            The definition is adapted from DICOM PS 3.3 C.8.8.14
            "Leaf/Jaw Positions". The difference is that DICOM likens the
            collimator jaw positions with MLC leaf positions and places
            them in the same sequence.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.LeafPositions">
            <summary>
            The positions of the beam collimator leaf pairs (in mm) in the IEC BEAMLIMITING
            DEVICE coordinate axis appropriate to the device type. For example, the X-axis
            for MLCX and the Y-axis for MLCY. The two-dimensional array is
            indexed [bank, leaf] where the bank is either 0 or 1. Bank 0 represents
            the leaf bank to the negative MLC X direction, and bank 1 to the
            positive MLC X direction. If there is no MLC, a (0,0)-length array is
            returned.
            </summary>
            <remarks>
            The definition is adapted from DICOM PS 3.3 C.8.8.14
            "Leaf/Jaw Positions". The difference is that DICOM supports a
            position sequence for each collimator type while we support a position
            sequence for a single MLC plus four jaws.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.MetersetWeight">
            <summary>
            The cumulative meterset weight to this control point. The cumulative meterset
            weight for the first item in a control point sequence is zero.
            </summary>
            <remarks>
            The meterset at a given control point is equal to the beam meterset,
            multiplied by the cumulative meterset weight for the control point,
            divided by the final cumulative meterset weight.
            The definition is adapted from DICOM PS 3.3 C.8.8.14.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.PatientSupportAngle">
            <summary>
            The patient support angle. In other words, the orientation of the IEC PATIENT SUPPORT
            (turntable) coordinate system with respect to the IEC FIXED REFERENCE
            coordinate system (in degrees).
            </summary>
            <remarks>
            The definition is from DICOM PS 3.3 C.8.8.14 "Patient Support Angle",
            but here rotation direction is specified implicitly towards the
            shortest angle between the current and the next control point.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.TableTopLateralPosition">
            <summary>
            Table top lateral position in millimeters, in the IEC TABLE TOP coordinate system.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.TableTopLongitudinalPosition">
            <summary>
            Table top longitudinal position in millimeters, in the IEC TABLE TOP coordinate system.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPoint.TableTopVerticalPosition">
            <summary>
            Table top vertical position in millimeters, in the IEC TABLE TOP coordinate system.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationSetup">
            <summary>
            Gives access to the optimization parameters and objectives.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.AddAutomaticNormalTissueObjective(System.Double)">
            <summary>
            [Requires a research license] Adds a new automatic normal tissue objective (NTO) or updates the data of the existing objective. Only one
            NTO can be added.
            </summary>
            <param name="priority">Determines the relative importance of the NTO in relation to other optimization objectives.The value is positive.</param>
            <returns>The added parameter.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.AddBeamSpecificParameter(VMS.TPS.Common.Model.API.Beam,System.Double,System.Double,System.Boolean)">
            <summary>
            [Requires a research license] Adds a new beam-specific parameter for IMRT optimization.
            </summary>
            <param name="beam">The beam for which the parameters are added.</param>
            <param name="smoothX">A fluence-smoothing parameter in X-direction.</param>
            <param name="smoothY">A fluence-smoothing parameter in Y-direction.</param>
            <param name="fixedJaws">If true, the collimator jaw positions of the beam remain the same during the optimization.</param>
            <returns>The added parameter.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.AddEUDObjective(VMS.TPS.Common.Model.API.Structure,VMS.TPS.Common.Model.Types.OptimizationObjectiveOperator,VMS.TPS.Common.Model.Types.DoseValue,System.Double,System.Double)">
            <summary>
            [Requires a research license] Adds a new gEUD objective.
            </summary>
            <param name="structure">The target structure of the objective.</param>
            <param name="objectiveOperator">The type of the gEUD objective.</param>
            <param name="dose">The dose value of the objective. The unit must be the same as defined in the OSP system configuration.</param>
            <param name="parameterA">gEUD parameter a.</param>
            <param name="priority">The priority of the objective.</param>
            <returns>The added objective.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.AddMeanDoseObjective(VMS.TPS.Common.Model.API.Structure,VMS.TPS.Common.Model.Types.DoseValue,System.Double)">
            <summary>
            [Requires a research license] Adds a new mean dose objective.
            </summary>
            <param name="structure">The target structure of the objective.</param>
            <param name="dose">The dose value of the objective. The unit must be the same as defined in the OSP system configuration.</param>
            <param name="priority">The priority of the objective.</param>
            <returns>The added objective.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.AddNormalTissueObjective(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            [Requires a research license] Adds a new normal tissue objective (NTO) or updates the data of the existing objective. Only one
            NTO can be added. Calling this function disables the automatic NTO if it has been set previously.
            </summary>
            <param name="priority">Determines the relative importance of the normal tissue objective in relation to other optimization objectives.The value is positive.</param>
            <param name="distanceFromTargetBorderInMM">Determines the distance in millimeters from the target border where the evaluation of the normal tissue objective dose begins.</param>
            <param name="startDosePercentage">Determines the relative dose level in the normal tissue objective at the target border,
            expressed in percentage of the upper objective for the target.
            The value is positive. 100% is specified as 100.
            </param>
            <param name="endDosePercentage">Determines the relative dose level in the normal tissue objective in the area furthest from the target border.
            Expressed in percentage. The value is positive. 100% is specified as 100.
            </param>
            <param name="fallOff">Determines the steepness of the normal tissue objective fall-off.
            The value is positive.
            </param>
            <returns>The added parameter.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.AddPointObjective(VMS.TPS.Common.Model.API.Structure,VMS.TPS.Common.Model.Types.OptimizationObjectiveOperator,VMS.TPS.Common.Model.Types.DoseValue,System.Double,System.Double)">
            <summary>
            [Requires a research license] Adds a new point objective.
            </summary>
            <param name="structure">The target structure of the objective.</param>
            <param name="objectiveOperator">The type of the dose-volume objective.</param>
            <param name="dose">The dose value of the objective. The unit must be the same as defined in the OSP system configuration.</param>
            <param name="volume">The volume of the objective.</param>
            <param name="priority">The priority of the objective.</param>
            <returns>The added objective.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.RemoveObjective(VMS.TPS.Common.Model.API.OptimizationObjective)">
            <summary>
            [Requires a research license] Removes the specified optimization objective.
            </summary>
            <param name="objective">The objective that is removed.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.RemoveParameter(VMS.TPS.Common.Model.API.OptimizationParameter)">
            <summary>
            [Requires a research license] Removes the specified optimization parameter.
            </summary>
            <param name="parameter">The parameter that is removed.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationSetup.AddStructurePointCloudParameter(VMS.TPS.Common.Model.API.Structure,System.Double)">
            <summary>
            [Requires a research license] Adds a point cloud specific parameter. If the structure already has a parameter, the data is updated.
            This parameter cannot be removed (RemoveParameter fails).
            </summary>
            <param name="structure">The structure whose parameters are edited.</param>
            <param name="pointResolutionInMM">The resolution of the point cloud used for the structure.</param>
            <returns>The added parameter.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationSetup.Objectives">
            <summary>
            A collection of optimization objectives.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationSetup.Parameters">
            <summary>
            A collection of optimization parameters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationSetup.UseJawTracking">
            <summary>
            [Requires a research license] Jaw tracking parameter for VMAT optimization.
            The parameter can only be set for plans to be delivered with a treatment machine that supports jaw tracking.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ExternalBeam">
            <summary>
            Obsolete. Use the ExternalBeamTreatmentUnit class instead.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalBeam.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serialization support.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ExternalBeam.SourceAxisDistance">
            <summary>
            Obsolete. Use the ExternalBeamTreatmentUnit class instead.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ExternalBeam.MachineModel">
            <summary>
            Obsolete. Use the ExternalBeamTreatmentUnit class instead.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ExternalBeam.MachineModelName">
            <summary>
            Obsolete. Use the ExternalBeamTreatmentUnit class instead.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ExternalBeam.MachineScaleDisplayName">
            <summary>
            Obsolete. Use the ExternalBeamTreatmentUnit class instead.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Catheter">
            <summary>
            Represents a brachytherapy catheter or an applicator channel centerline. Catheters are associated with a <see cref="T:VMS.TPS.Common.Model.API.BrachyTreatmentUnit">brachytherapy treatment unit</see>,
            a <see cref="P:VMS.TPS.Common.Model.API.Catheter.ChannelNumber"> channel number</see>, and possibly a <see cref="P:VMS.TPS.Common.Model.API.Catheter.BrachySolidApplicatorPartID">unique identifier</see>
            of the <see cref="T:VMS.TPS.Common.Model.API.BrachySolidApplicator">solid applicator part</see> they belong to. Most notably, catheters encapsulate the <see cref="P:VMS.TPS.Common.Model.API.Catheter.Shape">shape</see>
            of the applicator channel centerline and its <see cref="P:VMS.TPS.Common.Model.API.Catheter.SourcePositions">source positions</see>.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Catheter.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Catheter.GetSourcePosCenterDistanceFromTip(VMS.TPS.Common.Model.API.SourcePosition)">
            <summary>
            The distance (in millimeters) from the tip of the catheter (in the first possible source position) to the center of the source position.
            This is an offset from the actual catheter inner lumen tip by half of the source length and encapsulation.
            </summary>
            <param name="sourcePosition">The source position for which the distance from the catheter tip is got.</param>
            <returns>The distance from the tip of the catheter to the source position center, in millimeters.</returns>
            <seealso cref="P:VMS.TPS.Common.Model.API.BrachyTreatmentUnit.SourceCenterOffsetFromTip" />
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Catheter.GetTotalDwellTime">
            <summary>
            The total dwell time in this catheter in seconds.
            </summary>
            <returns>The total dwell time in this catheter in seconds.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.ApplicatorLength">
            <summary>
            The total length from the tip of the catheter to the treatment unit in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.BrachySolidApplicatorPartID">
            <summary>
            The unique identifier of the <see cref="T:VMS.TPS.Common.Model.API.BrachySolidApplicator">brachytherapy solid applicator</see> part associated with the channel.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.ChannelNumber">
            <summary>
            The channel number of this catheter.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.Color">
            <summary>
            The color of the catheter in 2D views.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.Shape">
            <summary>
            The DICOM coordinates of the applicator shape starting from the tip.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.SourcePositions">
            <summary>
            The source positions in the catheter starting from the tip.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.StepSize">
            <summary>
            The step size of the catheter in millimeters.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Catheter.TreatmentUnit">
            <summary>
            The brachytherapy treatment unit associated with this catheter.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.BrachyPlanSetup">
            <summary>
            Represents a brachytherapy treatment plan.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BrachyPlanSetup.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyPlanSetup.ApplicationSetupType">
            <summary>
            The application setup type of this brachytherapy plan. Possible types are: "FLETCHER_SUIT", "DELCLOS",
            "BLOEDORN", "JOSLIN_FLYNN", "CHANDIGARH", "MANCHESTER", "HENSCHKE", "NASOPHARYNGEAL", "OESOPHAGEAL",
            "ENDOBRONCHIAL", "SYED_NEBLETT", "ENDORECTAL", "PERINEAL",  "HAM_FLAB", "EYE_PLAQUE", and "OTHER".
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyPlanSetup.Catheters">
            <summary>
            The catheters or applicator channel centerlines of this brachytherapy plan, including any catheters associated with <see cref="T:VMS.TPS.Common.Model.API.BrachySolidApplicator">solid applicators</see>.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyPlanSetup.NumberOfPdrPulses">
            <summary>
            The number of pulses in a brachytherapy Pulse Dose Rate (PDR) treatment. Null if the plan is not for a PDR treatment.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyPlanSetup.PdrPulseInterval">
            <summary>
            The pulse interval in a brachytherapy Pulse Dose Rate (PDR) treatment in seconds. Null if the plan is not for a PDR treatment.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyPlanSetup.SeedCollections">
            <summary>
            The seed collections of this brachytherapy plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyPlanSetup.SolidApplicators">
            <summary>
            The solid applicator parts of this brachytherapy plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyPlanSetup.TreatmentDateTime">
            <summary>
            The treatment date of this brachytherapy plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BrachyPlanSetup.TreatmentTechnique">
            <summary>
            The treatment technique of this brachytherapy plan. Possible techniques are "INTRALUMENARY", "INTRACAVITARY",
            "INTERSTITIAL", "CONTACT", "INTRAVASCULAR", and "PERMANENT".
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.BeamDose">
            <summary>
            Represents a dose that is connected to a Beam.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BeamDose.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Version.VersionInfo">
            <summary>
            This class is a set of constants that specify build version information.
            Generated automatically from TpsNetVersion.in - do not edit by hand.
            The logic is copied from the VFC equivalents in TpsVersion.in.
            Names and identifiers are kept exactly the same as in the original VFC version
            to help in maintenance.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.FieldReferencePoint">
            <summary>
            This object links a treatment beam to a reference point.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.FieldReferencePoint.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.FieldReferencePoint.EffectiveDepth">
            <summary>
            The effective depth of the field reference point. For arc fields this is the average value
            over the span of the arc.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.FieldReferencePoint.FieldDose">
            <summary>
            The field dose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.FieldReferencePoint.IsFieldDoseNominal">
            <summary>
            Checks if the field dose is nominal (the real calculated field dose is not known).
            If the field doses at a reference point are nominal, they alone cannot be used to verify MU calculation.”
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.FieldReferencePoint.IsPrimaryReferencePoint">
            <summary>
            Checks if the reference point is primary.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.FieldReferencePoint.ReferencePoint">
            <summary>
            Used for navigating to an underlying reference point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.FieldReferencePoint.RefPointLocation">
            <summary>
            The location of the reference point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.FieldReferencePoint.SSD">
            <summary>
            The Source-to-Skin Distance (SSD) of the reference point. For arc fields this is the average value
            over the span of the arc.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.RadioactiveSourceModel">
            <summary>
            The radioactive source model represents the details of the radioactive source used in brachytherapy. It encapsulates
            the source isotope, dimensions, and dose calculation parameters.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.RadioactiveSourceModel.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.ActiveSize">
            <summary>
            The active size of the modeled radioactive source in x, y, and z dimensions in millimeters.
            x represents the source width, y represents the source height, and z the source length.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.ActivityConversionFactor">
            <summary>
            The activity-kerma conversion factor is used for converting activity (in mCi) to air-kerma strength (in U = cGy cm^2 / h).
            The unit of the factor is [U / mCi].
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.CalculationModel">
            <summary>
            The dose calculation type used with this source model. Possible values are "Point source" and "Linear source".
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.DoseRateConstant">
            <summary>
            A conversion factor from the air-kerma strength to the dose rate in tissue. The unit of the dose rate constant is cGy / (h U).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.HalfLife">
            <summary>
            The half life of the isotope in seconds.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.LiteratureReference">
            <summary>
            The reference to the scientific publications on which the source model is based.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.Manufacturer">
            <summary>
            The manufacturer of the modeled radioactive source.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.SourceType">
            <summary>
            The DICOM source type. Possible values are "Point", "Line", "Cylinder", and "Sphere".
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.Status">
            <summary>
            The status of this source model. The status can be either "Unapproved", "Commissioning", "Approved", or "Retired".
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.StatusDate">
            <summary>
            The time when the status of the source model was set.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSourceModel.StatusUserName">
            <summary>
            The name of the user who last set the status of the source model.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.EstimatedDVH">
            <summary>
            Represents an estimated Dose Volume Histogram (DVH) curve.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.EstimatedDVH.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.EstimatedDVH.CurveData">
            <summary>
            The points of the estimated DVH curve.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.EstimatedDVH.PlanSetup">
            <summary>
            Parent plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.EstimatedDVH.PlanSetupId">
            <summary>
            ID of the parent plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.EstimatedDVH.Structure">
            <summary>
            Parent structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.EstimatedDVH.StructureId">
            <summary>
            ID of the parent structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.EstimatedDVH.TargetDoseLevel">
            <summary>
            Dose level of the associated target structure.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.EstimatedDVH.Type">
            <summary>
            Type of DVH estimate curve.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationControllerIMRT">
            <summary>
            Controls the IMRT optimization from the Script
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.AsyncPump">
            <summary>Provides a pump that supports running asynchronous methods on the current thread.</summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContext">
            <summary>Provides a SynchronizationContext object that is single-threaded.</summary>
        </member>
        <member name="F:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContext.m_queue">
            <summary>The queue of work items.</summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>Dispatches an asynchronous message to the synchronization context.</summary>
            <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>Not supported.</summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContext.RunOnCurrentThread">
            <summary>Runs an loop to process all queued work items.</summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.AsyncPump.SingleThreadSynchronizationContext.Complete">
            <summary>Notifies the context that no more work will arrive.</summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Applicator">
            <summary>
            An applicator add-on, either an electron applicator or cone applicator.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Applicator.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ControlPointCollection">
            <summary>
            Represents a collection of machine parameters that describe the planned
            treatment beam.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ControlPointCollection.GetEnumerator">
            <summary>
            Retrieves enumerator for ControlPoints in the collection.
            </summary>
            <returns>Enumerator for ControlPoints in the collection.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ControlPointCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointCollection.Item(System.Int32)">
            <summary>
            Gets the specified ControlPoint from the collection.
            </summary>
            <param name="index">Zero based index of the ControlPoint to retrieve.</param>
            <returns>ControlPoint at the given index.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointCollection.Count">
            <summary>
            The number of control points in the collection.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationExcludeStructureParameter">
            <summary>
            Structures that have this parameter are excluded from the optimization.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationExcludeStructureParameter.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationExcludeStructureParameter.Structure">
            <summary>
            The structure to be excluded.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.User">
            <summary>
            Represents a user.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.User.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.User.Language">
            <summary>
            The language of the user.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Series">
            <summary>
            A series is a collection of radiation therapy objects of a patient.
            The series is part of a study. See the definition of a DICOM Series for more information.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Series.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.FOR">
            <summary>
            The UID of the frame of reference.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.Images">
            <summary>
            A collection of images that belong to the series.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.ImagingDeviceId">
            <summary>
            The identifier of the device that is used to scan the images into the system.
            Returns an empty string if the imaging device is not unique or the device identifier is not defined.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.ImagingDeviceManufacturer">
            <summary>
            The manufacturer of the device that is used to scan the images into the system.
            Returns an empty string if the imaging device is not unique or the device manufacturer is not defined.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.ImagingDeviceModel">
            <summary>
            The model of the device that is used to scan the images into the system.
            Returns an empty string if the imaging device is not unique or the device model is not defined.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.ImagingDeviceSerialNo">
            <summary>
            The serial number of the device that is used to scan the images into the system.
            Returns an empty string if the imaging device is not unique or the device serial number is not defined.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.Modality">
            <summary>
            The modality of the series.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.Study">
            <summary>
            Used for navigating to parent study.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Series.UID">
            <summary>
            The DICOM UID.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ReferencePoint">
            <summary>
            A reference point associated with a patient.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ReferencePoint.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Globals">
            <summary>
            This class is internal to the Eclipse Scripting API.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Globals.CheckAbort">
            <summary>
            Checks if abort is needed and stops execution.
            </summary>
        </member>
        <member name="F:VMS.TPS.Common.Model.API.Globals.Tracing">
            <summary>
            True if Trace is called. Enables the re-entrancy checking for the Scripting API from a custom TraceListener.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Globals.Trace(System.String)">
            <summary>
            Uses System.Diagnostics.Trace with re-entrancy check for the Scripting API.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Globals.AbortNow">
            <summary>
            The flag that aborts script execution the next time any property or
            method of the Eclipse Scripting API is accessed.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ScriptContext">
            <summary>
            Contains the runtime context information of the active application for the script.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ScriptContext.#ctor(System.Object,System.Object,System.String)">
            <summary>
            Provides scripts an access to the current data context.
            A context instance is given as a parameter in the Execute function of the script.
            The script itself does not instantiate the context.
            </summary>
            <param name="context">The internal data context.</param>
            <param name="user">The internal user object.</param>
            <param name="appName">The application name.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.CurrentUser">
            <summary>
            The current user of the application.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.Course">
            <summary>
            The course. The value may be null if the context has no course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.Image">
            <summary>
            The 3D image. The value may be null if the context has no image.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.StructureSet">
            <summary>
            The structure set. The value may be null if the context has no structure set.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.Patient">
            <summary>
            The patient. The value may be null if the context has no patient.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.PlanSetup">
            <summary>
            The plan setup. The value may be null if the context has no plan setup.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.ExternalPlanSetup">
            <summary>
            The active external beam plan setup. The value is null if the active object is not an external beam plan setup. 
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.BrachyPlanSetup">
            <summary>
            The active brachytherapy plan setup. The value is null if the active object is not a brachytherapy plan setup.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.PlansInScope">
            <summary>
            Retrieves a list of all plans in the Scope window.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.ExternalPlansInScope">
            <summary>
            Retrieves a list of all external beam plans in the Scope window.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.BrachyPlansInScope">
            <summary>
            Retrieves a list of all brachytherapy plans in the Scope window.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.PlanSumsInScope">
            <summary>
            Retrieves a list of all plan sums in the Scope window.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.ApplicationName">
            <summary>
            The name of the active application.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ScriptContext.VersionInfo">
            <summary>
            The version number of Eclipse.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Course">
            <summary>
            A course represents the course of treatment that a patient will be given.
            Every patient must have a course, and all plans always belong to a course.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Course.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Course.AddExternalPlanSetup(VMS.TPS.Common.Model.API.StructureSet)">
            <summary>
            [Requires a research license] Attaches a new plan to this course. A new primary reference point is always created for the new plan.
            </summary>
            <param name="structureSet">A valid structure set.</param>
            <returns>A new plan.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Course.AddExternalPlanSetupAsVerificationPlan(VMS.TPS.Common.Model.API.StructureSet,VMS.TPS.Common.Model.API.ExternalPlanSetup)">
            <summary>
            [Requires a research license] Attaches a new verification plan to this course and adds the relationship between the verified plan and a new plan. Data is not copied from the verified plan.
            A new primary reference point is always created for the new plan.
            
            </summary>
            <param name="structureSet">A valid structure set.</param>
            <param name="verifiedPlan">The verified plan.</param>
            <returns>A new verification plan.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Course.CanAddPlanSetup(VMS.TPS.Common.Model.API.StructureSet)">
            <summary>
            [Requires a research license] Checks if a new plan can be added to this course using the given structure set.
            </summary>
            <param name="structureSet">The structure set used by the plan.</param>
            <returns>true if a new plan can be added.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Course.CanRemovePlanSetup(VMS.TPS.Common.Model.API.PlanSetup)">
            <summary>
            [Requires a research license] Checks if the plan setup can be removed from this course.
            </summary>
            <param name="planSetup">The plan setup to check.</param>
            <returns>true if the plan can be removed.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Course.RemovePlanSetup(VMS.TPS.Common.Model.API.PlanSetup)">
            <summary>
            [Requires a research license] Removes the plan setup from the database. Use CanRemovePlanSetup to check if it is possible to remove the plan. The
            PlanSetup object given as a parameter is not usable anymore after this operation.
            </summary>
            <param name="planSetup">The plan setup that is removed.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.CompletedDateTime">
            <summary>
            The date and time when the course was completed.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.Diagnoses">
            <summary>
            The diagnoses that are attached to the course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.Intent">
            <summary>
            The intent of the course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.Patient">
            <summary>
            Patient in which the course is defined.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.PlanSums">
            <summary>
            A collection of plan sums for the course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.StartDateTime">
            <summary>
            The date and time when the course was started.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.Id">
            <summary>
            The identifier of the Course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.PlanSetups">
            <summary>
             A collection of plans for the course. The plans can be of any type; external or brachy.
             </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.ExternalPlanSetups">
            <summary>
            A collection of external beam plans for the course.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Course.BrachyPlanSetups">
            <summary>
            A collection of brachytherapy plans for the course.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Beam">
            <summary>
            Represents one beam (also referred to as "field") of an external beam treatment plan. See the definition of DICOM RT Beam for more details.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.ApplyParameters(VMS.TPS.Common.Model.API.BeamParameters)">
            <summary>
            [Requires a research license] Modifies the beam by applying the given parameters. This is the only
            way to modify a beam using the Eclipse Scripting API. After a call to
            ApplyParameters, the getters of this beam instance will return the new values.
            An ApplicationException is thrown if the parameters form an invalid combination.
            </summary>
            <param name="beamParams">The parameters to apply to the beam.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.CanSetOptimalFluence(VMS.TPS.Common.Model.Types.Fluence,System.String@)">
            <summary>
            [Requires a research license] Checks if optimal fluence can be set for this beam.
            </summary>
            <param name="fluence">The optimal fluence for the beam.</param>
            <param name="message">If the optimal fluence cannot be set, contains information about the reason.</param>
            <returns>Return true if optimal fluence can be set for this beam. Otherwise false.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.GetEditableParameters">
            <summary>
            [Requires a research license] Returns an editable copy of the beam parameters.
            The returned BeamParameters object is not updated if the beam parameters in the data model are changed,
            for example, by using another BeamParameters object.
            </summary>
            <returns>Returns a new parameters object. Its values are copied from the
            corresponding properties of this object.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.GetOptimalFluence">
            <summary>
            Gets the optimal fluence for this beam. Returns null if optimal fluence does not exist.
            </summary>
            <returns>Returns the optimized fluence, if it exists. Otherwise null.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.GetSourceLocation(System.Double)">
            <summary>
            Returns the location of the radiation source at a given gantry angle
            of the beam.
            </summary>
            <param name="gantryAngle">Gantry angle</param>
            <returns>Source location</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Beam.SetOptimalFluence(VMS.TPS.Common.Model.Types.Fluence)">
            <summary>
            [Requires a research license] Sets the optimal fluence for this beam.
            If the fluence is empty (the fluence is null or the dimensions of the fluence matrix are zero) an ArgumentException will be thrown.
            </summary>
            <param name="fluence">The optimal fluence to be set.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Applicator">
            <summary>
            An applicator is a specific add-on used in the beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.ArcLength">
            <summary>
            The arc length.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.AverageSSD">
            <summary>
            The average Source-to-Skin Distance (SSD) of an arc beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.BeamNumber">
            <summary>
            DICOM RT Beam Number. The value is unique within the plan in which it is created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Blocks">
            <summary>
            A collection of installed blocks.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Boluses">
            <summary>
            A collection of beam boluses.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.CalculationLogs">
            <summary>
            A collection of beam calculation logs.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Compensator">
            <summary>
            The compensator.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.ControlPoints">
            <summary>
            An enumerable sequence of machine parameters that
            describe the planned treatment beam.
            </summary>
            <remarks>
            A motorized wedge is described with four control points.
            If Elekta OmniWedge is used, the first three control points
            are used to describe the motorized wedge. Note, that for proton
            beams the control points are not currently supported and an empty
            collection is returned.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.CreationDateTime">
            <summary>
            The date when this object was created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Dose">
            <summary>
            The dose for this beam. Returns null if dose is not calculated.
            </summary>
            <returns>Returns the beam dose, if it exists. Otherwise null.</returns>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.DoseRate">
            <summary>
            The dose rate of the treatment machine in MU/min.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.DosimetricLeafGap">
            <summary>
            The dosimetric leaf gap that has been configured for the Dynamic Multileaf Collimator (DMLC) beams in the system. The dosimetric leaf gap is
            used for accounting for dose transmission through rounded MLC leaves.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.EnergyModeDisplayName">
            <summary>
            The display name of the energy mode. For example '18E' or '6X-SRS'.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.FieldReferencePoints">
            <summary>
            A collection of field reference points.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.GantryDirection">
            <summary>
            The gantry rotation direction: clockwise (CW), counterclockwise (CCW), or none.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.IsocenterPosition">
            <summary>
            The position of the isocenter.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.IsSetupField">
            <summary>
            Checks if a beam is a setup field.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.MetersetPerGy">
            <summary>
            The calculated meterset/Gy value for the beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.MLC">
            <summary>
            Returns a hardware description of the Multileaf Collimator (MLC) used in an MLC plan, or
            null if no MLC exists.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.MLCPlanType">
            <summary>
            The type of the Multileaf Collimator (MLC) plan.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.MLCTransmissionFactor">
            <summary>
            The transmission factor of the Multileaf Collimator (MLC) material.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.NormalizationFactor">
            <summary>
            The beam normalization factor.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.NormalizationMethod">
            <summary>
            The beam normalization method.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.PlannedSSD">
            <summary>
            The Source-to-Skin Distance (SSD) value defined by the user.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.ReferenceImage">
            <summary>
            The reference image of the beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.SetupTechnique">
            <summary>
            The setup technique.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.SSD">
            <summary>
            The Source-to-Skin Distance (SSD). For arc beams, the SSD at the start angle.
            This value is calculated from the geometrical setup of the beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.SSDAtStopAngle">
            <summary>
            The Source-to-Skin Distance (SSD) at the stop angle of an arc beam.
            This value is calculated from the geometrical setup of the beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Technique">
            <summary>
            The technique used in the planning beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.ToleranceTableLabel">
            <summary>
            User-defined label for the referenced tolerance table, or an empty string if there is no reference to a tolerance table.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Trays">
            <summary>
            A collection of installed trays.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.TreatmentUnit">
            <summary>
            The external beam treatment unit associated with this beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Wedges">
            <summary>
            A collection of installed wedges.
            </summary>
            <remarks>
            Use operator <c>is</c> or <c>as</c> to distinguish between various wedge types.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.WeightFactor">
            <summary>
            The weight factor of the beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Id">
            <summary>
            The identifier of the Beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.Meterset">
            <summary>
            The meterset value of the beam.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Beam.ExternalBeam">
            <summary>
            Obsolete. This property will be removed in a future Scripting API version.
            Use the TreatmentUnit property instead.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.SourcePosition">
            <summary>
            Represents a brachytherapy source dwell position in a <see cref="T:VMS.TPS.Common.Model.API.Catheter">catheter</see>
            or a seed position in a <see cref="T:VMS.TPS.Common.Model.API.SeedCollection">seed collection</see>.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SourcePosition.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SourcePosition.DwellTime">
            <summary>
            The dwell time associated with this source position in seconds.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SourcePosition.RadioactiveSource">
            <summary>
            The radioactive source associated with this dwell position.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SourcePosition.Transform">
            <summary>
            The 4x4 transformation matrix represents the orientation and location of the source position in space.
            The matrix is composed of a 4x3 rotation submatrix and a 4x1 translation vector. Its bottom row indicates scaling and is always [0 0 0 1].
            The translation vector indicates the coordinates of the source position center, in millimeters. The third column of the rotation matrix indicates the source axis direction.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SourcePosition.Translation">
            <summary>
            The translation of this source position.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.RadioactiveSource">
            <summary>
            Represents a radioactive source installed into a <see cref="T:VMS.TPS.Common.Model.API.BrachyTreatmentUnit">brachytherapy treatment unit</see>
            or a seed of a <see cref="T:VMS.TPS.Common.Model.API.SeedCollection">seed collection</see>.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.RadioactiveSource.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSource.CalibrationDate">
            <summary>
            The calibration date for the strength of this radioactive source.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSource.NominalActivity">
            <summary>
            Defines whether source decay is accounted for in treatment planning.
            If the value is true, the dose calculation uses the source at its calibration activity (nominal activity).
            If the value is false, the source strength is decayed to the treatment activity based on the treatment date of the plan where the source is used.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSource.RadioactiveSourceModel">
            <summary>
            The brachytherapy radioactive source model associated with this radioactive source.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSource.SerialNumber">
            <summary>
            The serial number of this radioactive source.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.RadioactiveSource.Strength">
            <summary>
            The source strength for the radioactive source on the calibration date in cGy cm^2/h.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationNormalTissueParameter">
            <summary>
            An optimization parameter for the normal tissue objective.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationNormalTissueParameter.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationNormalTissueParameter.DistanceFromTargetBorderInMM">
            <summary>
            Determines the distance in millimeters from the target border where the evaluation of the normal tissue objective dose begins.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationNormalTissueParameter.EndDosePercentage">
            <summary>
            Determines the relative dose level in the normal tissue objective in the area furthest from the target border.
            Expressed in percentage. The value is positive. 100% is specified as 100.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationNormalTissueParameter.FallOff">
            <summary>
            Determines the steepness of the normal tissue objective fall-off.
            The value is positive.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationNormalTissueParameter.IsAutomatic">
            <summary>
            Returns True if an automatic normal tissue objective (NTO) is used.  The automatic
            NTO adapts to the patient anatomy and the optimization
            objectives, and automatically determines the dose fall-off criteria.
            
            When an automatic NTO is used, the other properties of this object, except Priority, are not used.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationNormalTissueParameter.Priority">
            <summary>
            Determines the relative importance of the normal tissue objective in relation to other optimization objectives.
            The value is positive.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationNormalTissueParameter.StartDosePercentage">
            <summary>
            Determines the relative dose level in the normal tissue objective at the target border,
            expressed in percentage of the upper objective for the target.
            The value is positive. 100% is specified as 100.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ExternalBeamTreatmentUnit">
            <summary>
            Represents a treatment machine used for delivering external beam radiotherapy.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.ExternalBeamTreatmentUnit.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ExternalBeamTreatmentUnit.MachineModel">
            <summary>
            The model of the treatment unit.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ExternalBeamTreatmentUnit.MachineModelName">
            <summary>
            The displayed name of the treatment unit model.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ExternalBeamTreatmentUnit.MachineScaleDisplayName">
            <summary>
            The name of the scale used in the treatment unit.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ExternalBeamTreatmentUnit.SourceAxisDistance">
            <summary>
            The Source to Axis Distance (SAD).
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationPointObjective">
            <summary>
            A point objective is either an upper or lower objective.
            An upper objective is used to limit the dose in a given structure.
            A lower objective is used to define the desired dose levels in target structures.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationPointObjective.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationPointObjective.Dose">
            <summary>
            The dose value for the objective.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationPointObjective.Operator">
            <summary>
            Specifies the type of the point objective.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationPointObjective.Priority">
            <summary>
            The priority of the objective as a positive double.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationPointObjective.Volume">
            <summary>
            Percentage of the structure volume (0-100 %) to receive the dose.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.MotorizedWedge">
            <summary>
            A motorized wedge is a standard wedge placed in the beam for a
            user-defined fraction of the total treatment time.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.MotorizedWedge.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Fractionation">
            <summary>
            The fractionation scheme of a plan. See the definitions of the applicable parts of DICOM RT Fraction Scheme for more details.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Fractionation.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Fractionation.SetPrescription(System.Int32,VMS.TPS.Common.Model.Types.DoseValue,System.Double)">
            <summary>
            [Requires a research license] Sets and validates the prescription.
            </summary>
            <param name="numberOfFractions">The number of fractions.</param>
            <param name="prescribedDosePerFraction">The prescribed fraction dose.</param>
            <param name="prescribedPercentage">
            The prescribed dose percentage as a decimal number.
            For example, if the prescribed dose percentage shown in the user interface is 80 %, use 0.8.
            </param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Fractionation.CreationDateTime">
            <summary>
            The date when this object was created.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Fractionation.DosePerFractionInPrimaryRefPoint">
            <summary>
            The calculated fraction dose in the primary reference point.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Fractionation.NumberOfFractions">
            <summary>
            The number of fractions.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Fractionation.PrescribedDosePerFraction">
            <summary>
            The prescribed fraction dose.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.SeedCollection">
            <summary>
            Represents a collection of brachytherapy <see cref="T:VMS.TPS.Common.Model.API.SourcePosition">seed positions</see>.
            Each position is also associated with a radioactive source.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.SeedCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SeedCollection.Color">
            <summary>
            The color of the seeds in the seed collection in the views.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.SeedCollection.SourcePositions">
            <summary>
            The source positions in this collection in creation order.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationPointCloudParameter">
            <summary>
            Structure-specific parameter for point cloud optimization.
            
            Relevant if the optimization algorithm uses a point cloud.
            The point cloud parameters are automatically created with default values
            when you add other structure-specific parameters or objectives in the optimization setup.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationPointCloudParameter.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationPointCloudParameter.PointResolutionInMM">
            <summary>
            The point cloud resolution.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.OptimizationPointCloudParameter.Structure">
            <summary>
            The structure whose parameters these are.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.OptimizationJawTrackingUsedParameter">
            <summary>
            An optimization parameter for using jaw tracking in VMAT optimization.
            The parameter exists if OptimizationSetup.UseJawTracking has been set to true.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.OptimizationJawTrackingUsedParameter.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Diagnosis">
            <summary>
            Represents a diagnosis of the patient.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Diagnosis.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Diagnosis.ClinicalDescription">
            <summary>
            User-defined clinical description of the diagnosis.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Diagnosis.Code">
            <summary>
            The disease code from the specified code table.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Diagnosis.CodeTable">
            <summary>
            Identifies the coding system table, for example, ICD-9-CM.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.BeamCalculationLog">
            <summary>
            Represents a beam calculation log.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.BeamCalculationLog.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BeamCalculationLog.Category">
            <summary>
            The log category, for example, "Dose", or "Optimization".
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.BeamCalculationLog.MessageLines">
            <summary>
            The log as an array of lines.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Isodose">
            <summary>
            Represents an isodose level for a fixed absolute or relative dose value.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Isodose.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Isodose.Color">
            <summary>
            The color of the isodose.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Isodose.Level">
            <summary>
            The dose value of the isodose level.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Isodose.MeshGeometry">
            <summary>
            The triangle mesh of the isodose. Returned for those isodose levels that
            are rendered in 3D in Eclipse.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Bolus">
            <summary>
            Represents a bolus, which is custom-made material that is usually fixed to the patient's skin for treatment.
            The bolus is used to modulate the depth dose profile of a beam.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Bolus.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Bolus.Id">
            <summary>
            The identifier of the bolus.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Bolus.MaterialCTValue">
            <summary>
            The CT value of the bolus material (HU).
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Bolus.Name">
            <summary>
            The name of the bolus.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.TypeBasedIdValidator">
            <summary>
            [Requires a research license] A utility class for validating the data object identifier.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TypeBasedIdValidator.IsValidId(System.String,VMS.TPS.Common.Model.API.ApiDataObject,System.Text.StringBuilder)">
            <summary>
            [Requires a research license] Returns true if the given identifier is valid for the given data object.
            </summary>
            <param name="id">The new identifier to check.</param>
            <param name="dataObject">The data object for whom the new identifier is checked.</param>
            <param name="errorHint">The error string that is set if the validation failed.</param>
            <returns>true if the given identifier is valid for the given data object.</returns>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.TypeBasedIdValidator.ThrowIfNotValidId(System.String,VMS.TPS.Common.Model.API.ApiDataObject)">
            <summary>
            [Requires a research license] Throws System.ArgumentException if the given identifier is not valid for the given data object.
            </summary>
            <param name="id">The new identifier to check.</param>
            <param name="dataObject">The data object for whom the new identifier is checked.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Tray">
            <summary>
            A tray add-on is a plate where blocks, compensators, and other beam modifying materials can be fixed to.
            The tray is inserted into a slot during the treatment of a beam.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Tray.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.Compensator">
            <summary>
            Represents a beam compensator add-on, a custom-made beam modulating material fixed to a tray, used to modulate the beam's intensity.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.Compensator.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Compensator.Material">
            <summary>
            The dosimetric material used in the compensator.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Compensator.Slot">
            <summary>
            The slot into which the tray is inserted.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.Compensator.Tray">
            <summary>
            The tray to which the compensator is connected.
            </summary>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.EvaluationDose">
            <summary>
            [Requires a research license] Represents an evaluation dose that is connected to a plan that has no beams.
            </summary>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.EvaluationDose.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            For more information on how to serialize an object into an XML document, see <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="writer">The System.Xml.XmlWriter stream, to which the object is serialized.</param>
        </member>
        <member name="M:VMS.TPS.Common.Model.API.EvaluationDose.SetVoxels(System.Int32,System.Int32[0:,0:])">
            <summary>
            [Requires a research license] For an evaluation dose (the dose of a plan that has no beams), sets the voxels of the given dose plane.
            Create the evaluation dose first using <see cref="M:VMS.TPS.Common.Model.API.ExternalPlanSetup.CreateEvaluationDose">CreateEvaluationDose</see>.
            </summary>
            <param name="planeIndex">Zero-based index of the plane.</param>
            <param name="values">The plane of voxel values. The size of the array must conform to the X-size and Y-size of the dose.</param>
        </member>
        <member name="T:VMS.TPS.Common.Model.API.ControlPointParameters">
            <summary>
            [Requires a research license] An editable copy of the parameters of a control point.
            </summary>
            <remarks>
            To apply the parameters, call the ApplyParameters method of the
            Beam class. Because the parameters are simple copies, they do not
            reflect the current state of the data model.
            </remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.CollimatorAngle">
            <summary>
            [Requires a research license] A copy of the collimator angle at this control point, in degrees, in the range [0, 360[.
            It is defined as the orientation of the IEC BEAM LIMITING DEVICE coordinate system with
            respect to the IEC GANTRY coordinate system (in degrees).
            </summary>
            <remarks>This property cannot be edited directly. Consider if removing and creating a
            new Beam works for your use case.</remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.GantryAngle">
            <summary>
            [Requires a research license] A copy of the gantry angle at this control point, in degrees, in the range [0, 360[. It is
            defined as the orientation of the IEC GANTRY coordinate system with respect to the IEC FIXED
            REFERENCE coordinate system (in degrees).
            </summary>
            <remarks>This property cannot be edited directly. Consider if removing and creating a
            new Beam works for your use case.</remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.JawPositions">
            <summary>
            [Requires a research license] A copy of the jaw positions of the treatment beams at this control point in millimeters, and
            in IEC BEAM LIMITING DEVICE coordinates.
            </summary>
            <remarks>To set the same leaf positions for all control points (as is required if you
            use a static beam), use the
            <see cref="M:VMS.TPS.Common.Model.API.BeamParameters.SetJawPositions(VMS.TPS.Common.Model.Types.VRect{System.Double})">SetJawPositions</see>
            method in BeamParameters.</remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.LeafPositions">
            <summary>
            [Requires a research license] A copy of the positions of the MLC leaf pairs (in millimeters) in the IEC BEAMLIMITING
            DEVICE coordinate axis appropriate to the MLC device type: the X-axis
            for MLCX and the Y-axis for MLCY. The two-dimensional array is
            indexed [bank, leaf], where the bank is either 0 or 1. Bank 0 represents
            the leaf bank to the negative MLC X direction, and bank 1 to the
            positive MLC X direction. If no MLC exists, a (0,0)-length array is
            returned.
            </summary>
            <remarks>To set the same leaf positions for all control points (as is required if you
            use a static MLC), use the
            <see cref="M:VMS.TPS.Common.Model.API.BeamParameters.SetAllLeafPositions(System.Single[0:,0:])">SetAllLeafPositions</see>
            method in BeamParameters.</remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.MetersetWeight">
            <summary>
            [Requires a research license] A copy of the cumulative meterset weight to this control point.
            </summary>
            <remarks>This property cannot be edited directly. Consider if removing and creating a
            new Beam works for your use case.</remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.PatientSupportAngle">
            <summary>
            [Requires a research license] A copy of the patient support angle at this control point, in degrees, in the range [0, 360[.
            It is defined as the orientation of the IEC PATIENT SUPPORT (turntable) coordinate system
            with respect to the IEC FIXED REFERENCE coordinate system (in degrees).</summary>
            <remarks>This property cannot be edited directly. Consider if removing and creating a
            new Beam works for your use case.</remarks>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.TableTopLateralPosition">
            <summary>
            [Requires a research license] Table top lateral position in millimeters, in the IEC TABLE TOP coordinate system.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.TableTopLongitudinalPosition">
            <summary>
            [Requires a research license] Table top longitudinal position in millimeters, in the IEC TABLE TOP coordinate system.
            </summary>
        </member>
        <member name="P:VMS.TPS.Common.Model.API.ControlPointParameters.TableTopVerticalPosition">
            <summary>
            [Requires a research license] Table top vertical position in millimeters, in the IEC TABLE TOP coordinate system.
            </summary>
        </member>
    </members>
</doc>
